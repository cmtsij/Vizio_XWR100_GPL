#!/bin/sh
####################################################################
## makeVAP
##
## This script is used to create AP or Station instances (VAPs).  It
## will NOT actually join the bridge or do any RF configuration.
##
## The form of the command is
##
## makeVAP <Mode> <ESSID> <Channel_String> <beaconint>
##
## Where
##     Mode:    Either ap, ap-wds, sta, or sta-wds
##              (access point or station)
##     ESSID:   ESSID String
##     Channel: String indicating the channel configuration.  This is in
##     String   the form inst:RF:channel:mode where
##              Inst = Interface instance (which radio, 0 or 1)
##              RF   = RF indicates radio should be configured with the specified parameters
##              channel = channel to put the AP on, use 11A or 11G to scan
##              mode = operating mode, one of
##              11AST         : 11 A Static Turbo (Legacy)
##              AUTO          : Legacy Scan Mode
##              11A           : Legacy 11A mode
##              11B
##              11G
##              FH
##              TA
##              TG
##              11NAHT20
##              11NGHT20
##              11NAHT40PLUS
##              11NAHT40MINUS
##              11NGHT40PLUS  
##              11NGHT40MINUS
##              11NAHT40 (valid only when channel=11na)
##              11NGHT40 (valid only when channel=11ng)
##
##
## beaconint:   This is the beacon interval desired for this VAP.  Note
##              that this is system wide, and will override the current
##              beacon interval for ALL vaps.  You MUST also include the
##              RF command for this option.
##
## Examples:
##   Access Point with RF
##      makeVAP ap OpenAP 0:RF:6:
##   Access Point with RF, beacon interval of 400 ms
##      makeVAP ap OpenAP RF 400
##   Access Point w/o RF
##      makeVAP ap NormAP
##   WDS Root AP
##      makeVAP ap-wds RootAP RF
##   WDS Repeater (two commands)
##      makeVAP sta-wds RPTR RF
##      makeVAP ap-wds RPTR
##
###################################################################
#set -x
. /etc/ath/apcfg

if [ "${1}" = "" ]; then
    echo "makeVAP usage"
    echo "makeVAP mode essid IFstr"
    echo
    echo "mode: [ap | ap-wds | sta | sta-wds | sta-fwd]"
    echo "essid: up to 32 character ESSID string"
    echo "RF: Include RF commands"
    echo "beaconint: Beacon interval, milliseconds"
    echo
    exit
fi

MODE=`echo $1 | cut -f 1 -d '-'`
SUB_MODE=`echo $1 | cut -f 2 -d '-'`
IND_MODE=`echo $1 | cut -f 3 -d '-'`

IFNUM=`echo $3 | cut -f 1 -d ':'`
RF=`echo $3 | cut -f 2 -d ':'`
PRI_CH=`echo $3 | cut -f 3 -d ':'`
CH_MODE=`echo $3 | cut -f 4 -d ':'`

if [ "${IFNUM}" != "0" -a "${IFNUM}" != "1" ]; then
    IFNUM=0
fi

##
## Need to select the proper radio parameters based on the interface
## ID
##

if [ "${IFNUM}" = "1" ]; then
    R_SHORTGI=$SHORTGI_2
	R_CWMMODE=$CWMMODE_2
    R_AMPDUENABLE=$AMPDUENABLE_2
	R_AMPDUFRAMES=$AMPDUFRAMES_2
	R_AMPDULIMIT=$AMPDULIMIT_2
	R_AMPDUMIN=$AMPDUMIN_2
	R_TXCHAIN=$TX_CHAINMASK_2
	R_RXCHAIN=$RX_CHAINMASK_2
else
    R_SHORTGI=$SHORTGI
	R_CWMMODE=$CWMMODE
    R_AMPDUENABLE=$AMPDUENABLE
	R_AMPDUFRAMES=$AMPDUFRAMES
	R_AMPDULIMIT=$AMPDULIMIT
	R_AMPDUMIN=$AMPDUMIN
	R_TXCHAIN=$TX_CHAINMASK
	R_RXCHAIN=$RX_CHAINMASK
fi

ESSID=$2
BEACONINT=$4

##
## First, let's see if we have the modules loaded.  If not, call the
## rc.wlan script to load them
##

MODLIST=`lsmod | grep ath_hal`

if [ "${MODLIST}" = "" ]; then
    /etc/rc.d/rc.wlan up

    ##
	## Check for bad return value.  If so, exit
	##

	if [ $? != 0 ]; then
	    exit 255
	fi
else
    echo "Modules already loaded"
fi

echo Creating ${MODE} for "${ESSID}" on ${BRIDGE}

##
## Create the instance
##

if [ "${MODE}" = "sta" ]; then
    APNAME=`wlanconfig ath create wlandev wifi$IFNUM wlanmode ${MODE} nosbeacon`
    APMODE="mode managed"
else
    APNAME=`wlanconfig ath create wlandev wifi$IFNUM wlanmode ${MODE}`
    APMODE="mode master"
fi

echo Added ${APNAME} ${APMODE}

##
## Enable WDS if selected
##

if [ "${SUB_MODE}" = "wds" ]; then
    iwpriv ${APNAME} wds 1
fi

##
## Enable VAP Independant mode - for repeater-ind conf
##

if [ "${IND_MODE}" = "ind" ]; then
    if [ $PRI_CH = 11na -o $PRI_CH = 11ng ]; then
        echo "Auto Channel selection is not allowed for VAP independant mode"
        exit 255
    else
        iwpriv ${APNAME} vap_ind 1
    fi
fi

##
## Enable Station forwarding if selected
##

if [ "${SUB_MODE}" = "fwd" ]; then
    iwpriv ${APNAME} stafwd 1
fi

##
## Disable Background Scan
##

iwpriv ${APNAME} bgscan 0

##
# set various debug modes
##

if [ "${DEBUGMODE}" = "" ]; then
    DEBUGMODE=0x100
fi

if [ "${HALDEBUG}" = "" ]; then
    HALDEBUG=0x0
fi

if [ "${ATHDEBUG}" = "" ]; then
    ATHDEBUG=0x0
fi

iwpriv wifi$IFNUM HALDbg $HALDEBUG
iwpriv wifi$IFNUM ATHDebug $ATHDEBUG
iwpriv ${APNAME} dbgLVL $DEBUGMODE

##
## Operating Mode passed in through call.  Determine the frequeny, or if a 
## scan is required
##

if [ $PRI_CH = 11na -o $PRI_CH = 11ng ]; then
    FREQ=""
else
    FREQ="freq $PRI_CH"
fi

#####################################################################
## Check for RF command. If so, set the RF parameters, else do the
## simple cofiguration.
##

if [ "${RF}" = "RF" ]; then

    #
    # 11n configuration section
    # increase queue length
    #

    ifconfig ${APNAME} txqueuelen $TXQUEUELEN
    ifconfig wifi$IFNUM txqueuelen $TXQUEUELEN

    # turn on halfgi
    iwpriv ${APNAME} shortgi $R_SHORTGI

    iwpriv ${APNAME} noedgech $NO_EDGE_CH

    iwpriv ${APNAME} mode $CH_MODE

    #
    # Check to see if we are in one of the 11NG bands that require
    # ANI processing
    #

    BAND=`echo $CH_MODE | grep 11NG`

    if [ "${BAND}" != "" ]; then
        iwpriv wifi$IFNUM ForBiasAuto 1
    fi

####################
####### TEMP WORKAROUND
####################

    PLUS=`echo $CH_MODE | grep PLUS`
    MINUS=`echo $CH_MODE | grep MINUS`

    if [ "${PLUS}" != "" ]; then
        iwpriv ${APNAME} extoffset 1
    fi
    if [ "${MINUS}" != "" ]; then
        iwpriv ${APNAME} extoffset -1
    fi

#######################

    #
    # Channel Width Mode
    # cwmmode 0 is static 20; cwmmode 1 is dyn 2040; cwmmode 2 is static 40
    #
    if [ $CH_MODE = 11NGHT20 -o $CH_MODE = 11NAHT20 ]; then
        iwpriv ${APNAME} cwmmode 0
    else
        iwpriv ${APNAME} cwmmode $R_CWMMODE
#		echo -e "$CH_MODE" >> /tmp/chmode
#		echo -e "$R_CWMMODE" >> /tmp/chmode
#		iwpriv ${APNAME} get_cwmmode $R_CWMMODE >> /tmp/chmode
    fi

    #
    # Set Aggregation State
    #

    iwpriv wifi$IFNUM AMPDU $R_AMPDUENABLE

    # set number of sub-frames in an ampdu

    iwpriv wifi$IFNUM AMPDUFrames $R_AMPDUFRAMES

    # set ampdu limit

    iwpriv wifi$IFNUM AMPDULim $R_AMPDULIMIT
	iwpriv ${APNAME} ampdumin $R_AMPDUMIN 
    
    # 'g'-only mode (no 'b' stations)
    iwpriv ${APNAME} pureg $PUREG

    # 'n'-only mode (no legacy b/g/a stations)
    iwpriv ${APNAME} puren $PUREN
    #
    # set SSID and frequency
    #

    if [ "_${ESSID}" != "_any" ]; then
    	iwconfig ${APNAME} essid "${ESSID}" ${APMODE} ${FREQ}
    else
        iwconfig ${APNAME} ${APMODE} ${FREQ}
    fi

    #
    # If rate control is not auto, set the manual settings
    #
    
    if [ "${RATECTL}" != "auto" ]; then
        iwpriv ${APNAME} set11NRates $MANRATE
        iwpriv ${APNAME} set11NRetries $MANRETRIES
    fi

    #
    # Set the chain masks
    #

    if [ "${R_TXCHAIN}" != "" -a "${R_TXCHAIN}" != "0" ]; then
        iwpriv wifi$IFNUM txchainmask $R_TXCHAIN
	fi

    if [ "${R_RXCHAIN}" != ""  -a "${R_RXCHAIN}" != "0" ]; then
        iwpriv wifi$IFNUM rxchainmask $R_RXCHAIN
    fi

    #
    # An extra IE is provided for Intel interop
    #

    echo 1 > /proc/sys/dev/ath/htdupieenable

    #
    # This is where extra commands are executed.
    #

    $AP_EXTRA

else
    ####
    # set SSID only
    ###

    iwpriv ${APNAME} mode ${CH_MODE}
    iwconfig ${APNAME} essid "${ESSID}" ${APMODE} ${FREQ}

fi

##
## Check for multiple VAPs.  If the VAP name is ath2 we assume we want the
## beacon interval to be 400 ms
##

if [ "${BEACONINT}" != "" ]; then
    #
    # Beacon interval was specified
    #

    iwpriv ${APNAME} bintval ${BEACONINT}
fi

##
## Check to see if this is a wds station, and if the rootap for
## this station is defined, ensure it's set
##

if [ "${MODE}" = "sta" -a "${WDS}" = "wds" ]; then
	if [ "${APNAME}" = "ath0" -a "${ROOTAP_MAC}" != "" ]; then
        iwconfig ath0 ap $ROOTAP_MAC
	fi

	if [ "${APNAME}" = "ath1" -a "${ROOTAP_MAC_2}" != "" ]; then
        iwconfig ath1 ap $ROOTAP_MAC_2
	fi

	if [ "${APNAME}" = "ath2" -a "${ROOTAP_MAC_3}" != "" ]; then
        iwconfig ath2 ap $ROOTAP_MAC_3
	fi

	if [ "${APNAME}" = "ath3" -a "${ROOTAP_MAC_4}" != "" ]; then
        iwconfig ath3 ap $ROOTAP_MAC_4
	fi
fi

##
## Script Complete
##

echo Created ${APNAME} mode ${MODE} for "${ESSID}"
