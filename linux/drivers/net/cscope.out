cscope 15 $HOME/fusion_code/AP7.3.0.412_AP94/linux/drivers/net               0000271522
	@ag7100/adm_phy.c

25 
	~<löux/c⁄fig.h
>

26 
	~<löux/ty≥s.h
>

27 
	~<löux/√tdevi˚.h
>

28 
	~<löux/ëhîdevi˚.h
>

29 
	~<löux/dñay.h
>

31 
	~"ag7100_phy.h
"

36 
	mPHY_SRCPORT_INFO
,

37 
	mPHY_PORTINFO_SIZE
,

38 } 
	tPHY_CAP_TYPE
;

41 
	mPHY_SRCPORT_NONE
,

42 
	mPHY_SRCPORT_VLANTAG
,

43 
	mPHY_SRCPORT_TRAILER
,

44 } 
	tPHY_SRCPORT_TYPE
;

46 
	#DRV_LOG
(
DBG_SW
, 
X0
, 
X1
, 
X2
, 
X3
, 
X4
, 
X5
, 
X6
)

	)

47 
	#DRV_MSG
(
x
,
a
,
b
,
c
,
d
,
e
,
f
)

	)

48 
	#DRV_PRINT
(
DBG_SW
,
X
)

	)

50 
	#ADM_LAN_PORT_VLAN
 1

	)

51 
	#ADM_WAN_PORT_VLAN
 2

	)

53 
	#ENET_UNIT_DEFAULT
 1

	)

55 
	#TRUE
 1

	)

56 
	#FALSE
 0

	)

62 
BOOL
 
	misE√tP‹t
;

63 
BOOL
 
	misPhyAlive
;

64 
	mëhUnô
;

65 
uöt32_t
 
	mphyBa£
;

66 
uöt32_t
 
	mphyAddr
;

67 
uöt32_t
 
	mVLANTabÀSëtög
;

68 } 
	tùPhyInfo_t
;

70 
	#ADM_PHY0_ADDR
 0x10

	)

71 
	#ADM_PHY1_ADDR
 0x11

	)

72 
	#ADM_PHY2_ADDR
 0x12

	)

73 
	#ADM_PHY3_ADDR
 0x13

	)

74 
	#ADM_PHY4_ADDR
 0x14

	)

76 
	#P0_TXL
 0xcc

	)

77 
	#P5_TXL
 0xdc

	)

79 
	#P0_TXH
 0xcd

	)

80 
	#P5_TXH
 0xdd

	)

82 
	#P0_TXBL
 0xde

	)

83 
	#P5_TXBL
 0xì

	)

85 
	#P0_TXBH
 0xdf

	)

86 
	#P5_TXBH
 0xef

	)

88 
	#P0_RXL
 0xac

	)

89 
	#P5_RXL
 0xb8

	)

91 
	#P0_RXH
 0xa9

	)

92 
	#P5_RXH
 0xb9

	)

94 
	#P0_ERRL
 0x102

	)

95 
	#P5_ERRL
 0x112

	)

97 
	#P0_ERRH
 0x103

	)

98 
	#P5_ERRH
 0x113

	)

103 
ùPhyInfo_t
 
	gùPhyInfo
[] = {

115 {
TRUE
,

116 
FALSE
,

117 
ENET_UNIT_DEFAULT
,

119 
ADM_PHY0_ADDR
,

120 
ADM_LAN_PORT_VLAN


123 {
TRUE
,

124 
FALSE
,

125 
ENET_UNIT_DEFAULT
,

127 
ADM_PHY1_ADDR
,

128 
ADM_LAN_PORT_VLAN


131 {
TRUE
,

132 
FALSE
,

133 
ENET_UNIT_DEFAULT
,

135 
ADM_PHY2_ADDR
,

136 
ADM_LAN_PORT_VLAN


139 {
TRUE
,

140 
FALSE
,

141 
ENET_UNIT_DEFAULT
,

143 
ADM_PHY3_ADDR
,

144 
ADM_LAN_PORT_VLAN


147 {
TRUE
,

148 
FALSE
,

151 
ADM_PHY4_ADDR
,

152 
ADM_LAN_PORT_VLAN


155 {
FALSE
,

156 
TRUE
,

157 
ENET_UNIT_DEFAULT
,

160 
ADM_LAN_PORT_VLAN


164 
	#ADM_GLOBALREGBASE
 0

	)

167 
	#ADM_PHY_MAX
 5

	)

170 
	#ADM_ID_MIN
 0

	)

171 
	#ADM_ID_MAX
 (
ADM_PHY_MAX
-1)

	)

174 
	#ADM_IS_ENET_PORT
(
phyUnô
Ë(
ùPhyInfo
[phyUnô].
isE√tP‹t
)

	)

175 
	#ADM_IS_PHY_ALIVE
(
phyUnô
Ë(
ùPhyInfo
[phyUnô].
isPhyAlive
)

	)

176 
	#ADM_ETHUNIT
(
phyUnô
Ë(
ùPhyInfo
[phyUnô].
ëhUnô
)

	)

177 
	#ADM_PHYBASE
(
phyUnô
Ë(
ùPhyInfo
[phyUnô].
phyBa£
)

	)

178 
	#ADM_PHYADDR
(
phyUnô
Ë(
ùPhyInfo
[phyUnô].
phyAddr
)

	)

179 
	#ADM_VLAN_TABLE_SETTING
(
phyUnô
Ë(
ùPhyInfo
[phyUnô].
VLANTabÀSëtög
)

	)

182 
	#ADM_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
) \

183 (
	`ADM_IS_ENET_PORT
(
phyUnô
) && \

184 
	`ADM_ETHUNIT
(
phyUnô
Ë=(
ëhUnô
))

	)

187 
BOOL
 
adm_phyIsLökAlive
(
phyUnô
);

188 
adm_gë_cou¡îs
();

198 
BOOL


199 
	$adm_phyIsLökAlive
(
phyUnô
)

201 
uöt16_t
 
phyHwSètus
;

202 
uöt32_t
 
phyBa£
;

203 
uöt32_t
 
phyAddr
;

205 
phyBa£
 = 
	`ADM_PHYBASE
(
phyUnô
);

206 
phyAddr
 = 
	`ADM_PHYADDR
(
phyUnô
);

208 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
ADM_PHY_STATUS
);

210 i‡(
phyHwSètus
 & 
ADM_STATUS_LINK_PASS
) {

211  
TRUE
;

213  
FALSE
;

215 
	}
}

230 
BOOL


231 
	$adm_phySëup
(
ëhUnô
)

233 
phyUnô
;

234 
uöt16_t
 
phyHwSètus
;

235 
uöt16_t
 
timeout
;

236 
liveLöks
 = 0;

237 
uöt32_t
 
phyBa£
 = 0;

238 
BOOL
 
foundPhy
 = 
FALSE
;

239 
uöt32_t
 
phyAddr
;

242 
phyUnô
=0;ÖhyUnô < 
ADM_PHY_MAX
;ÖhyUnit++) {

243 i‡(!
	`ADM_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

247 
phyBa£
 = 
	`ADM_PHYBASE
(
phyUnô
);

248 
phyAddr
 = 
	`ADM_PHYADDR
(
phyUnô
);

250 
	`phy_ªg_wrôe
(
phyBa£
, 
phyAddr
, 
ADM_PHY_CONTROL
,

251 
ADM_CTRL_SOFTWARE_RESET
);

257 
	`mdñay
(300);

260 
phyUnô
=0;ÖhyUnô < 
ADM_PHY_MAX
;ÖhyUnit++) {

261 i‡(!
	`ADM_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

265 
phyBa£
 = 
	`ADM_PHYBASE
(
phyUnô
);

266 
foundPhy
 = 
TRUE
;

270 i‡(!
foundPhy
) {

271  
FALSE
;

275 
phyUnô
=0;ÖhyUnô < 
ADM_PHY_MAX
;ÖhyUnit++) {

276 i‡(!
	`ADM_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

280 
phyBa£
 = 
	`ADM_PHYBASE
(
phyUnô
);

281 
phyAddr
 = 
	`ADM_PHYADDR
(
phyUnô
);

283 
	`phy_ªg_wrôe
(
phyBa£
, 
phyAddr
, 
ADM_AUTONEG_ADVERT
,

284 
ADM_ADVERTISE_ALL
);

286 
	`phy_ªg_wrôe
(
phyBa£
, 
phyAddr
, 
ADM_PHY_CONTROL
,

287 
ADM_CTRL_AUTONEGOTIATION_ENABLE
 | 
ADM_CTRL_START_AUTONEGOTIATION
);

295 
timeout
=5;

296 
phyUnô
=0; (phyUnô < 
ADM_PHY_MAX
) ;ÖhyUnit++) {

297 i‡(!
	`ADM_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

301 
phyBa£
 = 
	`ADM_PHYBASE
(
phyUnô
);

302 
phyAddr
 = 
	`ADM_PHYADDR
(
phyUnô
);

304 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
ADM_PHY_STATUS
);

306 i‡(
	`ADM_AUTONEG_DONE
(
phyHwSètus
)) {

307 
	`DRV_PRINT
(
DRV_DEBUG_PHYSETUP
,

308 ("P‹à%d, Neg Suc˚ss\n", 
phyUnô
));

311 i‡(
timeout
 == 0) {

312 
	`DRV_PRINT
(
DRV_DEBUG_PHYSETUP
,

313 ("P‹à%d, Negogüti⁄Åimeout\n", 
phyUnô
));

316 i‡(--
timeout
 == 0) {

317 
	`DRV_PRINT
(
DRV_DEBUG_PHYSETUP
,

318 ("P‹à%d, Negogüti⁄Åimeout\n", 
phyUnô
));

322 
	`mdñay
(150);

335 
phyUnô
=0;ÖhyUnô < 
ADM_PHY_MAX
;ÖhyUnit++) {

336 i‡(!
	`ADM_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

340 i‡(
	`adm_phyIsLökAlive
(
phyUnô
)) {

341 
liveLöks
++;

342 
	`ADM_IS_PHY_ALIVE
(
phyUnô
Ë
TRUE
;

344 
	`ADM_IS_PHY_ALIVE
(
phyUnô
Ë
FALSE
;

347 
	`DRV_PRINT
(
DRV_DEBUG_PHYSETUP
,

349 
ëhUnô
,

350 
	`phy_ªg_ªad
(
	`ADM_PHYBASE
(
phyUnô
),

351 
	`ADM_PHYADDR
(
phyUnô
),

352 
ADM_PHY_STATUS
)));

358 
	`phy_ªg_wrôe
(0, 0, 0x10, 0x50);

359  (
liveLöks
 > 0);

360 
	}
}

372 
	$adm_phyIsFuŒDu∂ex
(
ëhUnô
)

374 
phyUnô
;

375 
uöt32_t
 
phyBa£
;

376 
uöt32_t
 
phyAddr
;

377 
uöt16_t
 
phyHwSètus
;

379 
phyUnô
=0;ÖhyUnô < 
ADM_PHY_MAX
;ÖhyUnit++) {

380 i‡(!
	`ADM_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

384 i‡(
	`adm_phyIsLökAlive
(
phyUnô
)) {

386 
phyBa£
 = 
	`ADM_PHYBASE
(
phyUnô
);

387 
phyAddr
 = 
	`ADM_PHYADDR
(
phyUnô
);

389 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
ADM_LINK_PARTNER_ABILITY
);

390 i‡((
phyHwSètus
 & 
ADM_LINK_100BASETX_FULL_DUPLEX
) ||

391 (
phyHwSètus
 & 
ADM_LINK_10BASETX_FULL_DUPLEX
)) {

392  
TRUE
;

397  
FALSE
;

399 
	}
}

412 
BOOL


413 
	$adm_phyS≥ed
(
ëhUnô
)

415 
phyUnô
;

416 
uöt16_t
 
phyHwSètus
;

417 
uöt32_t
 
phyBa£
;

418 
uöt32_t
 
phyAddr
;

420 
phyUnô
=0;ÖhyUnô < 
ADM_PHY_MAX
;ÖhyUnit++) {

421 i‡(!
	`ADM_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

425 i‡(
	`adm_phyIsLökAlive
(
phyUnô
)) {

427 
phyBa£
 = 
	`ADM_PHYBASE
(
phyUnô
);

428 
phyAddr
 = 
	`ADM_PHYADDR
(
phyUnô
);

430 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
ADM_LINK_PARTNER_ABILITY
);

432 i‡(
phyHwSètus
 & 
ADM_LINK_100BASETX
) {

433  
AG7100_PHY_SPEED_100TX
;

438  
AG7100_PHY_SPEED_10T
;

439 
	}
}

454 
	$adm_phyIsUp
(
ëhUnô
)

457 
phyUnô
;

458 
uöt16_t
 
phyHwSètus
;

459 
ùPhyInfo_t
 *
œ°Sètus
;

460 
lökCou¡
 = 0;

461 
lo°Löks
 = 0;

462 
gaöedLöks
 = 0;

463 
uöt32_t
 
phyBa£
;

464 
uöt32_t
 
phyAddr
;

466 
phyUnô
=0;ÖhyUnô < 
ADM_PHY_MAX
;ÖhyUnit++) {

467 i‡(!
	`ADM_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

471 
phyBa£
 = 
	`ADM_PHYBASE
(
phyUnô
);

472 
phyAddr
 = 
	`ADM_PHYADDR
(
phyUnô
);

475 
œ°Sètus
 = &
ùPhyInfo
[
phyUnô
];

476 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
ADM_PHY_STATUS
);

478 i‡(
œ°Sètus
->
isPhyAlive
) {

480 i‡(
phyHwSètus
 & 
ADM_STATUS_LINK_PASS
) {

481 
lökCou¡
++;

483 
lo°Löks
++;

484 #ifde‡
COBRA_TODO


485 
	`mv_ÊushATUDB
(
phyUnô
);

487 
	`DRV_PRINT
(
DRV_DEBUG_PHYCHANGE
,("\nenet%dÖort%d down\n",

488 
ëhUnô
, 
phyUnô
));

489 
œ°Sètus
->
isPhyAlive
 = 
FALSE
;

493 i‡(
	`ADM_AUTONEG_DONE
(
phyHwSètus
)) {

495 
gaöedLöks
++;

496 
lökCou¡
++;

497 
	`DRV_PRINT
(
DRV_DEBUG_PHYCHANGE
,("\nenet%dÖort%d up\n",

498 
ëhUnô
, 
phyUnô
));

499 
œ°Sètus
->
isPhyAlive
 = 
TRUE
;

504  (
lökCou¡
);

507 i‡(
lökCou¡
 == 0) {

508 i‡(
lo°Löks
) {

510 
	`phyLökLo°
(
ëhUnô
);

513 i‡(
gaöedLöks
 =
lökCou¡
) {

515 
	`phyLökGaöed
(
ëhUnô
);

519 
	}
}

521 
	#adm_cou¡î_∑r£
(
_ªg
, 
_˙t
, 
_˙thi
) do { \

522 
_˙t
 = 
	`phy_ªg_ªad
(0, ((
_ªg
##
L
 & (0x1f << 5)) >> 5), (_reg##L & 0x1f)); \

523 
_˙thi
 = 
	`phy_ªg_ªad
(0, ((
_ªg
##
H
 & (0x1f << 5)) >> 5), (_reg##H & 0x1f)); \

524 }0);

	)

527 
	$adm_gë_cou¡îs
()

529 
cou¡
, 
cou¡hi
;

531 
	`adm_cou¡î_∑r£
(
P0_TX
, 
cou¡
, 
cou¡hi
);

532 
	`¥ötk
("P0 Tx: %10d ", (
cou¡hi
 << 16)|
cou¡
);

534 
	`adm_cou¡î_∑r£
(
P0_TXB
, 
cou¡
, 
cou¡hi
);

535 
	`¥ötk
("P0 TxB: %#x ", (
cou¡hi
 << 16)|
cou¡
);

537 
	`adm_cou¡î_∑r£
(
P0_RX
, 
cou¡
, 
cou¡hi
);

538 
	`¥ötk
("P0 Rx: %10d ", (
cou¡hi
 << 16)|
cou¡
);

540 
	`adm_cou¡î_∑r£
(
P0_ERR
, 
cou¡
, 
cou¡hi
);

541 
	`¥ötk
("P0 ERR: %10d\n", (
cou¡hi
 << 16)|
cou¡
);

543 
	`adm_cou¡î_∑r£
(
P5_TX
, 
cou¡
, 
cou¡hi
);

544 
	`¥ötk
("P5 Tx: %10d ", (
cou¡hi
 << 16)|
cou¡
);

546 
	`adm_cou¡î_∑r£
(
P5_TXB
, 
cou¡
, 
cou¡hi
);

547 
	`¥ötk
("P5 TxB: %#x ", (
cou¡hi
 << 16)|
cou¡
);

549 
	`adm_cou¡î_∑r£
(
P5_RX
, 
cou¡
, 
cou¡hi
);

550 
	`¥ötk
("P5 Rx: %10d ", (
cou¡hi
 << 16)|
cou¡
);

552 
	`adm_cou¡î_∑r£
(
P5_ERR
, 
cou¡
, 
cou¡hi
);

553 
	`¥ötk
("P5 ERR: %10d\n", (
cou¡hi
 << 16)|
cou¡
);

555 
	}
}

	@ag7100/adm_phy.h

18 #i‚de‡
_ADM_PHY_H


19 
	#_ADM_PHY_H


	)

21 
	#ADM_PHY0_ADDR
 0x10

	)

22 
	#ADM_PHY1_ADDR
 0x11

	)

23 
	#ADM_PHY2_ADDR
 0x12

	)

24 
	#ADM_PHY3_ADDR
 0x13

	)

25 
	#ADM_PHY4_ADDR
 0x14

	)

27 
	#ADM_VLAN_TAG_VALID
 0x81

	)

28 
	#ADM_VLAN_TAG_SIZE
 4

	)

29 
	#ADM_VLAN_TAG_OFFSET
 12

	)

34 
	#ADM_PHY_CONTROL
 0

	)

35 
	#ADM_PHY_STATUS
 1

	)

36 
	#ADM_PHY_ID1
 2

	)

37 
	#ADM_PHY_ID2
 3

	)

38 
	#ADM_AUTONEG_ADVERT
 4

	)

39 
	#ADM_LINK_PARTNER_ABILITY
 5

	)

40 
	#ADM_AUTONEG_EXPANSION
 6

	)

44 
	#ADM_CTRL_SOFTWARE_RESET
 0x8000

	)

45 
	#ADM_CTRL_SPEED_100
 0x2000

	)

46 
	#ADM_CTRL_AUTONEGOTIATION_ENABLE
 0x1000

	)

47 
	#ADM_CTRL_START_AUTONEGOTIATION
 0x0200

	)

48 
	#ADM_CTRL_SPEED_FULL_DUPLEX
 0x0100

	)

51 
	#ADM_STATUS_AUTO_NEG_DONE
 0x0020

	)

52 
	#ADM_STATUS_LINK_PASS
 0x0004

	)

54 
	#ADM_AUTONEG_DONE
(
ù_phy_°©us
) \

55 (((
ù_phy_°©us
) & \

56 (
ADM_STATUS_AUTO_NEG_DONE
)) == \

57 (
ADM_STATUS_AUTO_NEG_DONE
))

	)

60 
	#ADM_LINK_100BASETX_FULL_DUPLEX
 0x0100

	)

61 
	#ADM_LINK_100BASETX
 0x0080

	)

62 
	#ADM_LINK_10BASETX_FULL_DUPLEX
 0x0040

	)

63 
	#ADM_LINK_10BASETX
 0x0020

	)

66 
	#ADM_ADVERTISE_100FULL
 0x0100

	)

67 
	#ADM_ADVERTISE_100HALF
 0x0080

	)

68 
	#ADM_ADVERTISE_10FULL
 0x0040

	)

69 
	#ADM_ADVERTISE_10HALF
 0x0020

	)

71 
	#ADM_ADVERTISE_ALL
 (
ADM_ADVERTISE_10HALF
 | 
ADM_ADVERTISE_10FULL
 | \

72 
ADM_ADVERTISE_100HALF
 | 
ADM_ADVERTISE_100FULL
)

	)

74 
	#BOOL
 
uöt32_t


	)

76 
BOOL
 
adm_phySëup
(
ëhUnô
);

77 
adm_phyIsUp
(
ëhUnô
);

78 
adm_phyIsFuŒDu∂ex
(
ëhUnô
);

79 
BOOL
 
adm_phyS≥ed
(
ëhUnô
);

	@ag7100/ag7100.c

1 
	~<löux/°ddef.h
>

2 
	~<löux/c⁄fig.h
>

3 
	~<löux/moduÀ.h
>

4 
	~<löux/ty≥s.h
>

5 
	~<asm/byã‹dî.h
>

6 
	~<löux/öô.h
>

7 
	~<löux/î∫o.h
>

8 
	~<löux/kî√l.h
>

9 
	~<löux/√tdevi˚.h
>

10 
	~<löux/ëhîdevi˚.h
>

11 
	~<löux/skbuff.h
>

12 
	~<löux/dñay.h
>

13 
	~<löux/timî.h
>

14 
	~<löux/öãºu±.h
>

15 
	~<löux/dma-m≠pög.h
>

16 
	~<löux/bô›s.h
>

17 
	~<asm/úq.h
>

18 
	~<asm/io.h
>

19 
	~<√t/sch_gíîic.h
>

21 
	~"ag7100.h
"

22 
	~"ag7100_phy.h
"

23 
	~"ag7100_åc.h
"

25 
ag7100_mac_t
 *
	gag7100_macs
[2];

26 
ag7100_hw_£tup
(
ag7100_mac_t
 *
mac
);

27 
ag7100_hw_°›
(
ag7100_mac_t
 *
mac
);

28 
ag7100_oom_timî
(
d©a
);

29 
ag7100_check_lök
(
ag7100_mac_t
 *
mac
);

30 #ifde‡
DMA_DEBUG


31 
check_f‹_dma_h™g
(
ag7100_mac_t
 *
mac
);

33 
ag7100_tx_Æloc
(
ag7100_mac_t
 *
mac
);

34 
ag7100_rx_Æloc
(
ag7100_mac_t
 *
mac
);

35 
ag7100_rx_‰ì
(
ag7100_mac_t
 *
mac
);

36 
ag7100_tx_‰ì
(
ag7100_mac_t
 *
mac
);

37 
ag7100_rög_Æloc
(
ag7100_rög_t
 *
r
, 
cou¡
);

38 
ag7100_rx_ª∂íish
(
ag7100_mac_t
 *
mac
);

39 
ag7100_tx_ª≠
(
ag7100_mac_t
 *
mac
);

40 
ag7100_rög_ªÀa£
(
ag7100_mac_t
 *
mac
, 
ag7100_rög_t
 *
r
);

41 
ag7100_rög_‰ì
(
ag7100_rög_t
 *
r
);

42 
ag7100_tx_timeout_èsk
(
ag7100_mac_t
 *
mac
);

43 
ag7100_gë_deÁu…_maˇddr
(
ag7100_mac_t
 *
mac
, 
u8
 *
mac_addr
);

44 
ag7100_pﬁl
(
√t_devi˚
 *
dev
, *
budgë
);

45 
ag7100_buf„r_‰ì
(
sk_buff
 *
skb
);

46 #ifde‡
CONFIG_AR9100


47 
ag7100_dma_ª£t
(
ag7100_mac_t
 *
mac
);

48 
	gbﬂrd_vîsi⁄
;

50 
ag7100_ªcv_∑ckës
(
√t_devi˚
 *
dev
, 
ag7100_mac_t
 *
mac
,

51 
max_w‹k
, *
w‹k_d⁄e
);

52 
úqªtu∫_t
 
ag7100_öå
(
˝l
, *
dev_id
, 
±_ªgs
 *
ªgs
);

53 
sk_buff
 * 
ag7100_buf„r_Æloc
();

55 *
	gmii_°r
[2][4] = {

59 *
	g•d_°r
[] = {"10Mbps", "100Mbps", "1000Mbps"};

60 *
	gdup_°r
[] = {"half duplex", "full duplex"};

62 
	#MODULE_NAME
 "AG7100"

	)

65 
	gtx_Àn_≥r_ds
 = 0;

66 #i‡
deföed
(
CONFIG_AR9100
Ë&& deföed(
CONFIG_AG7100_GE1_RMII
)

67 
ag7100_tx_Êush
(
ag7100_mac_t
 *
mac
);

68 
howl_10ba£t_w¨
(
ag7100_mac_t
 *
mac
);

70 
moduÀ_∑øm
(
tx_Àn_≥r_ds
, , 0);

71 
MODULE_PARM_DESC
(
tx_Àn_≥r_ds
, "Size of DMA chunk");

74 
	gtx_max_desc_≥r_ds_pkt
=0;

77 #ifde‡
CONFIG_AR9100


78 
	gfifo_3
 = 0x780008;

80 
	gfifo_3
 = 0;

82 
moduÀ_∑øm
(
fifo_3
, , 0);

83 
MODULE_PARM_DESC
(
fifo_3
, "fifo cfg 3 settings");

85 
	gmii0_if
 = 
AG7100_MII0_INTERFACE
;

86 
moduÀ_∑øm
(
mii0_if
, , 0);

87 
MODULE_PARM_DESC
(
mii0_if
, "mii0 connect");

89 
	gmii1_if
 = 
AG7100_MII1_INTERFACE
;

90 
moduÀ_∑øm
(
mii1_if
, , 0);

91 
MODULE_PARM_DESC
(
mii1_if
, "mii1 connect");

92 #i‚de‡
CONFIG_AR9100


93 
	ggige_∂l
 = 0x0110000;

95 
	#SW_PLL
 0x1f000000ul

	)

96 
	ggige_∂l
 = 0x1a000000;

98 
moduÀ_∑øm
(
gige_∂l
, , 0);

99 
MODULE_PARM_DESC
(
gige_∂l
, "Pll for (R)GMII if");

105 
	gfifo_5
 = 0x7ffef;

106 
moduÀ_∑øm
(
fifo_5
, , 0);

107 
MODULE_PARM_DESC
(
fifo_5
, "fifo cfg 5 settings");

109 
	#addr_to_w‹ds
(
addr
, 
w1
, 
w2
) { \

110 
w1
 = (
addr
[0] << 24) | (addr[1] << 16) | (addr[2] << 8) |áddr[3]; \

111 
w2
 = (
addr
[4] << 24) | (addr[5] << 16) | 0; \

112 }

	)

118 #i‚de‡
CONFIG_AG7100_LEN_PER_TX_DS


119 #îr‹ 
PÀa£
 
run
 
míuc⁄fig
 
™d
 
deföe
 
CONFIG_AG7100_LEN_PER_TX_DS


122 #i‚de‡
CONFIG_AG7100_NUMBER_TX_PKTS


123 #îr‹ 
PÀa£
 
run
 
míuc⁄fig
 
™d
 
deföe
 
CONFIG_AG7100_NUMBER_TX_PKTS


126 #i‚de‡
CONFIG_AG7100_NUMBER_RX_PKTS


127 #îr‹ 
PÀa£
 
run
 
míuc⁄fig
 
™d
 
deföe
 
CONFIG_AG7100_NUMBER_RX_PKTS


129 
	#AG7100_TX_FIFO_LEN
 2048

	)

130 
	#AG7100_TX_MIN_DS_LEN
 128

	)

131 
	#AG7100_TX_MAX_DS_LEN
 
AG7100_TX_FIFO_LEN


	)

133 
	#AG7100_TX_MTU_LEN
 1536

	)

135 
	#AG7100_TX_DESC_CNT
 
CONFIG_AG7100_NUMBER_TX_PKTS
*
tx_max_desc_≥r_ds_pkt


	)

136 
	#AG7100_TX_REAP_THRESH
 
AG7100_TX_DESC_CNT
/2

	)

137 
	#AG7100_TX_QSTART_THRESH
 4*
tx_max_desc_≥r_ds_pkt


	)

139 
	#AG7100_RX_DESC_CNT
 
CONFIG_AG7100_NUMBER_RX_PKTS


	)

141 
	#AG7100_NAPI_WEIGHT
 64

	)

142 
	#AG7100_PHY_POLL_SECONDS
 2

	)

143 
	gdma_Êag
 = 0;

144 
ölöe
 
	$ag7100_tx_ª≠_thªsh
(
ag7100_mac_t
 *
mac
)

146 
ag7100_rög_t
 *
r
 = &
mac
->
mac_txrög
;

147 #i‡
	`deföed
(
CONFIG_AR9100
Ë&& deföed(
CONFIG_AG7100_GE1_RMII
)

148 if(
mac
->
•ìd_10t
)

149  (
	`ag7100_ndesc_unu£d
(
mac
, 
r
) < 2);

152  (
	`ag7100_ndesc_unu£d
(
mac
, 
r
Ë< 
AG7100_TX_REAP_THRESH
);

153 
	}
}

155 
ölöe
 
	$ag7100_tx_rög_fuŒ
(
ag7100_mac_t
 *
mac
)

157 
ag7100_rög_t
 *
r
 = &
mac
->
mac_txrög
;

159 
	`ag7100_åc_√w
(
	`ag7100_ndesc_unu£d
(
mac
, 
r
),"txÑing full");

160  (
	`ag7100_ndesc_unu£d
(
mac
, 
r
Ë< 
tx_max_desc_≥r_ds_pkt
 + 2);

161 
	}
}

164 
	$ag7100_›í
(
√t_devi˚
 *
dev
)

166 
w1
 = 0, 
w2
 = 0;

167 
ag7100_mac_t
 *
mac
 = (ag7100_mac_à*)
dev
->
¥iv
;

168 
°
;

169 #i‡
	`deföed
(
CONFIG_AR9100
Ë&& deföed(
SWITCH_AHB_FREQ
)

170 
u32
 
tmp_∂l
, 
∂l
;

173 
	`as£π
(
mac
);

175 
°
 = 
	`ªque°_úq
(
mac
->
mac_úq
, 
ag7100_öå
, 0, 
dev
->
«me
, dev);

176 i‡(
°
 < 0)

178 
	`¥ötk
(
MODULE_NAME
 ":Ñeque° irq %d faûed %d\n", 
mac
->
mac_úq
, 
°
);

181 i‡(
	`ag7100_tx_Æloc
(
mac
)Ë
tx_Áûed
;

182 i‡(
	`ag7100_rx_Æloc
(
mac
)Ë
rx_Áûed
;

184 
	`ag7100_hw_£tup
(
mac
);

185 #i‡
	`deföed
(
CONFIG_AR9100
Ë&& deföed(
SWITCH_AHB_FREQ
)

190 
∂l

	`¨7100_ªg_rd
(
AR7100_PLL_CONFIG
);

191 
tmp_∂l
 = 
∂l
& ~((
PLL_DIV_MASK
 << 
PLL_DIV_SHIFT
Ë| (
PLL_REF_DIV_MASK
 << 
PLL_REF_DIV_SHIFT
));

192 
tmp_∂l
 =Åmp_∂»| (0x64 << 
PLL_DIV_SHIFT
) |

193 (0x5 << 
PLL_REF_DIV_SHIFT
Ë| (1 << 
AHB_DIV_SHIFT
);

195 
	`¨7100_ªg_wr_nf
(
AR7100_PLL_CONFIG
, 
tmp_∂l
);

196 
	`udñay
(100*1000);

199 #i‡
	`deföed
(
CONFIG_ATHRS26_PHY
)

202 i‡(
mac
->
mac_unô
 == 1)

203 
	`©hrs26_ªg_öô
();

204 #ñi‡
	`deföed
(
CONFIG_ATHRS16_PHY
)

205 i‡(
mac
->
mac_unô
 == 1)

206 
	`©hrs16_ªg_öô
();

209 
	`ag7100_phy_£tup
(
mac
->
mac_unô
);

211 #i‡
	`deföed
(
CONFIG_AR9100
Ë&& deföed(
SWITCH_AHB_FREQ
)

212 
	`¨7100_ªg_wr_nf
(
AR7100_PLL_CONFIG
, 
∂l
);

213 
	`udñay
(100*1000);

218 
	`addr_to_w‹ds
(
dev
->
dev_addr
, 
w1
, 
w2
);

219 
	`ag7100_ªg_wr
(
mac
, 
AG7100_GE_MAC_ADDR1
, 
w1
);

220 
	`ag7100_ªg_wr
(
mac
, 
AG7100_GE_MAC_ADDR2
, 
w2
);

225 
	`öô_timî
(&
mac
->
mac_phy_timî
);

226 
mac
->
mac_phy_timî
.
d©a
 = ()mac;

227 
mac
->
mac_phy_timî
.
fun˘i⁄
 = 
ag7100_check_lök
;

228 
	`ag7100_check_lök
(
mac
);

229 #ifde‡
DMA_DEBUG


230 
	`öô_timî
(&
mac
->
mac_dbg_timî
);

231 
mac
->
mac_dbg_timî
.
d©a
 = ()mac;

232 
mac
->
mac_dbg_timî
.
fun˘i⁄
 = (*)
check_f‹_dma_h™g
;

233 
	`mod_timî
(&
mac
->
mac_dbg_timî
, 
jiffõs
 + 
AG7100_PHY_POLL_SECONDS
*
HZ
);

236 
dev
->
å™s_°¨t
 = 
jiffõs
;

238 
	`ag7100_öt_íabÀ
(
mac
);

239 
	`ag7100_rx_°¨t
(
mac
);

241 
	`ag7100_°¨t_rx_cou¡
(
mac
);

247 
rx_Áûed
:

248 
	`ag7100_tx_‰ì
(
mac
);

249 
tx_Áûed
:

250 
	`‰ì_úq
(
mac
->
mac_úq
, 
dev
);

252 
	}
}

255 
	$ag7100_°›
(
√t_devi˚
 *
dev
)

257 
ag7100_mac_t
 *
mac
 = (ag7100_mac_à*)
dev
->
¥iv
;

258 
Êags
;

260 
	`•ö_lock_úqßve
(&
mac
->
mac_lock
, 
Êags
);

261 
	`√tif_°›_queue
(
dev
);

262 
	`√tif_ˇºõr_off
(
dev
);

264 
	`ag7100_hw_°›
(
mac
);

265 
	`‰ì_úq
(
mac
->
mac_úq
, 
dev
);

272 #i‡
	`deföed
(
CONFIG_AR9100
Ë&& deföed(
CONFIG_AG7100_GE1_RMII
)

273 
mac
->
mac_txrög
.
rög_√Àm
 = 
AG7100_TX_DESC_CNT
;

274 
mac
->
•ìd_10t
 = 0;

277 
	`ag7100_tx_‰ì
(
mac
);

278 
	`ag7100_rx_‰ì
(
mac
);

280 
	`dñ_timî
(&
mac
->
mac_phy_timî
);

281 #ifde‡
DMA_DEBUG


282 
	`dñ_timî
(&
mac
->
mac_dbg_timî
);

285 
	`•ö_u∆ock_úqª°‹e
(&
mac
->
mac_lock
, 
Êags
);

288 
	}
}

291 
	$ag7100_hw_£tup
(
ag7100_mac_t
 *
mac
)

293 
ag7100_rög_t
 *
tx
 = &
mac
->
mac_txrög
, *
rx
 = &mac->
mac_rxrög
;

294 
ag7100_desc_t
 *
r0
, *
t0
;

295 #ifde‡
CONFIG_AR9100


296 #i‚de‡
CONFIG_PORT0_AS_SWITCH


297 if(
mac
->
mac_unô
) {

298 #ifde‡
CONFIG_DUAL_F1E_PHY


299 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MAC_CFG1
, (
AG7100_MAC_CFG1_RX_EN
 |

300 
AG7100_MAC_CFG1_TX_EN
|
AG7100_MAC_CFG1_RX_FCTL
));

302 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MAC_CFG1
, (
AG7100_MAC_CFG1_RX_EN
 |

303 
AG7100_MAC_CFG1_TX_EN
|
AG7100_MAC_CFG1_RX_FCTL
|
AG7100_MAC_CFG1_TX_FCTL
));

307 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MAC_CFG1
, (
AG7100_MAC_CFG1_RX_EN
 |

308 
AG7100_MAC_CFG1_TX_EN
|
AG7100_MAC_CFG1_RX_FCTL
));

311 if(
mac
->
mac_unô
) {

312 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MAC_CFG1
, (
AG7100_MAC_CFG1_RX_EN
 |

313 
AG7100_MAC_CFG1_TX_EN
|
AG7100_MAC_CFG1_RX_FCTL
));

316 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MAC_CFG1
, (
AG7100_MAC_CFG1_RX_EN
 |

317 
AG7100_MAC_CFG1_TX_EN
 |
AG7100_MAC_CFG1_RX_FCTL
|
AG7100_MAC_CFG1_TX_FCTL
));

321 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MAC_CFG1
, (
AG7100_MAC_CFG1_RX_EN
 |

322 
AG7100_MAC_CFG1_TX_EN
));

324 
	`ag7100_ªg_rmw_£t
(
mac
, 
AG7100_MAC_CFG2
, (
AG7100_MAC_CFG2_PAD_CRC_EN
 |

325 
AG7100_MAC_CFG2_LEN_CHECK
));

327 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MAC_FIFO_CFG_0
, 0x1f00);

331 
	`¨7100_ªg_wr
(
	`mii_ªg
(
mac
), 
	`mii_if
(mac));

332 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MAC_MII_MGMT_CFG
, 
AG7100_MGMT_CFG_CLK_DIV_20
);

334 #ifde‡
CONFIG_AR7100_EMULATION


335 
	`ag7100_ªg_rmw_£t
(
mac
, 
AG7100_MAC_FIFO_CFG_4
, 0x3ffff);

336 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MAC_FIFO_CFG_1
, 0xfff0000);

337 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MAC_FIFO_CFG_2
, 0x1fff);

339 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MAC_FIFO_CFG_1
, 0xfff0000);

340 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MAC_FIFO_CFG_2
, 0x1fff);

344 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MAC_FIFO_CFG_4
, 0xffff);

345 #ifde‡
CONFIG_AR9100


347 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MAC_FIFO_CFG_5
, 0x7efef);

349 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MAC_FIFO_CFG_5
, 0x7ffef);

353 
t0
 = &
tx
->
rög_desc
[0];

354 
r0
 = &
rx
->
rög_desc
[0];

356 
	`ag7100_ªg_wr
(
mac
, 
AG7100_DMA_TX_DESC
, 
	`ag7100_desc_dma_addr
(
tx
, 
t0
));

357 
	`ag7100_ªg_wr
(
mac
, 
AG7100_DMA_RX_DESC
, 
	`ag7100_desc_dma_addr
(
rx
, 
r0
));

359 
	`¥ötk
(
MODULE_NAME
 ": cfg1 %#x cfg2 %#x\n", 
	`ag7100_ªg_rd
(
mac
, 
AG7100_MAC_CFG1
),

360 
	`ag7100_ªg_rd
(
mac
, 
AG7100_MAC_CFG2
));

361 
	}
}

364 
	$ag7100_hw_°›
(
ag7100_mac_t
 *
mac
)

366 
	`ag7100_rx_°›
(
mac
);

367 
	`ag7100_tx_°›
(
mac
);

368 
	`ag7100_öt_dißbÀ
(
mac
);

372 #i‡
	`deföed
(
CONFIG_DUAL_F1E_PHY
Ë|| deföed(
CONFIG_MACH_AR7100_PB47
)

376 if(
mac
->
mac_unô
 == 1)

378 
	`ag7100_ªg_rmw_£t
(
mac
, 
AG7100_MAC_CFG1
, 
AG7100_MAC_CFG1_SOFT_RST
);

379 
	}
}

388 #ifde‡
CONFIG_AR9100


389 
	#ag7100_∂l_shi·
(
_mac
Ë(((_mac)->
mac_unô
Ë? 22: 20)

	)

390 
	#ag7100_∂l_off£t
(
_mac
) \

391 (((
_mac
)->
mac_unô
Ë? 
AR9100_ETH_INT1_CLK
 : \

392 
AR9100_ETH_INT0_CLK
)

	)

394 
	#ag7100_∂l_shi·
(
_mac
Ë(((_mac)->
mac_unô
Ë? 19: 17)

	)

395 
	#ag7100_∂l_off£t
(
_mac
) \

396 (((
_mac
)->
mac_unô
Ë? 
AR7100_USB_PLL_GE1_OFFSET
 : \

397 
AR7100_USB_PLL_GE0_OFFSET
)

	)

400 
	$ag7100_£t_∂l
(
ag7100_mac_t
 *
mac
, 
∂l
)

402 #ifde‡
CONFIG_AR9100


403 
	#ETH_PLL_CONFIG
 
AR9100_ETH_PLL_CONFIG


	)

405 
	#ETH_PLL_CONFIG
 
AR7100_USB_PLL_CONFIG


	)

407 
uöt32_t
 
shi·
, 
ªg
, 
vÆ
;

409 
shi·
 = 
	`ag7100_∂l_shi·
(
mac
);

410 
ªg
 = 
	`ag7100_∂l_off£t
(
mac
);

412 
vÆ
 = 
	`¨7100_ªg_rd
(
ETH_PLL_CONFIG
);

413 
vÆ
 &~(3 << 
shi·
);

414 
vÆ
 |(2 << 
shi·
);

415 
	`¨7100_ªg_wr
(
ETH_PLL_CONFIG
, 
vÆ
);

416 
	`udñay
(100);

418 
	`¨7100_ªg_wr
(
ªg
, 
∂l
);

420 
vÆ
 |(3 << 
shi·
);

421 
	`¨7100_ªg_wr
(
ETH_PLL_CONFIG
, 
vÆ
);

422 
	`udñay
(100);

424 
vÆ
 &~(3 << 
shi·
);

425 
	`¨7100_ªg_wr
(
ETH_PLL_CONFIG
, 
vÆ
);

426 
	`udñay
(100);

428 
	`¥ötk
(
MODULE_NAME
 ":ÖŒÑeg %#x: %#x ", 
ªg
, 
	`¨7100_ªg_rd
(reg));

429 
	}
}

431 #i‡
deföed
(
CONFIG_AR9100
Ë&& deföed(
CONFIG_AG7100_GE1_RMII
)

442 
	$ag7100_tx_Êush
(
ag7100_mac_t
 *
mac
)

444 
ag7100_rög_t
 *
r
 = &
mac
->
mac_txrög
;

445 
hód
 = 
r
->
rög_√Àm
 , 
èû
 = 0, 
Êushed
 = 0, 
i
;

446 
ag7100_desc_t
 *
ds
;

447 
ag7100_buf„r_t
 *
bf
;

448 
uöt32_t
 
Êags
;

451 
	`¨7100_Êush_ge
(
mac
->
mac_unô
);

453 
Êushed
 !
hód
)

455 
ds
 = &
r
->
rög_desc
[
èû
];

457 
bf
 = &
r
->
rög_buf„r
[
èû
];

458 if(
bf
->
buf_pkt
) {

459 
i
 = 0; i < 
bf
->
buf_nds
; i++)

461 
	`ag7100_öå_ack_tx
(
mac
);

462 
	`ag7100_rög_ö¸
(
èû
);

465 
	`ag7100_buf„r_‰ì
(
bf
->
buf_pkt
);

466 
bf
->
buf_pkt
 = 
NULL
;

469 
	`ag7100_rög_ö¸
(
èû
);

471 
	`ag7100_tx_own
(
ds
);

472 
Êushed
 ++;

474 
r
->
rög_hód
 =Ñ->
rög_èû
 = 0;

477 
	}
}

495 
	$howl_10ba£t_w¨
(
ag7100_mac_t
 *
mac
)

498 
sk_buff
 *
dummy_pkt
;

499 
√t_devi˚
 *
dev
 = 
mac
->
mac_dev
;

500 
ag7100_desc_t
 *
ds
;

501 
ag7100_rög_t
 *
r
;

502 
i
=6;

507 
dummy_pkt
 = 
	`dev_Æloc_skb
(64);

508 
	`skb_put
(
dummy_pkt
, 60);

509 
	`©omic_dec
(&
dummy_pkt
->
u£rs
);

510 --
i
 >= 0) {

511 
dummy_pkt
->
d©a
[
i
] = 0xff;

513 
	`ag7100_gë_deÁu…_maˇddr
(
mac
,(
dummy_pkt
->
d©a
 + 6));

514 
dummy_pkt
->
dev
 = dev;

515 
i
 = 40;

522 
	`ag7100_tx_Êush
(
mac
);

523 
ds
 = 
mac
->
mac_txrög
.
rög_desc
;

524 
r
 = &
mac
->
mac_txrög
;

525 
r
->
rög_√Àm
 = 5;

526 
ds
[
r
->
rög_√Àm
 - 1].
√xt_desc
 = 
	`ag7100_desc_dma_addr
(r, &ds[0]);

527 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MAC_FIFO_CFG_3
, 0x300020);

529 
mac
->
•ìd_10t
 = 1;

530 
i
-- && 
mac
->
•ìd_10t
) {

531 
	`√tif_ˇºõr_⁄
(
dev
);

532 
	`√tif_°¨t_queue
(
dev
);

534 
	`mdñay
(100);

535 
	`ag7100_h¨d_°¨t
(
dummy_pkt
,
dev
);

537 
	`√tif_ˇºõr_off
(
dev
);

538 
	`√tif_°›_queue
(
dev
);

541 
	}
}

557 #ifde‡
CONFIG_ATHRS16_PHY


558 
	gis_£tup_d⁄e
 = 0;

561 
	$ag7100_£t_mac_‰om_lök
(
ag7100_mac_t
 *
mac
, 
ag7100_phy_•ìd_t
 
•ìd
, 
fdx
)

563 #ifde‡
CONFIG_ATHRS26_PHY


564 
ch™ge_Êag
 = 0;

566 if(
mac
->
mac_•ìd
 !
•ìd
)

567 
ch™ge_Êag
 = 1;

569 if(
ch™ge_Êag
)

571 
	`©hrs26_phy_off
(
mac
);

572 
	`©hrs26_mac_•ìd_£t
(
mac
, 
•ìd
);

575 #ifde‡
CONFIG_ATHRS16_PHY


576 if(!
is_£tup_d⁄e
 &&

577 #i‚de‡
CONFIG_PORT0_AS_SWITCH


578 
mac
->
mac_unô
 == 0 &&

580 
mac
->
mac_unô
 == 1 &&

582 (
mac
->
mac_•ìd
 !
•ìd
 || mac->
mac_fdx
 !
fdx
))

585 
	`phy_mode_£tup
();

586 
is_£tup_d⁄e
 = 1;

594 #i‡
	`deföed
(
CONFIG_AR9100
Ë&& deföed(
CONFIG_AG7100_GE1_RMII
)

595 if(
mac
->
•ìd_10t
 && (
•ìd
 !
AG7100_PHY_SPEED_10T
)) {

596 
mac
->
•ìd_10t
 = 0;

597 
	`ag7100_tx_Êush
(
mac
);

598 
	`mdñay
(500);

599 
	`ag7100_dma_ª£t
(
mac
);

603 
mac
->
mac_•ìd
 = 
•ìd
;

604 
mac
->
mac_fdx
 = 
fdx
;

606 
	`ag7100_£t_mii_˘æ_•ìd
(
mac
, 
•ìd
);

607 
	`ag7100_£t_mac_du∂ex
(
mac
, 
fdx
);

608 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MAC_FIFO_CFG_3
, 
fifo_3
);

609 #i‚de‡
CONFIG_AR9100


610 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MAC_FIFO_CFG_5
, 
fifo_5
);

613 
•ìd
)

615 
AG7100_PHY_SPEED_1000T
:

616 #ifde‡
CONFIG_AR9100


617 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MAC_FIFO_CFG_3
, 0x780fff);

619 
	`ag7100_£t_mac_if
(
mac
, 1);

620 #ifde‡
CONFIG_AR9100


621 i‡(
mac
->
mac_unô
 == 0)

623 
	`ag7100_£t_∂l
(
mac
, 
gige_∂l
);

627 #ifde‡
CONFIG_DUAL_F1E_PHY


628 
	`ag7100_£t_∂l
(
mac
, 
gige_∂l
);

630 
	`ag7100_£t_∂l
(
mac
, 
SW_PLL
);

634 
	`ag7100_£t_∂l
(
mac
, 
gige_∂l
);

636 
	`ag7100_ªg_rmw_£t
(
mac
, 
AG7100_MAC_FIFO_CFG_5
, (1 << 19));

639 
AG7100_PHY_SPEED_100TX
:

640 
	`ag7100_£t_mac_if
(
mac
, 0);

641 
	`ag7100_£t_mac_•ìd
(
mac
, 1);

642 #i‚de‡
CONFIG_AR7100_EMULATION


643 #ifde‡
CONFIG_AR9100


644 i‡(
mac
->
mac_unô
 == 0)

646 
	`ag7100_£t_∂l
(
mac
, 0x13000a44);

650 #ifde‡
CONFIG_DUAL_F1E_PHY


651 
	`ag7100_£t_∂l
(
mac
, 0x13000a44);

653 
	`ag7100_£t_∂l
(
mac
, 
SW_PLL
);

657 
	`ag7100_£t_∂l
(
mac
, 0x0001099);

660 
	`ag7100_ªg_rmw_˛ór
(
mac
, 
AG7100_MAC_FIFO_CFG_5
, (1 << 19));

663 
AG7100_PHY_SPEED_10T
:

664 
	`ag7100_£t_mac_if
(
mac
, 0);

665 
	`ag7100_£t_mac_•ìd
(
mac
, 0);

666 #ifde‡
CONFIG_AR9100


667 i‡(
mac
->
mac_unô
 == 0)

669 
	`ag7100_£t_∂l
(
mac
, 0x00441099);

673 #ifde‡
CONFIG_DUAL_F1E_PHY


674 
	`ag7100_£t_∂l
(
mac
, 0x00441099);

676 
	`ag7100_£t_∂l
(
mac
, 
SW_PLL
);

680 
	`ag7100_£t_∂l
(
mac
, 0x00991099);

682 #i‡
	`deföed
(
CONFIG_AR9100
Ë&& deföed(
CONFIG_AG7100_GE1_RMII
)

683 if((
•ìd
 =
AG7100_PHY_SPEED_10T
Ë&& !
mac
->
•ìd_10t
) {

684 
	`howl_10ba£t_w¨
(
mac
);

687 
	`ag7100_ªg_rmw_˛ór
(
mac
, 
AG7100_MAC_FIFO_CFG_5
, (1 << 19));

691 
	`as£π
(0);

694 #ifde‡
CONFIG_ATHRS26_PHY


695 if(
ch™ge_Êag
)

696 
	`©hrs26_phy_⁄
(
mac
);

699 
	`¥ötk
(
MODULE_NAME
 ": cfg_1: %#x\n", 
	`ag7100_ªg_rd
(
mac
, 
AG7100_MAC_FIFO_CFG_1
));

700 
	`¥ötk
(
MODULE_NAME
 ": cfg_2: %#x\n", 
	`ag7100_ªg_rd
(
mac
, 
AG7100_MAC_FIFO_CFG_2
));

701 
	`¥ötk
(
MODULE_NAME
 ": cfg_3: %#x\n", 
	`ag7100_ªg_rd
(
mac
, 
AG7100_MAC_FIFO_CFG_3
));

702 
	`¥ötk
(
MODULE_NAME
 ": cfg_4: %#x\n", 
	`ag7100_ªg_rd
(
mac
, 
AG7100_MAC_FIFO_CFG_4
));

703 
	`¥ötk
(
MODULE_NAME
 ": cfg_5: %#x\n", 
	`ag7100_ªg_rd
(
mac
, 
AG7100_MAC_FIFO_CFG_5
));

704 
	}
}

706 #ifde‡
DMA_DEBUG


707 
	$dump_tx_descs
(
ag7100_mac_t
 *
mac
, 
èû
) {

708 
ag7100_rög_t
 *
r
 = &
mac
->
mac_txrög
;

709 
ag7100_rög_t
 *
¸
 = &
mac
->
mac_txrög_ˇche
;

710 
hód
 = 
r
->
rög_hód
, 
i
 = 
èû
;

711 
ag7100_desc_t
 *
ds
;

712 *
pds
;

714 
èû
 !
hód
)

716 
ds
 = &
r
->
rög_desc
[
èû
];

717 
pds
 = (*)
ds
;

718 
	`¥ötk
(
MODULE_NAME
 ":Åx (%dË-ádd∏0x%x sizê0x%xÇexàadd∏0x%x\n", 
èû
, *
pds
, *(pds+1), *(pds+2));

719 
	`ag7100_rög_ö¸
(
èû
);

721 
	`¥ötk
("XXX 1 XXX\n");

722 
èû
 = 
i
;

723 
i
 = 0;

724 
èû
 !
hód
)

726 
ds
 = &
r
->
rög_desc
[
èû
];

727 
pds
 = (*)
ds
;

728 
	`¥ötk
(
MODULE_NAME
 ":Åx (%dË-ádd∏0x%x sizê0x%xÇexàadd∏0x%x\n", 
èû
, *
pds
, *(pds+1), *(pds+2));

729 
ds
 = &
¸
->
rög_desc
[
èû
];

730 
pds
 = (*)
ds
;

731 
	`¥ötk
(
MODULE_NAME
 ":Åx¯(%dË-ádd∏0x%x sizê0x%xÇexàadd∏0x%x\n", 
èû
, *
pds
, *(pds+1), *(pds+2));

732 
	`ag7100_rög_de¸
(
èû
);

733 
i
++;

734 i‡(
i
 >= 40) ;

736 
	`¥ötk
("XXX 2 XXX\n");

738 
	}
}

740 
	$c›y_txdescs
(
ag7100_mac_t
 *
mac
, 
°¨t
, 
íd
)

742 
ag7100_rög_t
 *
r
 = &
mac
->
mac_txrög
;

743 
ag7100_rög_t
 *
å
 = &
mac
->
mac_txrög_ˇche
;

744 
ag7100_desc_t
 *
tds
, *
fds
;

746 i‡(
íd
 >
r
->
rög_√Àm
)Énd -=Ñ->ring_nelem;

747 
°¨t
 !
íd
)

749 
fds
 = &
r
->
rög_desc
[
°¨t
];

750 
tds
 = &
å
->
rög_desc
[
°¨t
];

751 
	`mem˝y
(
tds
, 
fds
, 8);

752 
	`ag7100_rög_ö¸
(
°¨t
);

754 
	}
}

756 
	$check_f‹_dma_h™g
(
ag7100_mac_t
 *
mac
) {

758 
ag7100_rög_t
 *
r
 = &
mac
->
mac_txrög
;

759 
hód
 = 
r
->
rög_hód
, 
èû
 =Ñ->
rög_èû
;

760 
ag7100_desc_t
 *
ds
;

761 
ag7100_buf„r_t
 *
bp
;

763 
	`¨7100_Êush_ge
(
mac
->
mac_unô
);

765 
èû
 !
hód
)

767 
ds
 = &
r
->
rög_desc
[
èû
];

768 
bp
 = &
r
->
rög_buf„r
[
èû
];

770 if(
	`ag7100_tx_ow√d_by_dma
(
ds
)) {

771 i‡((
jiffõs
 - 
bp
->
å™s_°¨t
Ë> ((1 * 
HZ
/10))) {

772 
	`¥ötk
(
MODULE_NAME
 ": Tx Dma status : %s\n",

773 
	`ag7100_tx_°›≥d
(
mac
) ? "inactive" : "active");

775 
	`¥ötk
(
MODULE_NAME
 ":Åime°amp:%u jiffõs:%u diff:%d\n",
bp
->
å™s_°¨t
,
jiffõs
,

776 (
jiffõs
 - 
bp
->
å™s_°¨t
));

778 
	`¥ötk
(
MODULE_NAME
 ": hód %dÅaû %d\n",
hód
, 
èû
);

779 
	`¥ötk
(
MODULE_NAME
 ":Åx sètu†0x%xÅx des¯0x%x\n", 
	`ag7100_ªg_rd
(
mac
, 
AG7100_DMA_TX_STATUS
),

780 
	`ag7100_ªg_rd
(
mac
, 
AG7100_DMA_TX_DESC
));

781 
	`dump_tx_descs
(
mac
, 
èû
);

783 
	`ag7100_ªg_wr
(
mac
, 
AG7100_DMA_TX_DESC
, 
	`ag7100_desc_dma_addr
(
r
, 
ds
));

784 
	`¥ötk
(
MODULE_NAME
 ":Åx sètu†0x%xÅx des¯0x%x\n", 
	`ag7100_ªg_rd
(
mac
, 
AG7100_DMA_TX_STATUS
),

785 
	`ag7100_ªg_rd
(
mac
, 
AG7100_DMA_TX_DESC
));

786 
	`ag7100_öå_ack_txu∫
(
mac
);

787 
	`ag7100_tx_°¨t
(
mac
);

791 
	`ag7100_rög_ö¸
(
èû
);

793 
	`mod_timî
(&
mac
->
mac_dbg_timî
, 
jiffõs
 + 
AG7100_PHY_POLL_SECONDS
*
HZ
);

795 
	}
}

802 
	$ag7100_check_lök
(
ag7100_mac_t
 *
mac
)

804 
√t_devi˚
 *
dev
 = 
mac
->
mac_dev
;

805 
ˇºõr
 = 
	`√tif_ˇºõr_ok
(
dev
), 
fdx
, 
phy_up
;

806 
ag7100_phy_•ìd_t
 
•ìd
;

807 
rc
;

821 if(
	`mii_if
(
mac
) > 3)

822 
d⁄e
;

824 
rc
 = 
	`ag7100_gë_lök_°©us
(
mac
->
mac_unô
, &
phy_up
, &
fdx
, &
•ìd
);

825 i‡(
rc
 < 0)

826 
d⁄e
;

828 i‡(!
phy_up
)

830 i‡(
ˇºõr
)

832 
	`¥ötk
(
MODULE_NAME
 ": unô %d:ÖhyÇŸ u∞ˇºõ∏%d\n", 
mac
->
mac_unô
, 
ˇºõr
);

833 
	`√tif_ˇºõr_off
(
dev
);

834 
	`√tif_°›_queue
(
dev
);

836 
d⁄e
;

844 i‡((
fdx
 < 0Ë|| (
•ìd
 < 0))

846 
	`¥ötk
(
MODULE_NAME
 ":ÖhyÇot connected?\n");

850 i‡(
ˇºõr
 && (
•ìd
 =
mac
->
mac_•ìd
Ë&& (
fdx
 =mac->
mac_fdx
))

851 
d⁄e
;

853 
	`¥ötk
(
MODULE_NAME
 ": unô %dÖhy i†up...", 
mac
->
mac_unô
);

854 
	`¥ötk
("%†%†%s\n", 
mii_°r
[
mac
->
mac_unô
][
	`mii_if
(mac)],

855 
•d_°r
[
•ìd
], 
dup_°r
[
fdx
]);

857 
	`ag7100_£t_mac_‰om_lök
(
mac
, 
•ìd
, 
fdx
);

859 
	`¥ötk
(
MODULE_NAME
 ": done cfg2 %#x ifctl %#x miictrl %#x \n",

860 
	`ag7100_ªg_rd
(
mac
, 
AG7100_MAC_CFG2
),

861 
	`ag7100_ªg_rd
(
mac
, 
AG7100_MAC_IFCTL
),

862 
	`¨7100_ªg_rd
(
	`mii_ªg
(
mac
)));

866 
	`√tif_ˇºõr_⁄
(
dev
);

867 
	`√tif_°¨t_queue
(
dev
);

869 
d⁄e
:

870 
	`mod_timî
(&
mac
->
mac_phy_timî
, 
jiffõs
 + 
AG7100_PHY_POLL_SECONDS
*
HZ
);

873 
	}
}

876 
	$ag7100_choo£_phy
(
uöt32_t
 
phy_addr
)

878 #ifde‡
CONFIG_AR7100_EMULATION


879 i‡(
phy_addr
 == 0x10)

881 
	`¨7100_ªg_rmw_£t
(
AR7100_MII0_CTRL
, (1 << 6));

885 
	`¨7100_ªg_rmw_˛ór
(
AR7100_MII0_CTRL
, (1 << 6));

888 
	}
}

890 
uöt16_t


891 
	$ag7100_mii_ªad
(
unô
, 
uöt32_t
 
phy_addr
, 
uöt8_t
 
ªg
)

893 
ag7100_mac_t
 *
mac
 = 
	`ag7100_unô2mac
(0);

894 
uöt16_t
 
addr
 = (
phy_addr
 << 
AG7100_ADDR_SHIFT
Ë| 
ªg
, 
vÆ
;

895 vﬁ©ûê
rdd©a
;

896 
uöt16_t
 
ii
 = 0x1000;

898 
	`ag7100_choo£_phy
(
phy_addr
);

900 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MII_MGMT_CMD
, 0x0);

901 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MII_MGMT_ADDRESS
, 
addr
);

902 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MII_MGMT_CMD
, 
AG7100_MGMT_CMD_READ
);

906 
	`udñay
(5);

907 
rdd©a
 = 
	`ag7100_ªg_rd
(
mac
, 
AG7100_MII_MGMT_IND
) & 0x1;

908 }
rdd©a
 && --
ii
);

910 
vÆ
 = 
	`ag7100_ªg_rd
(
mac
, 
AG7100_MII_MGMT_STATUS
);

911 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MII_MGMT_CMD
, 0x0);

913  
vÆ
;

914 
	}
}

917 
	$ag7100_mii_wrôe
(
unô
, 
uöt32_t
 
phy_addr
, 
uöt8_t
 
ªg
, 
uöt16_t
 
d©a
)

919 
ag7100_mac_t
 *
mac
 = 
	`ag7100_unô2mac
(0);

920 
uöt16_t
 
addr
 = (
phy_addr
 << 
AG7100_ADDR_SHIFT
Ë| 
ªg
;

921 vﬁ©ûê
rdd©a
;

922 
uöt16_t
 
ii
 = 0x1000;

924 
	`ag7100_choo£_phy
(
phy_addr
);

926 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MII_MGMT_ADDRESS
, 
addr
);

927 
	`ag7100_ªg_wr
(
mac
, 
AG7100_MII_MGMT_CTRL
, 
d©a
);

931 
rdd©a
 = 
	`ag7100_ªg_rd
(
mac
, 
AG7100_MII_MGMT_IND
) & 0x1;

932 }
rdd©a
 && --
ii
);

933 
	}
}

951 
	$ag7100_h™dÀ_tx_fuŒ
(
ag7100_mac_t
 *
mac
)

953 
u32
 
Êags
;

954 #i‡
	`deföed
(
CONFIG_AR9100
Ë&& deföed(
CONFIG_AG7100_GE1_RMII
)

955 if(!
mac
->
•ìd_10t
)

957 
	`as£π
(!
	`√tif_queue_°›≥d
(
mac
->
mac_dev
));

959 
mac
->
mac_√t_°©s
.
tx_fifo_îr‹s
 ++;

961 
	`√tif_°›_queue
(
mac
->
mac_dev
);

963 
	`•ö_lock_úqßve
(&
mac
->
mac_lock
, 
Êags
);

964 
	`ag7100_öå_íabÀ_tx
(
mac
);

965 
	`•ö_u∆ock_úqª°‹e
(&
mac
->
mac_lock
, 
Êags
);

966 
	}
}

975 
ag7100_desc_t
 *

976 
	$ag7100_gë_tx_ds
(
ag7100_mac_t
 *
mac
, *
Àn
, **
°¨t
)

978 
ag7100_desc_t
 *
ds
;

979 
Àn_this_ds
;

980 
ag7100_rög_t
 *
r
 = &
mac
->
mac_txrög
;

981 #ifde‡
DMA_DEBUG


982 
ag7100_buf„r_t
 *
bp
;

986 i‡(*
Àn
 > 
tx_Àn_≥r_ds
)

987 i‡(*
Àn
 <(
tx_Àn_≥r_ds
 + 4))

988 
Àn_this_ds
 = 
tx_Àn_≥r_ds
 - 4;

990 
Àn_this_ds
 = 
tx_Àn_≥r_ds
;

992 
Àn_this_ds
 = *
Àn
;

994 
ds
 = &
r
->
rög_desc
[r->
rög_hód
];

996 
	`ag7100_åc_√w
(
ds
,"dsáddr");

997 
	`ag7100_åc_√w
(
ds
,"dsÜen");

998 #ifde‡
CONFIG_AR9100


999 if(
	`ag7100_tx_ow√d_by_dma
(
ds
))

1000 
	`ag7100_dma_ª£t
(
mac
);

1002 
	`as£π
(!
	`ag7100_tx_ow√d_by_dma
(
ds
));

1005 
ds
->
pkt_size
 = 
Àn_this_ds
;

1006 
ds
->
pkt_°¨t_addr
 = 
	`vút_to_phys
(*
°¨t
);

1007 
ds
->
m‹e
 = 1;

1009 *
Àn
 -
Àn_this_ds
;

1010 *
°¨t
 +
Àn_this_ds
;

1012 #ifde‡
DMA_DEBUG


1013 
bp
 = &
r
->
rög_buf„r
[r->
rög_hód
];

1014 
bp
->
å™s_°¨t
 = 
jiffõs
;

1017 
	`ag7100_rög_ö¸
(
r
->
rög_hód
);

1019  
ds
;

1020 
	}
}

1022 #i‡
deföed
(
CONFIG_ATHRS26_PHY
)

1027 
	$ag7100_h¨d_°¨t
(
sk_buff
 *
skb
, 
√t_devi˚
 *
dev
)

1029 
ag7100_mac_t
 *
mac
 = (ag7100_mac_à*)
dev
->
¥iv
;

1030 
ag7100_rög_t
 *
r
 = &
mac
->
mac_txrög
;

1031 
ag7100_buf„r_t
 *
bp
;

1032 
ag7100_desc_t
 *
ds
, *
fds
;

1033 *
°¨t
;

1034 
Àn
;

1035 
nds_this_pkt
;

1037 #ifde‡
VSC73XX_DEBUG


1039 
vsc73xx_dbg
;

1040 i‡(
vsc73xx_dbg
 == 0) {

1041 
	`vsc73xx_gë_lök_°©us_dbg
();

1042 
vsc73xx_dbg
 = 1;

1044 
vsc73xx_dbg
 = (vsc73xx_dbg + 1) % 10;

1048 #i‡
	`deföed
(
CONFIG_ATHRS26_PHY
Ë&& deföed(
HEADER_EN
)

1051 i‡((
mac
->
mac_unô
 =0Ë&& (!((
skb
->
cb
[0] == 0x7f) && (skb->cb[1] == 0x5d))))

1053 
	`skb_push
(
skb
, 
HEADER_LEN
);

1054 
skb
->
d©a
[0] = 0x10;

1055 
skb
->
d©a
[1] = 0x80;

1058 #i‡
	`deföed
(
CONFIG_VLAN_8021Q
Ë|| deföed(
CONFIG_VLAN_8021Q_MODULE
)

1059 if(
	`u∆ikñy
((
skb
->
Àn
 <= 0)

1060 || (
skb
->
Àn
 > (
dev
->
mtu
 + 
ETH_HLEN
 + 
HEADER_LEN
 + 4))))

1062 
	`¥ötk
(
MODULE_NAME
 ": [%d] bad skb, dev->mtu=%d,ETH_HLEN=%dÜí %d\n", 
mac
->
mac_unô
, 
dev
->
mtu
, 
ETH_HLEN
, 
skb
->
Àn
);

1063 
dr›ô
;

1066 if(
	`u∆ikñy
((
skb
->
Àn
 <= 0)

1067 || (
skb
->
Àn
 > (
dev
->
mtu
 + 
ETH_HLEN
 + 
HEADER_LEN
))))

1069 
	`¥ötk
(
MODULE_NAME
 ": [%d] bad skb, dev->mtu=%d,ETH_HLEN=%dÜí %d\n", 
mac
->
mac_unô
, 
dev
->
mtu
, 
ETH_HLEN
, 
skb
->
Àn
);

1070 
dr›ô
;

1075 #i‡
	`deföed
(
CONFIG_VLAN_8021Q
Ë|| deföed(
CONFIG_VLAN_8021Q_MODULE
)

1076 if(
	`u∆ikñy
((
skb
->
Àn
 <0Ë|| (skb->À¿> (
dev
->
mtu
 + 
ETH_HLEN
 + 4))))

1078 
	`¥ötk
(
MODULE_NAME
 ": bad skb,Üí %d\n", 
skb
->
Àn
);

1079 
dr›ô
;

1082 if(
	`u∆ikñy
((
skb
->
Àn
 <0Ë|| (skb->À¿> (
dev
->
mtu
 + 
ETH_HLEN
))))

1084 
	`¥ötk
(
MODULE_NAME
 ": bad skb,Üí %d\n", 
skb
->
Àn
);

1085 
dr›ô
;

1090 i‡(
	`ag7100_tx_ª≠_thªsh
(
mac
))

1091 
	`ag7100_tx_ª≠
(
mac
);

1093 
	`ag7100_åc_√w
(
r
->
rög_hód
,"hard-stop hd");

1094 
	`ag7100_åc_√w
(
r
->
rög_èû
,"hard-stopÅl");

1096 
	`ag7100_åc_√w
(
skb
->
Àn
, "lenÅhisÖkt");

1097 
	`ag7100_åc_√w
(
skb
->
d©a
, "ptr 2Ökt");

1099 
	`dma_ˇche_wback
(()
skb
->
d©a
, skb->
Àn
);

1101 
bp
 = &
r
->
rög_buf„r
[r->
rög_hód
];

1102 
bp
->
buf_pkt
 = 
skb
;

1103 
Àn
 = 
skb
->len;

1104 
°¨t
 = 
skb
->
d©a
;

1106 
	`as£π
(
Àn
>4);

1108 
nds_this_pkt
 = 1;

1109 
fds
 = 
ds
 = 
	`ag7100_gë_tx_ds
(
mac
, &
Àn
, &
°¨t
);

1111 
Àn
>0)

1113 
ds
 = 
	`ag7100_gë_tx_ds
(
mac
, &
Àn
, &
°¨t
);

1114 
nds_this_pkt
++;

1115 
	`ag7100_tx_give_to_dma
(
ds
);

1118 
ds
->
m‹e
 = 0;

1119 
	`ag7100_tx_give_to_dma
(
fds
);

1121 
bp
->
buf_œ°ds
 = 
ds
;

1122 
bp
->
buf_nds
 = 
nds_this_pkt
;

1124 #ifde‡
DMA_DEBUG


1125 
	`c›y_txdescs
(
mac
, ()(()
fds
 - ()
r
->
rög_desc
)/(
ag7100_desc_t
), ()(()
ds
 -

1126 ()
r
->
rög_desc
)/(
ag7100_desc_t
)+1);

1129 
	`ag7100_åc_√w
(
ds
,"last ds");

1130 
	`ag7100_åc_√w
(
nds_this_pkt
,"nmbr ds forÅhisÖkt");

1132 
	`wmb
();

1134 
mac
->
√t_tx_∑ckës
 ++;

1135 
mac
->
√t_tx_byãs
 +
skb
->
Àn
;

1137 
	`ag7100_åc
(
	`ag7100_ªg_rd
(
mac
, 
AG7100_DMA_TX_CTRL
),"dma idle");

1139 
	`ag7100_tx_°¨t
(
mac
);

1141 i‡(
	`u∆ikñy
(
	`ag7100_tx_rög_fuŒ
(
mac
)))

1142 
	`ag7100_h™dÀ_tx_fuŒ
(
mac
);

1144 
dev
->
å™s_°¨t
 = 
jiffõs
;

1146  
NETDEV_TX_OK
;

1148 
dr›ô
:

1149 
	`¥ötk
(
MODULE_NAME
 ": dr›pög skb %08x\n", 
skb
);

1150 
	`k‰ì_skb
(
skb
);

1151  
NETDEV_TX_OK
;

1152 
	}
}

1185 
úqªtu∫_t


1186 
	$ag7100_öå
(
˝l
, *
dev_id
, 
±_ªgs
 *
ªgs
)

1188 
√t_devi˚
 *
dev
 = (√t_devi˚ *)
dev_id
;

1189 
ag7100_mac_t
 *
mac
 = (ag7100_mac_à*)
dev
->
¥iv
;

1190 
i§
, 
imr
, 
h™dÀd
 = 0;

1192 
i§
 = 
	`ag7100_gë_i§
(
mac
);

1193 
imr
 = 
	`ag7100_ªg_rd
(
mac
, 
AG7100_DMA_INTR_MASK
);

1195 
	`ag7100_åc
(
i§
,"isr");

1196 
	`ag7100_åc
(
imr
,"imr");

1198 
	`as£π
(
i§
 =(i§ & 
imr
));

1200 i‡(
	`likñy
(
i§
 & (
AG7100_INTR_RX
 | 
AG7100_INTR_RX_OVF
)))

1202 
h™dÀd
 = 1;

1203 i‡(
	`likñy
(
	`√tif_rx_scheduÀ_¥ï
(
dev
)))

1205 
	`ag7100_öå_dißbÀ_ªcv
(
mac
);

1206 
	`__√tif_rx_scheduÀ
(
dev
);

1210 
	`¥ötk
(
MODULE_NAME
 ": driver bug! interrupt while inÖoll\n");

1211 
	`as£π
(0);

1212 
	`ag7100_öå_dißbÀ_ªcv
(
mac
);

1216 i‡(
	`likñy
(
i§
 & 
AG7100_INTR_TX
))

1218 
h™dÀd
 = 1;

1219 
	`ag7100_öå_ack_tx
(
mac
);

1220 
	`ag7100_tx_ª≠
(
mac
);

1222 i‡(
	`u∆ikñy
(
i§
 & 
AG7100_INTR_RX_BUS_ERROR
))

1224 
	`as£π
(0);

1225 
h™dÀd
 = 1;

1226 
	`ag7100_öå_ack_rxbe
(
mac
);

1228 i‡(
	`u∆ikñy
(
i§
 & 
AG7100_INTR_TX_BUS_ERROR
))

1230 
	`as£π
(0);

1231 
h™dÀd
 = 1;

1232 
	`ag7100_öå_ack_txbe
(
mac
);

1235 i‡(!
h™dÀd
)

1237 
	`as£π
(0);

1238 
	`¥ötk
(
MODULE_NAME
 ": unh™dÀd i¡∏i§ %#x\n", 
i§
);

1241  
IRQ_HANDLED
;

1242 
	}
}

1251 #ifde‡
CONFIG_AR9100


1253 
	$ag7100_dma_ª£t
(
ag7100_mac_t
 *
mac
)

1255 
uöt32_t
 
mask
;

1257 if(
mac
->
mac_unô
)

1258 
mask
 = 
AR7100_RESET_GE1_MAC
;

1260 
mask
 = 
AR7100_RESET_GE0_MAC
;

1262 
	`¨7100_ªg_rmw_£t
(
AR7100_RESET
, 
mask
);

1263 
	`mdñay
(100);

1264 
	`¨7100_ªg_rmw_˛ór
(
AR7100_RESET
, 
mask
);

1265 
	`mdñay
(100);

1267 
	`ag7100_öå_dißbÀ_ªcv
(
mac
);

1268 #i‡
	`deföed
(
CONFIG_AR9100
Ë&& deföed(
CONFIG_AG7100_GE1_RMII
)

1269 
mac
->
•ìd_10t
 = 0;

1271 
	`scheduÀ_w‹k
(&
mac
->
mac_tx_timeout
);

1272 
	}
}

1277 
	$ag7100_pﬁl
(
√t_devi˚
 *
dev
, *
budgë
)

1279 
ag7100_mac_t
 *
mac
 = (ag7100_mac_à*)
dev
->
¥iv
;

1280 
w‹k_d⁄e
, 
max_w‹k
 = 
	`mö
(*
budgë
, 
dev
->
quŸa
), 
°©us
 = 0;

1281 
ag7100_rx_°©us_t
 
ªt
;

1282 
u32
 
Êags
;

1284 
ªt
 = 
	`ag7100_ªcv_∑ckës
(
dev
, 
mac
, 
max_w‹k
, &
w‹k_d⁄e
);

1286 
dev
->
quŸa
 -
w‹k_d⁄e
;

1287 *
budgë
 -
w‹k_d⁄e
;

1289 #ifde‡
CONFIG_AR9100


1290 if(
ªt
 =
AG7100_RX_DMA_HANG
)

1292 
°©us
 = 0;

1293 
	`√tif_rx_com∂ëe
(
dev
);

1294 
	`ag7100_dma_ª£t
(
mac
);

1295  
°©us
;

1298 i‡(
	`likñy
(
ªt
 =
AG7100_RX_STATUS_DONE
))

1300 
	`√tif_rx_com∂ëe
(
dev
);

1301 
	`•ö_lock_úqßve
(&
mac
->
mac_lock
, 
Êags
);

1302 
	`ag7100_öå_íabÀ_ªcv
(
mac
);

1303 
	`•ö_u∆ock_úqª°‹e
(&
mac
->
mac_lock
, 
Êags
);

1305 i‡(
	`likñy
(
ªt
 =
AG7100_RX_STATUS_NOT_DONE
))

1310 
°©us
 = 1;

1312 i‡(
ªt
 =
AG7100_RX_STATUS_OOM
)

1314 
	`¥ötk
(
MODULE_NAME
 ": oom..?\n");

1318 
	`mod_timî
(&
mac
->
mac_oom_timî
, 
jiffõs
+1);

1319 
	`√tif_rx_com∂ëe
(
dev
);

1322  
°©us
;

1323 
	}
}

1326 
	$ag7100_ªcv_∑ckës
(
√t_devi˚
 *
dev
, 
ag7100_mac_t
 *
mac
,

1327 
quŸa
, *
w‹k_d⁄e
)

1329 
ag7100_rög_t
 *
r
 = &
mac
->
mac_rxrög
;

1330 
ag7100_desc_t
 *
ds
;

1331 
ag7100_buf„r_t
 *
bp
;

1332 
sk_buff
 *
skb
;

1333 
ag7100_rx_°©us_t
 
ªt
 = 
AG7100_RX_STATUS_DONE
;

1334 
hód
 = 
r
->
rög_hód
, 
Àn
, 
°©us
, 
iquŸa
 = 
quŸa
, 
m‹e_pkts
, 
ªp
;

1336 
	`ag7100_åc
(
iquŸa
,"iquota");

1337 #i‡!
	`deföed
(
CONFIG_AR9100
)

1338 
°©us
 = 
	`ag7100_ªg_rd
(
mac
, 
AG7100_DMA_RX_STATUS
);

1341 
¥o˚ss_pkts
:

1342 
	`ag7100_åc
(
°©us
,"status");

1343 #i‡!
	`deföed
(
CONFIG_AR9100
)

1369 
	`as£π
((
°©us
 & 
AG7100_RX_STATUS_PKT_RCVD
));

1370 
	`as£π
((
°©us
 >> 16));

1375 
	`¨7100_Êush_ge
(
mac
->
mac_unô
);

1377 
	`as£π
(
quŸa
 > 0);

1379 
quŸa
)

1381 
ds
 = &
r
->
rög_desc
[
hód
];

1383 
	`ag7100_åc
(
hód
,"hd");

1384 
	`ag7100_åc
(
ds
, "ds");

1386 i‡(
	`ag7100_rx_ow√d_by_dma
(
ds
))

1388 #ifde‡
CONFIG_AR9100


1389 if(
quŸa
 =
iquŸa
)

1391 *
w‹k_d⁄e
 = 
quŸa
 = 0;

1392  
AG7100_RX_DMA_HANG
;

1395 
	`as£π
(
quŸa
 !
iquŸa
);

1399 
	`ag7100_öå_ack_rx
(
mac
);

1401 
bp
 = &
r
->
rög_buf„r
[
hód
];

1402 
Àn
 = 
ds
->
pkt_size
;

1403 
skb
 = 
bp
->
buf_pkt
;

1404 
	`as£π
(
skb
);

1405 
	`skb_put
(
skb
, 
Àn
 - 
ETHERNET_FCS_SIZE
);

1407 #i‡
	`deföed
(
CONFIG_ATHRS26_PHY
Ë&& deföed(
HEADER_EN
)

1408 
uöt8_t
 
ty≥
;

1409 
uöt16_t
 
def_vid
;

1411 if(
mac
->
mac_unô
 == 0)

1413 
ty≥
 = (
skb
->
d©a
[1]) & 0xf;

1415 i‡(
ty≥
 =
NORMAL_PACKET
)

1417 #i‡
	`deföed
(
CONFIG_VLAN_8021Q
Ë|| deföed(
CONFIG_VLAN_8021Q_MODULE
)

1419 i‡(
	`is_˝u_egªss_ègged
())

1421 i‡((
skb
->
d©a
[12 + 
HEADER_LEN
] != 0x81) || (skb->data[13 + HEADER_LEN] != 0x00))

1423 
def_vid
 = 
	`©hrs26_defvid_gë
(
skb
->
d©a
[0] & 0xf);

1424 
	`skb_push
(
skb
, 2);

1425 
	`memmove
(&
skb
->
d©a
[0], &skb->data[4], 12);

1427 
skb
->
d©a
[12] = 0x81;

1428 
skb
->
d©a
[13] = 0x00;

1429 
skb
->
d©a
[14] = (
def_vid
 >> 8) & 0xf;

1430 
skb
->
d©a
[15] = 
def_vid
 & 0xff;

1435 
	`skb_puŒ
(
skb
, 2);

1437 
mac
->
√t_rx_∑ckës
 ++;

1438 
mac
->
√t_rx_byãs
 +
skb
->
Àn
;

1442 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
dev
);

1443 
skb
->
dev
 = dev;

1444 
bp
->
buf_pkt
 = 
NULL
;

1445 
dev
->
œ°_rx
 = 
jiffõs
;

1446 
quŸa
--;

1448 
	`√tif_ª˚ive_skb
(
skb
);

1452 
mac
->
√t_rx_∑ckës
 ++;

1453 
mac
->
√t_rx_byãs
 +
skb
->
Àn
;

1454 
bp
->
buf_pkt
 = 
NULL
;

1455 
dev
->
œ°_rx
 = 
jiffõs
;

1456 
quŸa
--;

1458 i‡(
ty≥
 =
READ_WRITE_REG_ACK
)

1460 
	`hódî_ª˚ive_skb
(
skb
);

1464 
	`k‰ì_skb
(
skb
);

1469 
mac
->
√t_rx_∑ckës
 ++;

1470 
mac
->
√t_rx_byãs
 +
skb
->
Àn
;

1474 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
dev
);

1475 
skb
->
dev
 = dev;

1476 
bp
->
buf_pkt
 = 
NULL
;

1477 
dev
->
œ°_rx
 = 
jiffõs
;

1478 
quŸa
--;

1480 
	`√tif_ª˚ive_skb
(
skb
);

1484 
mac
->
√t_rx_∑ckës
 ++;

1485 
mac
->
√t_rx_byãs
 +
skb
->
Àn
;

1489 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, 
dev
);

1490 
skb
->
dev
 = dev;

1491 
bp
->
buf_pkt
 = 
NULL
;

1492 
dev
->
œ°_rx
 = 
jiffõs
;

1494 
quŸa
--;

1496 
	`√tif_ª˚ive_skb
(
skb
);

1499 
	`ag7100_rög_ö¸
(
hód
);

1502 
	`as£π
(
iquŸa
 !
quŸa
);

1503 
r
->
rög_hód
 = 
hód
;

1505 
ªp
 = 
	`ag7100_rx_ª∂íish
(
mac
);

1506 #ifde‡
CONFIG_AR9100


1507 if(
ªp
 < 0)

1509 *
w‹k_d⁄e
 =0 ;

1510  
AG7100_RX_DMA_HANG
;

1517 
°©us
 = 
	`ag7100_ªg_rd
(
mac
, 
AG7100_DMA_RX_STATUS
);

1518 
m‹e_pkts
 = (
°©us
 & 
AG7100_RX_STATUS_PKT_RCVD
);

1520 
	`ag7100_åc
(
m‹e_pkts
,"more_pkts");

1522 i‡(!
m‹e_pkts
Ë
d⁄e
;

1526 i‡(
quŸa
Ë
¥o˚ss_pkts
;

1530 
ªt
 = 
AG7100_RX_STATUS_NOT_DONE
;

1532 
d⁄e
:

1533 *
w‹k_d⁄e
 = (
iquŸa
 - 
quŸa
);

1535 i‡(
	`u∆ikñy
(
	`ag7100_rx_rög_fuŒ
(
mac
)))

1536  
AG7100_RX_STATUS_OOM
;

1541 i‡(
	`u∆ikñy
(
°©us
 & 
AG7100_RX_STATUS_OVF
))

1543 
mac
->
√t_rx_ovî_îr‹s
 ++;

1544 
	`ag7100_öå_ack_rxovf
(
mac
);

1545 
	`ag7100_rx_°¨t
(
mac
);

1548  
ªt
;

1549 
	}
}

1551 
sk_buff
 *

1552 
	$ag7100_buf„r_Æloc
()

1554 
sk_buff
 *
skb
;

1556 
skb
 = 
	`dev_Æloc_skb
(
AG7100_RX_BUF_SIZE
);

1557 i‡(
	`u∆ikñy
(!
skb
))

1558  
NULL
;

1559 
	`skb_ª£rve
(
skb
, 
AG7100_RX_RESERVE
);

1561  
skb
;

1562 
	}
}

1565 
	$ag7100_buf„r_‰ì
(
sk_buff
 *
skb
)

1567 i‡(
	`ö_úq
())

1568 
	`dev_k‰ì_skb_úq
(
skb
);

1570 
	`dev_k‰ì_skb
(
skb
);

1571 
	}
}

1578 
	$ag7100_rx_ª∂íish
(
ag7100_mac_t
 *
mac
)

1580 
ag7100_rög_t
 *
r
 = &
mac
->
mac_rxrög
;

1581 
hód
 = 
r
->
rög_hód
, 
èû
 =Ñ->
rög_èû
, 
ªfûÀd
 = 0;

1582 
ag7100_desc_t
 *
ds
;

1583 
ag7100_buf„r_t
 *
bf
;

1585 
	`ag7100_åc
(
hód
,"hd");

1586 
	`ag7100_åc
(
èû
,"tl");

1590 
bf
 = &
r
->
rög_buf„r
[
èû
];

1591 
ds
 = &
r
->
rög_desc
[
èû
];

1593 
	`ag7100_åc
(
ds
,"ds");

1594 #ifde‡
CONFIG_AR9100


1595 if(
	`ag7100_rx_ow√d_by_dma
(
ds
))

1600 
	`as£π
(!
	`ag7100_rx_ow√d_by_dma
(
ds
));

1602 
	`as£π
(!
bf
->
buf_pkt
);

1604 
bf
->
buf_pkt
 = 
	`ag7100_buf„r_Æloc
();

1605 i‡(!
bf
->
buf_pkt
)

1607 
	`¥ötk
(
MODULE_NAME
 ": outta skbs!\n");

1610 
	`dma_ˇche_öv
(()
bf
->
buf_pkt
->
d©a
, 
AG7100_RX_BUF_SIZE
);

1611 
ds
->
pkt_°¨t_addr
 = 
	`vút_to_phys
(
bf
->
buf_pkt
->
d©a
);

1613 
	`ag7100_rx_give_to_dma
(
ds
);

1614 
ªfûÀd
 ++;

1616 
	`ag7100_rög_ö¸
(
èû
);

1618 } 
èû
 !
hód
);

1622 
	`wmb
();

1624 
r
->
rög_èû
 = 
èû
;

1625 
	`ag7100_åc
(
ªfûÀd
,"refilled");

1627  
ªfûÀd
;

1628 
	}
}

1634 
	$ag7100_tx_ª≠
(
ag7100_mac_t
 *
mac
)

1636 
ag7100_rög_t
 *
r
 = &
mac
->
mac_txrög
;

1637 
hód
 = 
r
->
rög_hód
, 
èû
 =Ñ->
rög_èû
, 
ª≠ed
 = 0, 
i
;

1638 
ag7100_desc_t
 *
ds
;

1639 
ag7100_buf„r_t
 *
bf
;

1640 
uöt32_t
 
Êags
;

1642 
	`ag7100_åc_√w
(
hód
,"hd");

1643 
	`ag7100_åc_√w
(
èû
,"tl");

1645 
	`¨7100_Êush_ge
(
mac
->
mac_unô
);

1647 
	`•ö_lock_úqßve
(&
mac
->
mac_lock
, 
Êags
);

1648 
èû
 !
hód
)

1650 
ds
 = &
r
->
rög_desc
[
èû
];

1652 
	`ag7100_åc_√w
(
ds
,"ds");

1654 if(
	`ag7100_tx_ow√d_by_dma
(
ds
))

1657 
bf
 = &
r
->
rög_buf„r
[
èû
];

1658 
	`as£π
(
bf
->
buf_pkt
);

1660 
	`ag7100_åc_√w
(
bf
->
buf_œ°ds
,"lastds");

1662 if(
	`ag7100_tx_ow√d_by_dma
(
bf
->
buf_œ°ds
))

1665 
i
 = 0; i < 
bf
->
buf_nds
; i++)

1667 
	`ag7100_öå_ack_tx
(
mac
);

1668 
	`ag7100_rög_ö¸
(
èû
);

1671 
	`ag7100_buf„r_‰ì
(
bf
->
buf_pkt
);

1672 
bf
->
buf_pkt
 = 
NULL
;

1674 
ª≠ed
 ++;

1677 
r
->
rög_èû
 = 
èû
;

1678 
	`•ö_u∆ock_úqª°‹e
(&
mac
->
mac_lock
, 
Êags
);

1680 i‡(
	`√tif_queue_°›≥d
(
mac
->
mac_dev
) &&

1681 (
	`ag7100_ndesc_unu£d
(
mac
, 
r
Ë>
AG7100_TX_QSTART_THRESH
) &&

1682 
	`√tif_ˇºõr_ok
(
mac
->
mac_dev
))

1684 i‡(
	`ag7100_ªg_rd
(
mac
, 
AG7100_DMA_INTR_MASK
Ë& 
AG7100_INTR_TX
)

1686 
	`•ö_lock_úqßve
(&
mac
->
mac_lock
, 
Êags
);

1687 
	`ag7100_öå_dißbÀ_tx
(
mac
);

1688 
	`•ö_u∆ock_úqª°‹e
(&
mac
->
mac_lock
, 
Êags
);

1690 
	`√tif_wake_queue
(
mac
->
mac_dev
);

1693  
ª≠ed
;

1694 
	}
}

1700 
	$ag7100_tx_Æloc
(
ag7100_mac_t
 *
mac
)

1702 
ag7100_rög_t
 *
r
 = &
mac
->
mac_txrög
;

1703 
ag7100_desc_t
 *
ds
;

1704 
i
, 
√xt
;

1706 i‡(
	`ag7100_rög_Æloc
(
r
, 
AG7100_TX_DESC_CNT
))

1709 
	`ag7100_åc
(
r
->
rög_desc
,"ring_desc");

1711 
ds
 = 
r
->
rög_desc
;

1712 
i
 = 0; i < 
r
->
rög_√Àm
; i++ )

1714 
	`ag7100_åc_√w
(
ds
,"txálloc ds");

1715 
√xt
 = (
i
 =(
r
->
rög_√Àm
 - 1)) ? 0 : (i + 1);

1716 
ds
[
i
].
√xt_desc
 = 
	`ag7100_desc_dma_addr
(
r
, &ds[
√xt
]);

1717 
	`ag7100_tx_own
(&
ds
[
i
]);

1720 #ifde‡
DMA_DEBUG


1721 
r
 = &
mac
->
mac_txrög_ˇche
;

1722 i‡(
	`ag7100_rög_Æloc
(
r
, 
AG7100_TX_DESC_CNT
))

1724 
ds
 = 
r
->
rög_desc
;

1725 
i
 = 0; i < 
r
->
rög_√Àm
; i++ )

1727 
√xt
 = (
i
 =(
r
->
rög_√Àm
 - 1)) ? 0 : (i + 1);

1728 
ds
[
i
].
√xt_desc
 = 0xdeadfeed;

1729 
	`ag7100_tx_own
(&
ds
[
i
]);

1733 
	}
}

1736 
	$ag7100_rx_Æloc
(
ag7100_mac_t
 *
mac
)

1738 
ag7100_rög_t
 *
r
 = &
mac
->
mac_rxrög
;

1739 
ag7100_desc_t
 *
ds
;

1740 
i
, 
√xt
, 
èû
 = 
r
->
rög_èû
;

1741 
ag7100_buf„r_t
 *
bf
;

1743 i‡(
	`ag7100_rög_Æloc
(
r
, 
AG7100_RX_DESC_CNT
))

1746 
	`ag7100_åc
(
r
->
rög_desc
,"ring_desc");

1748 
ds
 = 
r
->
rög_desc
;

1749 
i
 = 0; i < 
r
->
rög_√Àm
; i++ )

1751 
√xt
 = (
i
 =(
r
->
rög_√Àm
 - 1)) ? 0 : (i + 1);

1752 
ds
[
i
].
√xt_desc
 = 
	`ag7100_desc_dma_addr
(
r
, &ds[
√xt
]);

1755 
i
 = 0; i < 
AG7100_RX_DESC_CNT
; i++)

1757 
bf
 = &
r
->
rög_buf„r
[
èû
];

1758 
ds
 = &
r
->
rög_desc
[
èû
];

1760 
bf
->
buf_pkt
 = 
	`ag7100_buf„r_Æloc
();

1761 i‡(!
bf
->
buf_pkt
)

1762 
îr‹
;

1764 
	`dma_ˇche_öv
(()
bf
->
buf_pkt
->
d©a
, 
AG7100_RX_BUF_SIZE
);

1765 
ds
->
pkt_°¨t_addr
 = 
	`vút_to_phys
(
bf
->
buf_pkt
->
d©a
);

1767 
	`ag7100_rx_give_to_dma
(
ds
);

1768 
	`ag7100_rög_ö¸
(
èû
);

1772 
îr‹
:

1773 
	`¥ötk
(
MODULE_NAME
 ": unableÅoállocateÑx\n");

1774 
	`ag7100_rx_‰ì
(
mac
);

1776 
	}
}

1779 
	$ag7100_tx_‰ì
(
ag7100_mac_t
 *
mac
)

1781 
	`ag7100_rög_ªÀa£
(
mac
, &mac->
mac_txrög
);

1782 
	`ag7100_rög_‰ì
(&
mac
->
mac_txrög
);

1783 
	}
}

1786 
	$ag7100_rx_‰ì
(
ag7100_mac_t
 *
mac
)

1788 
	`ag7100_rög_ªÀa£
(
mac
, &mac->
mac_rxrög
);

1789 
	`ag7100_rög_‰ì
(&
mac
->
mac_rxrög
);

1790 
	}
}

1793 
	$ag7100_rög_Æloc
(
ag7100_rög_t
 *
r
, 
cou¡
)

1795 
desc_Æloc_size
, 
buf_Æloc_size
;

1797 
desc_Æloc_size
 = (
ag7100_desc_t
Ë* 
cou¡
;

1798 
buf_Æloc_size
 = (
ag7100_buf„r_t
Ë* 
cou¡
;

1800 
	`mem£t
(
r
, 0, (
ag7100_rög_t
));

1802 
r
->
rög_buf„r
 = (
ag7100_buf„r_t
 *)
	`kmÆloc
(
buf_Æloc_size
, 
GFP_KERNEL
);

1803 
	`¥ötk
("%†AŒoˇãd %dáà0x%lx\n",
__func__
,
buf_Æloc_size
,(Ë
r
->
rög_buf„r
);

1804 i‡(!
r
->
rög_buf„r
)

1806 
	`¥ötk
(
MODULE_NAME
 ": unableÅoállocate buffers\n");

1810 
r
->
rög_desc
 = (
ag7100_desc_t
 *)
	`dma_Æloc_cohîít
(
NULL
,

1811 
desc_Æloc_size
,

1812 &
r
->
rög_desc_dma
,

1813 
GFP_DMA
);

1814 i‡(! 
r
->
rög_desc
)

1816 
	`¥ötk
(
MODULE_NAME
 ": unableÅoállocate coherent descs\n");

1817 
	`k‰ì
(
r
->
rög_buf„r
);

1818 
	`¥ötk
("%†Fªeögáà0x%lx\n",
__func__
,(Ë
r
->
rög_buf„r
);

1822 
	`mem£t
(
r
->
rög_buf„r
, 0, 
buf_Æloc_size
);

1823 
	`mem£t
(
r
->
rög_desc
, 0, 
desc_Æloc_size
);

1824 
r
->
rög_√Àm
 = 
cou¡
;

1827 
	}
}

1830 
	$ag7100_rög_ªÀa£
(
ag7100_mac_t
 *
mac
, 
ag7100_rög_t
 *
r
)

1832 
i
;

1834 
i
 = 0; i < 
r
->
rög_√Àm
; i++)

1835 i‡(
r
->
rög_buf„r
[
i
].
buf_pkt
)

1836 
	`ag7100_buf„r_‰ì
(
r
->
rög_buf„r
[
i
].
buf_pkt
);

1837 
	}
}

1840 
	$ag7100_rög_‰ì
(
ag7100_rög_t
 *
r
)

1842 
	`dma_‰ì_cohîít
(
NULL
, (
ag7100_desc_t
)*
r
->
rög_√Àm
,Ñ->
rög_desc
,

1843 
r
->
rög_desc_dma
);

1844 
	`k‰ì
(
r
->
rög_buf„r
);

1845 
	`¥ötk
("%†Fªeögáà0x%lx\n",
__func__
,(Ë
r
->
rög_buf„r
);

1846 
	}
}

1852 
	$ag7100_oom_timî
(
d©a
)

1854 
ag7100_mac_t
 *
mac
 = (ag7100_mac_à*)
d©a
;

1855 
vÆ
;

1857 
	`ag7100_åc
(
d©a
,"data");

1858 
	`ag7100_rx_ª∂íish
(
mac
);

1859 i‡(
	`ag7100_rx_rög_fuŒ
(
mac
))

1861 
vÆ
 = 
	`mod_timî
(&
mac
->
mac_oom_timî
, 
jiffõs
+1);

1862 
	`as£π
(!
vÆ
);

1865 
	`√tif_rx_scheduÀ
(
mac
->
mac_dev
);

1866 
	}
}

1869 
	$ag7100_tx_timeout
(
√t_devi˚
 *
dev
)

1871 
ag7100_mac_t
 *
mac
 = (ag7100_mac_à*)
dev
->
¥iv
;

1872 
	`ag7100_åc
(
dev
,"dev");

1873 
	`¥ötk
("%s\n",
__func__
);

1877 
	`scheduÀ_w‹k
(&
mac
->
mac_tx_timeout
);

1878 
	}
}

1881 
	$ag7100_tx_timeout_èsk
(
ag7100_mac_t
 *
mac
)

1883 
	`ag7100_åc
(
mac
,"mac");

1884 
	`ag7100_°›
(
mac
->
mac_dev
);

1885 
	`ag7100_›í
(
mac
->
mac_dev
);

1886 
	}
}

1889 
	$ag7100_gë_deÁu…_maˇddr
(
ag7100_mac_t
 *
mac
, 
u8
 *
mac_addr
)

1900 #ifde‡
CONFIG_AG7100_MAC_LOCATION


1901 
u8
 *
ìp_mac_addr
 = (u8 *)–
CONFIG_AG7100_MAC_LOCATION
 + (
mac
->
mac_unô
)*6);

1903 
u8
 *
ìp_mac_addr
 = (
mac
->
mac_unô
Ë? 
AR7100_EEPROM_GE1_MAC_ADDR
:

1904 
AR7100_EEPROM_GE0_MAC_ADDR
;

1907 
	`¥ötk
(
MODULE_NAME
 "CHH: Ma¯addªs†f‹ unô %d\n",
mac
->
mac_unô
);

1908 
	`¥ötk
(
MODULE_NAME
 "CHH: %02x:%02x:%02x:%02x:%02x:%02x \n",

1909 
ìp_mac_addr
[0],eep_mac_addr[1],eep_mac_addr[2],

1910 
ìp_mac_addr
[3],eep_mac_addr[4],eep_mac_addr[5]);

1916 if(
ìp_mac_addr
[0] == 0x00 &&

1917 
ìp_mac_addr
[1] == 0x03 &&

1918 
ìp_mac_addr
[2] == 0x7f)

1920 
	`mem˝y
(
mac_addr
, 
ìp_mac_addr
, 6);

1925 
mac_addr
[0] = 0x00;

1926 
mac_addr
[1] = 0x03;

1927 
mac_addr
[2] = 0x7F;

1928 
mac_addr
[3] = 0xFF;

1929 
mac_addr
[4] = 0xFF;

1930 
mac_addr
[5] = 0xFF - 
mac
->
mac_unô
;

1932 
	}
}

1935 
	$ag7100_do_io˘l
(
√t_devi˚
 *
dev
, 
i‰eq
 *
i‰
, 
cmd
)

1937 #i‡!
	`deföed
(
CONFIG_ATHRS26_PHY
Ë&& !deföed(
CONFIG_ATHRS16_PHY
)

1938 
	`¥ötk
(
MODULE_NAME
 ": unsupported ioctl\n");

1939  -
EOPNOTSUPP
;

1941  
	`©hr_io˘l
(
i‰
->
i‰_d©a
, 
cmd
);

1943 
	}
}

1945 
√t_devi˚_°©s


1946 *
	$ag7100_gë_°©s
(
√t_devi˚
 *
dev
)

1948 
ag7100_mac_t
 *
mac
 = 
dev
->
¥iv
;

1949 
Qdisc
 *
sch
;

1950 
i
;

1952 
sch
 = 
	`rcu_dîe„ªn˚
(
dev
->
qdisc
);

1953 
mac
->
mac_√t_°©s
.
tx_dr›≥d
 = 
sch
->
q°©s
.
dr›s
;

1955 
i
 = 
	`ag7100_gë_rx_cou¡
(
mac
Ë- mac->
√t_rx_∑ckës
;

1956 i‡(
i
<0)

1957 
i
=0;

1959 
mac
->
mac_√t_°©s
.
rx_mis£d_îr‹s
 = 
i
;

1961  &
mac
->
mac_√t_°©s
;

1962 
	}
}

1965 
	$ag7100_vë_tx_Àn_≥r_pkt
(*
Àn
)

1967 
l
;

1970 
l
 = *
Àn
 & ~3;

1975 i‡(
l
 < 
AG7100_TX_MIN_DS_LEN
)

1976 
l
 = 
AG7100_TX_MIN_DS_LEN
;

1981 i‡(
l
 > 
AG7100_TX_FIFO_LEN
/2)

1982 i‡(
l
 < 
AG7100_TX_MTU_LEN
)

1983 
l
 = 
AG7100_TX_MTU_LEN
;

1984 i‡(
l
 > 
AG7100_TX_MAX_DS_LEN
)

1985 
l
 = 
AG7100_TX_MAX_DS_LEN
;

1986 *
Àn
 = 
l
;

1987 
	}
}

1992 
__öô


1993 
	$ag7100_öô
()

1995 
i
;

1996 
√t_devi˚
 *
dev
;

1997 
ag7100_mac_t
 *
mac
;

1998 
uöt32_t
 
mask
;

2014 i‡(0 =
tx_Àn_≥r_ds
)

2015 
tx_Àn_≥r_ds
 = 
CONFIG_AG7100_LEN_PER_TX_DS
;

2017 
	`ag7100_vë_tx_Àn_≥r_pkt
–&
tx_Àn_≥r_ds
);

2019 
	`¥ötk
(
MODULE_NAME
 ": LígthÖî segmíà%d\n", 
tx_Àn_≥r_ds
);

2024 #i‚de‡
CONFIG_AR9100


2025 
tx_max_desc_≥r_ds_pkt
 = 
AG7100_TX_MAX_DS_LEN
 / 
tx_Àn_≥r_ds
;

2026 i‡(
AG7100_TX_MAX_DS_LEN
 % 
tx_Àn_≥r_ds
Ë
tx_max_desc_≥r_ds_pkt
++;

2028 
tx_max_desc_≥r_ds_pkt
 =1;

2031 
	`¥ötk
(
MODULE_NAME
 ": Max segmít†≥∏∑ckë %d\n", 
tx_max_desc_≥r_ds_pkt
);

2032 
	`¥ötk
(
MODULE_NAME
 ": MaxÅx des¸ùt‹ cou¡ %d\n", 
AG7100_TX_DESC_CNT
);

2033 
	`¥ötk
(
MODULE_NAME
 ": MaxÑx des¸ùt‹ cou¡ %d\n", 
AG7100_RX_DESC_CNT
);

2038 i‡(0 =
fifo_3
)

2039 
fifo_3
 = 0x000001f‡| ((
AG7100_TX_FIFO_LEN
-
tx_Àn_≥r_ds
)/4)<<16;

2041 
	`¥ötk
(
MODULE_NAME
 ": fifÿcfg 3 %08x\n", 
fifo_3
);

2047 
i
 = 0; i < 
AG7100_NMACS
; i++)

2049 
mac
 = 
	`kmÆloc
((
ag7100_mac_t
), 
GFP_KERNEL
);

2050 i‡(!
mac
)

2052 
	`¥ötk
(
MODULE_NAME
 ": unableÅoállocate mac\n");

2055 
	`mem£t
(
mac
, 0, (
ag7100_mac_t
));

2057 
mac
->
mac_unô
 = 
i
;

2058 
mac
->
mac_ba£
 = 
	`ag7100_mac_ba£
(
i
);

2059 
mac
->
mac_úq
 = 
	`ag7100_mac_úq
(
i
);

2060 
ag7100_macs
[
i
] = 
mac
;

2061 
	`•ö_lock_öô
(&
mac
->
mac_lock
);

2065 
	`öô_timî
(&
mac
->
mac_oom_timî
);

2066 
mac
->
mac_oom_timî
.
d©a
 = ()mac;

2067 
mac
->
mac_oom_timî
.
fun˘i⁄
 = 
ag7100_oom_timî
;

2071 
	`INIT_WORK
(&
mac
->
mac_tx_timeout
, 
ag7100_tx_timeout_èsk
, mac);

2073 
dev
 = 
	`Æloc_ëhîdev
(0);

2074 i‡(!
dev
)

2076 
	`k‰ì
(
mac
);

2077 
	`¥ötk
("%†Fªeögáà0x%lx\n",
__func__
,(Ë
mac
);

2078 
	`¥ötk
(
MODULE_NAME
 ": unableÅoállocateÉtherdev\n");

2082 
mac
->
mac_dev
 = 
dev
;

2083 
dev
->
gë_°©s
 = 
ag7100_gë_°©s
;

2084 
dev
->
›í
 = 
ag7100_›í
;

2085 
dev
->
°›
 = 
ag7100_°›
;

2086 
dev
->
h¨d_°¨t_xmô
 = 
ag7100_h¨d_°¨t
;

2087 #i‡
	`deföed
(
CONFIG_ATHRS26_PHY
Ë|| deföed(
CONFIG_ATHRS16_PHY
)

2088 
dev
->
do_io˘l
 = 
ag7100_do_io˘l
;

2090 
dev
->
do_io˘l
 = 
NULL
;

2092 
dev
->
pﬁl
 = 
ag7100_pﬁl
;

2093 
dev
->
weight
 = 
AG7100_NAPI_WEIGHT
;

2094 
dev
->
tx_timeout
 = 
ag7100_tx_timeout
;

2095 
dev
->
¥iv
 = 
mac
;

2097 
	`ag7100_gë_deÁu…_maˇddr
(
mac
, 
dev
->
dev_addr
);

2099 i‡(
	`ªgi°î_√tdev
(
dev
))

2101 
	`¥ötk
(
MODULE_NAME
 ":ÑegisterÇetdev failed\n");

2102 
Áûed
;

2105 #ifde‡
CONFIG_AR9100


2106 
	`ag7100_ªg_rmw_£t
(
mac
, 
AG7100_MAC_CFG1
, 
AG7100_MAC_CFG1_SOFT_RST


2107 | 
AG7100_MAC_CFG1_RX_RST
 | 
AG7100_MAC_CFG1_TX_RST
);

2109 
	`ag7100_ªg_rmw_£t
(
mac
, 
AG7100_MAC_CFG1
, 
AG7100_MAC_CFG1_SOFT_RST
);

2111 
	`udñay
(20);

2112 
mask
 = 
	`ag7100_ª£t_mask
(
mac
->
mac_unô
);

2117 
	`¨7100_ªg_rmw_£t
(
AR7100_RESET
, 
mask
);

2118 
	`mdñay
(100);

2119 
	`¨7100_ªg_rmw_˛ór
(
AR7100_RESET
, 
mask
);

2120 
	`mdñay
(100);

2123 
	`ag7100_åc_öô
();

2125 #ifde‡
CONFIG_AR9100


2126 
	#AP83_BOARD_NUM_ADDR
 ((*)0xbf7f1244)

	)

2128 
bﬂrd_vîsi⁄
 = (
AP83_BOARD_NUM_ADDR
[0] - '0') +

2129 ((
AP83_BOARD_NUM_ADDR
[1] - '0') * 10);

2132 #i‡
	`deföed
(
CONFIG_ATHRS26_PHY
)

2133 
	`©hrs26_ªg_dev
(
ag7100_macs
);

2138 
Áûed
:

2139 
i
 = 0; i < 
AG7100_NMACS
; i++)

2141 i‡(!
ag7100_macs
[
i
])

2143 i‡(
ag7100_macs
[
i
]->
mac_dev
)

2144 
	`‰ì_√tdev
(
ag7100_macs
[
i
]->
mac_dev
);

2145 
	`k‰ì
(
ag7100_macs
[
i
]);

2146 
	`¥ötk
("%†Fªeögáà0x%lx\n",
__func__
,(Ë
ag7100_macs
[
i
]);

2149 
	}
}

2151 
__exô


2152 
	$ag7100_˛ónup
()

2154 
i
;

2156 
i
 = 0; i < 
AG7100_NMACS
; i++)

2158 
	`uƒegi°î_√tdev
(
ag7100_macs
[
i
]->
mac_dev
);

2159 
	`‰ì_√tdev
(
ag7100_macs
[
i
]->
mac_dev
);

2160 
	`k‰ì
(
ag7100_macs
[
i
]);

2161 
	`¥ötk
("%†Fªeögáà0x%lx\n",
__func__
,(Ë
ag7100_macs
[
i
]);

2163 
	`¥ötk
(
MODULE_NAME
 ": cleanup done\n");

2164 
	}
}

2166 
moduÀ_öô
(
ag7100_öô
);

2167 
moduÀ_exô
(
ag7100_˛ónup
);

	@ag7100/ag7100.h

1 #i‚de‡
_AG7100_H


2 
	#_AG7100_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/•ölock_ty≥s.h
>

6 
	~<löux/w‹kqueue.h
>

7 
	~<asm/sy°em.h
>

8 
	~<löux/√tdevi˚.h
>

9 
	~"¨7100.h
"

10 
	~"ag7100_åc.h
"

16 
uöt32_t
 
	mpkt_°¨t_addr
;

18 
uöt32_t
 
	mis_em±y
 : 1;

19 
uöt32_t
 
	mªs1
 : 6;

20 
uöt32_t
 
	mm‹e
 : 1;

21 
uöt32_t
 
	mªs2
 : 3;

22 
uöt32_t
 
	m·µ_ovîride
 : 5;

23 
uöt32_t
 
	mªs3
 : 4;

24 
uöt32_t
 
	mpkt_size
 : 12;

26 
uöt32_t
 
	m√xt_desc
 ;

27 }
	tag7100_desc_t
;

33 
sk_buff
 *
	mbuf_pkt
;

34 
	mbuf_nds
;

35 
ag7100_desc_t
 *
	mbuf_œ°ds
;

36 #ifde‡
DMA_DEBUG


37 
	må™s_°¨t
;

39 }
	tag7100_buf„r_t
;

45 
ag7100_desc_t
 *
	mrög_desc
;

46 
dma_addr_t
 
	mrög_desc_dma
;

47 
ag7100_buf„r_t
 *
	mrög_buf„r
;

48 
	mrög_hód
;

49 
	mrög_èû
;

50 
	mrög_√Àm
;

51 }
	tag7100_rög_t
;

54 
	m°©s
;

55 }
	tag7100_°©s_t
;

61 
	mAG7100_PHY_SPEED_10T
,

62 
	mAG7100_PHY_SPEED_100TX
,

63 
	mAG7100_PHY_SPEED_1000T
,

64 }
	tag7100_phy_•ìd_t
;

69 
	#AG7100_NVDEVS
 2

	)

72 
√t_devi˚
 *
	mmac_dev
;

73 
uöt32_t
 
	mmac_unô
;

74 
uöt32_t
 
	mmac_ba£
;

75 
	mmac_úq
;

76 
ag7100_rög_t
 
	mmac_txrög
;

77 
ag7100_rög_t
 
	mmac_rxrög
;

78 
ag7100_°©s_t
 
	mmac_°©s
;

79 
•ölock_t
 
	mmac_lock
;

80 
timî_li°
 
	mmac_oom_timî
;

81 
w‹k_°ru˘
 
	mmac_tx_timeout
;

82 
√t_devi˚_°©s
 
	mmac_√t_°©s
;

83 
ag7100_phy_•ìd_t
 
	mmac_•ìd
;

84 
	mmac_fdx
;

85 
timî_li°
 
	mmac_phy_timî
;

86 #ifde‡
DMA_DEBUG


87 
timî_li°
 
	mmac_dbg_timî
;

88 
ag7100_rög_t
 
	mmac_txrög_ˇche
;

90 #i‡
deföed
(
CONFIG_AR9100
Ë&& deföed(
CONFIG_AG7100_GE1_RMII
)

91 
	m•ìd_10t
;

93 
ag7100_åc_t
 
	mtb
;

94 }
	tag7100_mac_t
;

96 
	#√t_rx_∑ckës
 
mac_√t_°©s
.
rx_∑ckës


	)

97 
	#√t_rx_fifo_îr‹s
 
mac_√t_°©s
.
rx_fifo_îr‹s


	)

98 
	#√t_tx_∑ckës
 
mac_√t_°©s
.
tx_∑ckës


	)

99 
	#√t_rx_byãs
 
mac_√t_°©s
.
rx_byãs


	)

100 
	#√t_tx_byãs
 
mac_√t_°©s
.
tx_byãs


	)

101 
	#√t_rx_ovî_îr‹s
 
mac_√t_°©s
.
rx_ovî_îr‹s


	)

102 
	#√t_tx_dr›≥d
 
mac_√t_°©s
.
tx_dr›≥d
;

	)

104 
	#ag7100_dev_up
(
_dev
) \

105 (((
_dev
)->
Êags
 & (
IFF_RUNNING
|
IFF_UP
)Ë!(IFF_RUNNING|IFF_UP))

	)

108 
	mAG7100_RX_STATUS_DONE
,

109 
	mAG7100_RX_STATUS_NOT_DONE
,

110 
	mAG7100_RX_STATUS_OOM
,

111 #ifde‡
CONFIG_AR9100


112 
	mAG7100_RX_DMA_HANG


114 }
	tag7100_rx_°©us_t
;

121 #i‡
deföed
 (
CONFIG_AG7100_GE0_GMII
)

122 
	#AG7100_MII0_INTERFACE
 0

	)

123 #ñi‡
deföed
 (
CONFIG_AG7100_GE0_MII
)

124 
	#AG7100_MII0_INTERFACE
 1

	)

125 #ñi‡
deföed
 (
CONFIG_AG7100_GE0_RGMII
)

126 
	#AG7100_MII0_INTERFACE
 2

	)

127 #ñi‡
deföed
 (
CONFIG_AG7100_GE0_RMII
)

128 
	#AG7100_MII0_INTERFACE
 3

	)

134 #i‡
deföed
(
CONFIG_AG7100_GE1_IS_CONNECTED
)

136 
	#AG7100_NMACS
 2

	)

138 #i‡
deföed
 (
CONFIG_AG7100_GE1_RGMII
)

139 
	#AG7100_MII1_INTERFACE
 0

	)

140 #ñi‡
deföed
 (
CONFIG_AG7100_GE1_RMII
)

141 
	#AG7100_MII1_INTERFACE
 1

	)

144 
	#AG7100_NMACS
 1

	)

145 
	#AG7100_MII1_INTERFACE
 0xf‡

	)

148 
	#mii_ªg
(
_mac
Ë(
AR7100_MII0_CTRL
 + ((_mac)->
mac_unô
 * 4))

	)

149 
	#mii_if
(
_mac
Ë(((_mac)->
mac_unô
 =0Ë? 
mii0_if
 : 
mii1_if
)

	)

151 
	#ag7100_£t_mii_˘æ_•ìd
(
_mac
, 
_•d
) do { \

152 
	`¨7100_ªg_rmw_˛ór
(
	`mii_ªg
(
_mac
), (3 << 4)); \

153 
	`¨7100_ªg_rmw_£t
(
	`mii_ªg
(
_mac
), ((
_•d
) << 4)); \

154 }0);

	)

160 
	#ETHERNET_FCS_SIZE
 4

	)

161 
	#AG7100_RX_RESERVE
 (64)

	)

162 
	#AG7100_RX_BUF_SIZE
 \

163 (
AG7100_RX_RESERVE
 + 
ETH_HLEN
 + 
ETH_FRAME_LEN
 + 
ETHERNET_FCS_SIZE
)

	)

166 
	#ag7100_mac_ba£
(
_no
Ë(_noË? 
AR7100_GE1_BASE
 : 
AR7100_GE0_BASE


	)

167 
	#ag7100_mac_úq
(
_no
Ë(_noË? 
AR7100_CPU_IRQ_GE1
 : 
AR7100_CPU_IRQ_GE0


	)

169 
	#ag7100_ª£t_mask
(
_no
Ë(_noË? (
AR7100_RESET_GE1_MAC
 | \

170 
AR7100_RESET_GE1_PHY
) \

171 : (
AR7100_RESET_GE0_MAC
 | \

172 
AR7100_RESET_GE0_PHY
)

	)

174 
	#ag7100_unô2mac
(
_unô
Ë
ag7100_macs
[(_unô)]

	)

176 
	#as£π
(
_c⁄d
) do { \

177 if(!(
_c⁄d
)) { \

178 
	`ag7100_åc_dump
(); \

179 
	`¥ötk
("%s:%d:ás£πi⁄ faûed\n", 
__func__
, 
__LINE__
); \

180 
	`BUG
(); \

182 }0);

	)

188 
	#AG7100_MAC_CFG1
 0x00

	)

189 
	#AG7100_MAC_CFG2
 0x04

	)

190 
	#AG7100_MAC_IFCTL
 0x38

	)

195 
	#AG7100_MAC_FIFO_CFG_0
 0x48

	)

196 
	#AG7100_MAC_FIFO_CFG_1
 0x4c

	)

197 
	#AG7100_MAC_FIFO_CFG_2
 0x50

	)

198 
	#AG7100_MAC_FIFO_CFG_3
 0x54

	)

199 
	#AG7100_MAC_FIFO_CFG_4
 0x58

	)

201 
	#AG7100_MAC_FIFO_CFG_5
 0x5c

	)

202 
	#AG7100_BYTE_PER_CLK_EN
 (1 << 19)

	)

204 
	#AG7100_MAC_FIFO_RAM_0
 0x60

	)

205 
	#AG7100_MAC_FIFO_RAM_1
 0x64

	)

206 
	#AG7100_MAC_FIFO_RAM_2
 0x68

	)

207 
	#AG7100_MAC_FIFO_RAM_3
 0x6c

	)

208 
	#AG7100_MAC_FIFO_RAM_4
 0x70

	)

209 
	#AG7100_MAC_FIFO_RAM_5
 0x74

	)

210 
	#AG7100_MAC_FIFO_RAM_6
 0x78

	)

211 
	#AG7100_MAC_FIFO_RAM_7
 0x7c

	)

216 
	#AG7100_MAC_CFG1_SOFT_RST
 (1 << 31)

	)

217 
	#AG7100_MAC_CFG1_RX_RST
 (1 << 19)

	)

218 
	#AG7100_MAC_CFG1_TX_RST
 (1 << 18)

	)

219 
	#AG7100_MAC_CFG1_LOOPBACK
 (1 << 8)

	)

220 
	#AG7100_MAC_CFG1_RX_EN
 (1 << 2)

	)

221 
	#AG7100_MAC_CFG1_TX_EN
 (1 << 0)

	)

222 
	#AG7100_MAC_CFG1_RX_FCTL
 (1 << 5)

	)

223 
	#AG7100_MAC_CFG1_TX_FCTL
 (1 << 4)

	)

226 
	#AG7100_MAC_CFG2_FDX
 (1 << 0)

	)

227 
	#AG7100_MAC_CFG2_CRC_EN
 (1 << 1)

	)

228 
	#AG7100_MAC_CFG2_PAD_CRC_EN
 (1 << 2)

	)

229 
	#AG7100_MAC_CFG2_LEN_CHECK
 (1 << 4)

	)

230 
	#AG7100_MAC_CFG2_HUGE_FRAME_EN
 (1 << 5)

	)

231 
	#AG7100_MAC_CFG2_IF_1000
 (1 << 9)

	)

232 
	#AG7100_MAC_CFG2_IF_10_100
 (1 << 8)

	)

234 
	#AG7100_MAC_IFCTL_SPEED
 (1 << 16)

	)

239 
	#AG7100_DMA_TX_CTRL
 0x180

	)

240 
	#AG7100_DMA_TX_DESC
 0x184

	)

241 
	#AG7100_DMA_TX_STATUS
 0x188

	)

242 
	#AG7100_DMA_RX_CTRL
 0x18c

	)

243 
	#AG7100_DMA_RX_DESC
 0x190

	)

244 
	#AG7100_DMA_RX_STATUS
 0x194

	)

245 
	#AG7100_DMA_INTR_MASK
 0x198

	)

246 
	#AG7100_DMA_INTR
 0x19c

	)

251 
	#AG7100_TXE
 (1 << 0)

	)

252 
	#AG7100_TX_STATUS_PKTCNT_SHIFT
 16

	)

253 
	#AG7100_TX_STATUS_PKT_SENT
 0x1

	)

254 
	#AG7100_TX_STATUS_URN
 0x2

	)

255 
	#AG7100_TX_STATUS_BUS_ERROR
 0x8

	)

257 
	#AG7100_RXE
 (1 << 0)

	)

259 
	#AG7100_RX_STATUS_PKTCNT_MASK
 0xff0000

	)

260 
	#AG7100_RX_STATUS_PKT_RCVD
 (1 << 0)

	)

261 
	#AG7100_RX_STATUS_OVF
 (1 << 2)

	)

262 
	#AG7100_RX_STATUS_BUS_ERROR
 (1 << 3)

	)

267 
	#AG7100_INTR_TX
 (1 << 0)

	)

268 
	#AG7100_INTR_TX_URN
 (1 << 1)

	)

269 
	#AG7100_INTR_TX_BUS_ERROR
 (1 << 3)

	)

270 
	#AG7100_INTR_RX
 (1 << 4)

	)

271 
	#AG7100_INTR_RX_OVF
 (1 << 6)

	)

272 
	#AG7100_INTR_RX_BUS_ERROR
 (1 << 7)

	)

277 
	#AG7100_MAC_MII_MGMT_CFG
 0x20

	)

278 
	#AG7100_MGMT_CFG_CLK_DIV_20
 0x06

	)

279 
	#AG7100_MII_MGMT_CMD
 0x24

	)

280 
	#AG7100_MGMT_CMD_READ
 0x1

	)

281 
	#AG7100_MII_MGMT_ADDRESS
 0x28

	)

282 
	#AG7100_ADDR_SHIFT
 8

	)

283 
	#AG7100_MII_MGMT_CTRL
 0x2c

	)

284 
	#AG7100_MII_MGMT_STATUS
 0x30

	)

285 
	#AG7100_MII_MGMT_IND
 0x34

	)

286 
	#AG7100_MGMT_IND_BUSY
 (1 << 0)

	)

287 
	#AG7100_MGMT_IND_INVALID
 (1 << 2)

	)

288 
	#AG7100_GE_MAC_ADDR1
 0x40

	)

289 
	#AG7100_GE_MAC_ADDR2
 0x44

	)

290 
	#AG7100_MII0_CONTROL
 0x18070000

	)

295 
	#AG7100_INTR_MASK
 (
AG7100_INTR_RX
 | 
AG7100_INTR_RX_OVF
 | \

296 
AG7100_INTR_RX_BUS_ERROR
 | \

297 
AG7100_INTR_TX_BUS_ERROR
 \

298  )

	)

300 
	#ag7100_ªg_rd
(
_mac
, 
_ªg
) \

301 (
	`¨7100_ªg_rd
((
_mac
)->
mac_ba£
 + (
_ªg
)))

	)

303 
	#ag7100_ªg_wr
(
_mac
, 
_ªg
, 
_vÆ
) \

304 
	`¨7100_ªg_wr
((
_mac
)->
mac_ba£
 + (
_ªg
), (
_vÆ
));

	)

309 
	#ag7100_ªg_wr_nf
(
_mac
, 
_ªg
, 
_vÆ
) \

310 
	`¨7100_ªg_wr_nf
((
_mac
)->
mac_ba£
 + (
_ªg
), (
_vÆ
));

	)

312 
	#ag7100_ªg_rmw_£t
(
_mac
, 
_ªg
, 
_mask
) \

313 
	`¨7100_ªg_rmw_£t
((
_mac
)->
mac_ba£
 + (
_ªg
), (
_mask
));

	)

315 
	#ag7100_ªg_rmw_˛ór
(
_mac
, 
_ªg
, 
_mask
) \

316 
	`¨7100_ªg_rmw_˛ór
((
_mac
)->
mac_ba£
 + (
_ªg
), (
_mask
));

	)

319 
	#ag7100_desc_dma_addr
(
_r
, 
_ds
) \

320 (
u32
)((
ag7100_desc_t
 *)(
_r
)->
rög_desc_dma
 + ((
_ds
Ë- ((_r)->
rög_desc
)))

	)

326 
	#ag7100_tx_°›≥d
(
_mac
) \

327 (!(
	`ag7100_ªg_rd
((
_mac
), 
AG7100_DMA_TX_CTRL
Ë& 
AG7100_TXE
))

	)

329 
	#ag7100_rx_°¨t
(
_mac
) \

330 
	`ag7100_ªg_wr
((
_mac
), 
AG7100_DMA_RX_CTRL
, 
AG7100_RXE
)

	)

332 
	#ag7100_rx_°›
(
_mac
) \

333 
	`ag7100_ªg_wr
((
_mac
), 
AG7100_DMA_RX_CTRL
, 0)

	)

335 
	#ag7100_tx_°¨t
(
_mac
) \

336 
	`ag7100_ªg_wr
((
_mac
), 
AG7100_DMA_TX_CTRL
, 
AG7100_TXE
)

	)

338 
	#ag7100_tx_°›
(
_mac
) \

339 
	`ag7100_ªg_wr
((
_mac
), 
AG7100_DMA_TX_CTRL
, 0)

	)

341 
ölöe
 

342 
	$ag7100_ndesc_unu£d
(
ag7100_mac_t
 *
mac
, 
ag7100_rög_t
 *
rög
)

344 
hód
 = 
rög
->
rög_hód
, 
èû
 =Ñög->
rög_èû
;

346  ((
èû
 > 
hód
 ? 0 : 
rög
->
rög_√Àm
) +Åail - head);

347 
	}
}

349 
ölöe
 
	$ag7100_rx_rög_fuŒ
(
ag7100_mac_t
 *
mac
)

351 
ag7100_rög_t
 *
r
 = &
mac
->
mac_rxrög
;

352 
èû
 = 
r
->
rög_èû
;

354  ((
r
->
rög_hód
 =
èû
Ë&& !r->
rög_buf„r
[èû].
buf_pkt
);

355 
	}
}

357 
	#ag7100_rög_ö¸
(
_idx
) \

358 if(
	`u∆ikñy
(++(
_idx
Ë=
r
->
rög_√Àm
)Ë(_idxË0;

	)

360 
	#ag7100_rög_de¸
(
_idx
) \

361 if(
	`u∆ikñy
(--(
_idx
Ë=-1)Ë(_idxË
r
->
rög_√Àm
;

	)

366 
	#ag7100_rx_ow√d_by_dma
(
_ds
Ë((_ds)->
is_em±y
 =1)

	)

367 
	#ag7100_rx_give_to_dma
(
_ds
Ë((_ds)->
is_em±y
 = 1)

	)

368 
	#ag7100_tx_ow√d_by_dma
(
_ds
Ë((_ds)->
is_em±y
 =0)

	)

369 
	#ag7100_tx_give_to_dma
(
_ds
Ë((_ds)->
is_em±y
 = 0)

	)

370 
	#ag7100_tx_own
(
_ds
Ë((_ds)->
is_em±y
 = 1)

	)

376 
	#ag7100_gë_i§
(
_mac
Ë
	`ag7100_ªg_rd
((_mac), 
AG7100_DMA_INTR
);

	)

377 
	#ag7100_öt_íabÀ
(
_mac
) \

378 
	`ag7100_ªg_wr
(
_mac
, 
AG7100_DMA_INTR_MASK
, 
AG7100_INTR_MASK
)

	)

380 
	#ag7100_öt_dißbÀ
(
_mac
) \

381 
	`ag7100_ªg_wr
(
_mac
, 
AG7100_DMA_INTR_MASK
, 0)

	)

391 
	#ag7100_öå_ack_txu∫
(
_mac
) \

392 
	`ag7100_ªg_wr
((
_mac
), 
AG7100_DMA_TX_STATUS
, 
AG7100_TX_STATUS_URN
);

	)

393 
	#ag7100_öå_ack_rx
(
_mac
) \

394 
	`ag7100_ªg_wr_nf
((
_mac
), 
AG7100_DMA_RX_STATUS
, 
AG7100_RX_STATUS_PKT_RCVD
);

	)

395 
	#ag7100_öå_ack_rxovf
(
_mac
) \

396 
	`ag7100_ªg_wr
((
_mac
), 
AG7100_DMA_RX_STATUS
, 
AG7100_RX_STATUS_OVF
);

	)

400 
	#ag7100_öå_ack_tx
(
_mac
) \

401 
	`ag7100_ªg_wr
((
_mac
), 
AG7100_DMA_TX_STATUS
, 
AG7100_TX_STATUS_PKT_SENT
);

	)

402 
	#ag7100_öå_ack_txbe
(
_mac
) \

403 
	`ag7100_ªg_wr
((
_mac
), 
AG7100_DMA_TX_STATUS
, 
AG7100_TX_STATUS_BUS_ERROR
);

	)

404 
	#ag7100_öå_ack_rxbe
(
_mac
) \

405 
	`ag7100_ªg_wr
((
_mac
), 
AG7100_DMA_RX_STATUS
, 
AG7100_RX_STATUS_BUS_ERROR
);

	)

411 
	#ag7100_öå_dißbÀ_txu∫
(
_mac
) \

412 
	`ag7100_ªg_rmw_˛ór
((
_mac
), 
AG7100_DMA_INTR_MASK
, 
AG7100_INTR_TX_URN
);

	)

414 
	#ag7100_öå_íabÀ_txu∫
(
_mac
) \

415 
	`ag7100_ªg_rmw_£t
((
_mac
), 
AG7100_DMA_INTR_MASK
, 
AG7100_INTR_TX_URN
);

	)

417 
	#ag7100_öå_íabÀ_tx
(
_mac
) \

418 
	`ag7100_ªg_rmw_£t
((
_mac
), 
AG7100_DMA_INTR_MASK
, 
AG7100_INTR_TX
);

	)

420 
	#ag7100_öå_dißbÀ_tx
(
_mac
) \

421 
	`ag7100_ªg_rmw_˛ór
((
_mac
), 
AG7100_DMA_INTR_MASK
, 
AG7100_INTR_TX
);

	)

423 
	#ag7100_öå_dißbÀ_ªcv
(
_mac
) \

424 
	`ag7100_ªg_rmw_˛ór
(
mac
, 
AG7100_DMA_INTR_MASK
, \

425 (
AG7100_INTR_RX
 | 
AG7100_INTR_RX_OVF
));

	)

427 
	#ag7100_öå_íabÀ_ªcv
(
_mac
) \

428 
	`ag7100_ªg_rmw_£t
(
mac
, 
AG7100_DMA_INTR_MASK
, \

429 (
AG7100_INTR_RX
 | 
AG7100_INTR_RX_OVF
));

	)

431 
ölöe
 
	$ag7100_°¨t_rx_cou¡
(
ag7100_mac_t
 *
mac
)

433 i‡(
mac
->
mac_unô
 == 0) {

434 
	`¥ötk
("Wrôög %d\n", 
PERF_CTL_GE0_PKT_CNT
);

435 
	`¨7100_≥rf0_˘l
(
PERF_CTL_GE0_PKT_CNT
);

438 
	`¥ötk
("Wrôög %d\n", 
PERF_CTL_GE1_PKT_CNT
);

439 
	`¨7100_≥rf1_˘l
(
PERF_CTL_GE1_PKT_CNT
);

441 
	}
}

443 
ölöe
 
uöt32_t
 
	$ag7100_gë_rx_cou¡
(
ag7100_mac_t
 *
mac
)

445 i‡(
mac
->
mac_unô
 == 0) {

446  (
	`¨7100_ªg_rd
(
AR7100_PERF0_COUNTER
));

449  (
	`¨7100_ªg_rd
(
AR7100_PERF1_COUNTER
));

451 
	}
}

455 
ölöe
 
	$ag7100_£t_mac_du∂ex
(
ag7100_mac_t
 *
mac
, 
fdx
)

457 i‡(
fdx
) {

458 
	`ag7100_ªg_rmw_£t
(
mac
, 
AG7100_MAC_CFG2
, 
AG7100_MAC_CFG2_FDX
);

461 
	`ag7100_ªg_rmw_˛ór
(
mac
, 
AG7100_MAC_CFG2
, 
AG7100_MAC_CFG2_FDX
);

463 
	}
}

465 
ölöe
 
	$ag7100_£t_mac_if
(
ag7100_mac_t
 *
mac
, 
is_1000
)

467 
	`ag7100_ªg_rmw_˛ór
(
mac
, 
AG7100_MAC_CFG2
, (
AG7100_MAC_CFG2_IF_1000
|

468 
AG7100_MAC_CFG2_IF_10_100
));

469 i‡(
is_1000
) {

470 
	`ag7100_ªg_rmw_£t
(
mac
, 
AG7100_MAC_CFG2
, 
AG7100_MAC_CFG2_IF_1000
);

471 
	`ag7100_ªg_rmw_£t
(
mac
, 
AG7100_MAC_FIFO_CFG_5
, 
AG7100_BYTE_PER_CLK_EN
);

474 
	`ag7100_ªg_rmw_£t
(
mac
, 
AG7100_MAC_CFG2
, 
AG7100_MAC_CFG2_IF_10_100
);

475 
	`ag7100_ªg_rmw_˛ór
(
mac
,
AG7100_MAC_FIFO_CFG_5
, 
AG7100_BYTE_PER_CLK_EN
);

477 
	}
}

479 
ölöe
 
	$ag7100_£t_mac_•ìd
(
ag7100_mac_t
 *
mac
, 
is100
)

481 i‡(
is100
) {

482 
	`ag7100_ªg_rmw_£t
(
mac
, 
AG7100_MAC_IFCTL
, 
AG7100_MAC_IFCTL_SPEED
);

485 
	`ag7100_ªg_rmw_˛ór
(
mac
, 
AG7100_MAC_IFCTL
, 
AG7100_MAC_IFCTL_SPEED
);

487 
	}
}

489 
uöt16_t
 
ag7100_mii_ªad
(
unô
, 
uöt32_t
 
phy_addr
, 
uöt8_t
 
ªg
);

490 
ag7100_mii_wrôe
(
unô
, 
uöt32_t
 
phy_addr
, 
uöt8_t
 
ªg
, 
uöt16_t
 
d©a
);

	@ag7100/ag7100_mod.mod.c

1 
	~<löux/moduÀ.h
>

2 
	~<löux/vîmagic.h
>

3 
	~<löux/compûî.h
>

5 
MODULE_INFO
(
vîmagic
, 
VERMAGIC_STRING
);

7 #unde‡
unix


8 
moduÀ
 
__this_moduÀ


9 
__©åibuã__
((
£˘i⁄
(".gnu.linkonce.this_module"))) = {

10 .
«me
 = 
__°rögify
(
KBUILD_MODNAME
),

11 .
	göô
 = 
öô_moduÀ
,

12 #ifde‡
CONFIG_MODULE_UNLOAD


13 .
	gexô
 = 
˛ónup_moduÀ
,

17 c⁄° 
	g__moduÀ_dïíds
[]

18 
__©åibuã_u£d__


19 
__©åibuã__
((
£˘i⁄
(".modinfo"))) =

	@ag7100/ag7100_phy.h

18 #i‚de‡
_AG7100_PHY_H


19 
	#_AG7100_PHY_H


	)

21 
	#phy_ªg_ªad
 
ag7100_mii_ªad


	)

22 
	#phy_ªg_wrôe
 
ag7100_mii_wrôe


	)

24 #i‡!
deföed
(
CONFIG_ATHRS26_PHY
Ë&& !deföed(
CONFIG_ATHRS16_PHY
)

25 
	#ag7100_phy_io˘l
(
unô
, 
¨gs
)

	)

28 
	~"ag7100.h
"

30 #ifde‡
__BDI


35 #ifde‡
__ECOS


41 
	#AR7100_VSC_ENET_PHY
 1

	)

42 
	#AR7100_VSC8601_ENET_PHY
 2

	)

43 
	#AR7100_VSC8601_VSC8601_ENET_PHY
 3

	)

44 
	#AR7100_VSC8601_VSC73XX_ENET_PHY
 4

	)

45 
	#AR7100_ICPLUS_ENET_PHY
 5

	)

46 
	#AR7100_REALTEK_ENET_PHY
 6

	)

47 
	#AR7100_ADMTEK_ENET_PHY
 7

	)

48 
	#AR7100_ATHRF1_ENET_PHY
 8

	)

49 
	#AR7100_ATHRS26_ENET_PHY
 9

	)

50 
	#AR7100_ATHRS16_ENET_PHY
 10

	)

52 #i‡(
CYGNUM_USE_ENET_PHY
 =
AR7100_VSC_ENET_PHY
)

53 
	#CONFIG_VITESSE_PHY


	)

54 #ñi‡(
CYGNUM_USE_ENET_PHY
 =
AR7100_VSC8601_ENET_PHY
)

55 
	#CONFIG_VITESSE_8601_PHY


	)

56 #ñi‡(
CYGNUM_USE_ENET_PHY
 =
AR7100_VSC8601_VSC73XX_ENET_PHY
)

57 
	#CONFIG_VITESSE_8601_7395_PHY


	)

58 #ñi‡(
CYGNUM_USE_ENET_PHY
 =
AR7100_ICPLUS_ENET_PHY
)

59 
	#CONFIG_ICPLUS_PHY


	)

60 #ñi‡(
CYGNUM_USE_ENET_PHY
 =
AR7100_REALTEK_ENET_PHY
)

61 
	#CONFIG_REALTEK_PHY


	)

62 #ñi‡(
CYGNUM_USE_ENET_PHY
 =
AR7100_ADMTEK_ENET_PHY
)

63 
	#CONFIG_ADM6996FC_PHY


	)

64 #ñi‡(
CYGNUM_USE_ENET_PHY
 =
AR7100_ATHRF1_ENET_PHY
)

65 
	#CONFIG_ATHRF1_PHY


	)

66 #ñi‡(
CYGNUM_USE_ENET_PHY
 =
AR7100_ATHRS26_ENET_PHY
)

67 
	#CONFIG_ATHRS26_PHY


	)

68 #ñi‡(
CYGNUM_USE_ENET_PHY
 =
AR7100_ATHRS16_ENET_PHY
)

69 
	#CONFIG_ATHRS16_PHY


	)

71 #îr‹ 
unknown
 
PHY
 
ty≥
 
CYGNUM_USE_ENET_PHY


74 
	~"vsc8601_phy.h
"

75 
	~"vsc73xx.h
"

76 
	~"ùPhy.h
"

77 
	~"πPhy.h
"

78 
	~"adm_phy.h
"

79 
	~"©hr_phy.h
"

80 
	~"©hrs26_phy.h
"

81 
	~"©hrs16_phy.h
"

83 
	#ö_öãºu±
(
x
Ë0

	)

84 
	#scheduÀ_w‹k
(
x
)

	)

85 
	#INIT_WORK
(
x
,
y
)

	)

99 #i‡
deföed
(
CONFIG_VITESSE_PHY
)

101 
	~"vsc_phy.h
"

103 
	#ag7100_phy_is_up
(
unô
Ë
	`vsc_phy_is_up
(unô)

	)

104 
	#ag7100_phy_•ìd
(
unô
Ë
	`vsc_phy_•ìd
(unô)

	)

105 
	#ag7100_phy_is_fdx
(
unô
Ë
	`vsc_phy_is_fdx
(unô)

	)

107 
ölöe
 

108 
	$ag7100_phy_£tup
(
unô
)

110 
	`vsc_phy_£tup
(
unô
);

112 
	}
}

114 
ölöe
 

115 
	$ag7100_gë_lök_°©us
(
unô
, *
lök
, *
fdx
, 
ag7100_phy_•ìd_t
 *
•ìd
)

117  
	`vsc_phy_gë_lök_°©us
(
unô
, 
lök
, 
fdx
, 
•ìd
, 0);

118 
	}
}

120 
ölöe
 

121 
	$ag7100_¥öt_lök_°©us
(
unô
)

123  
	`vsc_phy_¥öt_lök_°©us
(
unô
);

124 
	}
}

126 #ñi‡
deföed
(
CONFIG_VITESSE_8601_PHY
)

128 
	~"vsc8601_phy.h
"

130 
ölöe
 

131 
	$ag7100_phy_£tup
(
unô
)

133  
	`vsc8601_phy_£tup
(
unô
);

134 
	}
}

136 
ölöe
 

137 
	$ag7100_gë_lök_°©us
(
unô
, *
lök
, *
fdx
, 
ag7100_phy_•ìd_t
 *
•ìd
)

139  
	`vsc8601_phy_gë_lök_°©us
(
unô
, 
lök
, 
fdx
, 
•ìd
, 0);

140 
	}
}

142 
ölöe
 

143 
	$ag7100_¥öt_lök_°©us
(
unô
)

145 i‡(0==
unô
)

146  
	`vsc8601_phy_¥öt_lök_°©us
(
unô
);

149 
	}
}

151 #ñi‡
deföed
(
CONFIG_VITESSE_8601_7395_PHY
)

153 
	~"vsc8601_phy.h
"

154 
	~"vsc73xx.h
"

156 
ölöe
 

157 
	$ag7100_phy_£tup
(
unô
)

159 i‡(0==
unô
) {

160  
	`vsc8601_phy_£tup
(
unô
);

162 i‡(1 =
unô
) {

163  
	`vsc73xx_£tup
(
unô
);

167 
	}
}

169 
ölöe
 

170 
	$ag7100_gë_lök_°©us
(
unô
, *
lök
, *
fdx
, 
ag7100_phy_•ìd_t
 *
•ìd
)

172 i‡(0==
unô
)

173  
	`vsc8601_phy_gë_lök_°©us
(
unô
, 
lök
, 
fdx
, 
•ìd
, 0);

176 #ifde‡
CONFIG_AR9100


177 i‡(0 =
	`ö_úq
())

179 i‡(0 =
	`ö_öãºu±
())

182  
	`vsc73xx_gë_lök_°©us
(
unô
, 
lök
, 
fdx
, 
•ìd
, 0);

187 
	}
}

189 
ölöe
 

190 
	$ag7100_¥öt_lök_°©us
(
unô
)

192 i‡(0==
unô
)

193  
	`vsc8601_phy_¥öt_lök_°©us
(
unô
);

195 i‡(0 =
	`ö_öãºu±
())

196  
	`vsc73xx_phy_¥öt_lök_°©us
(
unô
);

198 
	}
}

200 #ñi‡
deföed
(
CONFIG_ICPLUS_PHY
)

202 
	~"ùPhy.h
"

204 
	#ag7100_phy_£tup
(
unô
Ë
	`ù_phySëup
(unô)

	)

205 
	#ag7100_phy_is_up
(
unô
Ë
	`ù_phyIsUp
(unô)

	)

206 
	#ag7100_phy_•ìd
(
unô
Ë
	`ù_phyS≥ed
(unô)

	)

207 
	#ag7100_phy_is_fdx
(
unô
Ë
	`ù_phyIsFuŒDu∂ex
(unô)

	)

209 
ölöe
 

210 
	$ag7100_gë_lök_°©us
(
unô
, *
lök
, *
fdx
, 
ag7100_phy_•ìd_t
 *
•ìd
)

212 *
lök
=
	`ag7100_phy_is_up
(
unô
);

213 *
fdx
=
	`ag7100_phy_is_fdx
(
unô
);

214 *
•ìd
=
	`ag7100_phy_•ìd
(
unô
);

216 
	}
}

218 
ölöe
 

219 
	$ag7100_¥öt_lök_°©us
(
unô
)

222 
	}
}

224 #ñi‡
deföed
(
CONFIG_REALTEK_PHY
)

226 
	~"πPhy.h
"

228 
	#ag7100_phy_£tup
(
unô
Ë
	`π_phySëup
(unô, 0)

	)

229 
	#ag7100_phy_is_up
(
unô
Ë
	`π_phyIsUp
(unô)

	)

230 
	#ag7100_phy_•ìd
(
unô
Ë
	`π_phyS≥ed
(unô)

	)

231 
	#ag7100_phy_is_fdx
(
unô
Ë
	`π_phyIsFuŒDu∂ex
(unô)

	)

233 
ölöe
 

234 
	$ag7100_gë_lök_°©us
(
unô
, *
lök
, *
fdx
, 
ag7100_phy_•ìd_t
 *
•ìd
)

236 *
lök
=
	`ag7100_phy_is_up
(
unô
);

237 *
fdx
=
	`ag7100_phy_is_fdx
(
unô
);

238 *
•ìd
=
	`ag7100_phy_•ìd
(
unô
);

240 
	}
}

242 
ölöe
 

243 
	$ag7100_¥öt_lök_°©us
(
unô
)

246 
	}
}

248 #ñi‡
deföed
(
CONFIG_ADM6996FC_PHY
)

250 
	~"adm_phy.h
"

252 
	#ag7100_phy_£tup
(
unô
Ë
	`adm_phySëup
(unô)

	)

253 
	#ag7100_phy_is_up
(
unô
Ë
	`adm_phyIsUp
(unô)

	)

254 
	#ag7100_phy_•ìd
(
unô
Ë
	`adm_phyS≥ed
(unô)

	)

255 
	#ag7100_phy_is_fdx
(
unô
Ë
	`adm_phyIsFuŒDu∂ex
(unô)

	)

256 
	#ag7100_phy_is_œn_pkt
 
adm_is_œn_pkt


	)

257 
	#ag7100_phy_£t_pkt_p‹t
 
adm_£t_pkt_p‹t


	)

258 
	#ag7100_phy_èg_Àn
 
ADM_VLAN_TAG_SIZE


	)

259 
	#ag7100_phy_gë_cou¡îs
 
adm_gë_cou¡îs


	)

261 
ölöe
 

262 
	$ag7100_gë_lök_°©us
(
unô
, *
lök
, *
fdx
, 
ag7100_phy_•ìd_t
 *
•ìd
)

264 *
lök
=
	`ag7100_phy_is_up
(
unô
);

265 *
fdx
=
	`ag7100_phy_is_fdx
(
unô
);

266 *
•ìd
=
	`ag7100_phy_•ìd
(
unô
);

268 
	}
}

270 
ölöe
 

271 
	$ag7100_¥öt_lök_°©us
(
unô
)

274 
	}
}

276 #ñi‡
deföed
(
CONFIG_ATHRS26_PHY
)

278 
	~"©hrs26_phy.h
"

280 
	#ag7100_phy_io˘l
(
unô
, 
¨gs
Ë
	`©hr_io˘l
(unô,¨gs)

	)

281 
	#ag7100_phy_£tup
(
unô
Ë
	`©hrs26_phy_£tup
 (unô)

	)

282 
	#ag7100_phy_is_up
(
unô
Ë
	`©hrs26_phy_is_up
 (unô)

	)

283 
	#ag7100_phy_•ìd
(
unô
Ë
	`©hrs26_phy_•ìd
 (unô)

	)

284 
	#ag7100_phy_is_fdx
(
unô
Ë
	`©hrs26_phy_is_fdx
 (unô)

	)

285 
	#ag7100_phy_is_œn_pkt
 
©hr_is_œn_pkt


	)

286 
	#ag7100_phy_£t_pkt_p‹t
 
©hr_£t_pkt_p‹t


	)

287 
	#ag7100_phy_èg_Àn
 
ATHR_VLAN_TAG_SIZE


	)

288 
	#ag7100_phy_gë_cou¡îs
 
©hrs26_gë_cou¡îs


	)

290 
ölöe
 

291 
	$ag7100_gë_lök_°©us
(
unô
, *
lök
, *
fdx
, 
ag7100_phy_•ìd_t
 *
•ìd
)

293 *
lök
=
	`ag7100_phy_is_up
(
unô
);

294 *
fdx
=
	`ag7100_phy_is_fdx
(
unô
);

295 *
•ìd
=
	`ag7100_phy_•ìd
(
unô
);

297 
	}
}

299 
ölöe
 

300 
	$ag7100_¥öt_lök_°©us
(
unô
)

303 
	}
}

305 #ñi‡
deföed
(
CONFIG_ATHRS16_PHY
)

307 
	~"©hrs16_phy.h
"

309 
	#ag7100_phy_io˘l
(
unô
, 
¨gs
Ë
	`©hr_io˘l
(unô,¨gs)

	)

310 
	#ag7100_phy_£tup
(
unô
Ë
	`©hrs16_phy_£tup
 (unô)

	)

311 
	#ag7100_phy_is_up
(
unô
Ë
	`©hrs16_phy_is_up
 (unô)

	)

312 
	#ag7100_phy_•ìd
(
unô
Ë
	`©hrs16_phy_•ìd
 (unô)

	)

313 
	#ag7100_phy_is_fdx
(
unô
Ë
	`©hrs16_phy_is_fdx
 (unô)

	)

314 
	#ag7100_phy_is_œn_pkt
 
©hr_is_œn_pkt


	)

315 
	#ag7100_phy_£t_pkt_p‹t
 
©hr_£t_pkt_p‹t


	)

316 
	#ag7100_phy_èg_Àn
 
ATHR_VLAN_TAG_SIZE


	)

317 
	#ag7100_phy_gë_cou¡îs
 
©hrs16_gë_cou¡îs


	)

319 
ölöe
 

320 
	$ag7100_gë_lök_°©us
(
unô
, *
lök
, *
fdx
, 
ag7100_phy_•ìd_t
 *
•ìd
)

322 *
lök
=
	`ag7100_phy_is_up
(
unô
);

323 *
fdx
=
	`ag7100_phy_is_fdx
(
unô
);

324 *
•ìd
=
	`ag7100_phy_•ìd
(
unô
);

326 
	}
}

328 
ölöe
 

329 
	$ag7100_¥öt_lök_°©us
(
unô
)

332 
	}
}

334 #ñi‡
deföed
(
CONFIG_ATHRF1_PHY
)

336 
	~"©hr_phy.h
"

338 
	#ag7100_phy_£tup
(
unô
Ë
	`©hr_phy_£tup
(unô)

	)

339 
	#ag7100_phy_is_up
(
unô
Ë
	`©hr_phy_is_up
(unô)

	)

340 
	#ag7100_phy_•ìd
(
unô
Ë
	`©hr_phy_•ìd
(unô)

	)

341 
	#ag7100_phy_is_fdx
(
unô
Ë
	`©hr_phy_is_fdx
(unô)

	)

342 
	#ag7100_phy_is_œn_pkt
 
©hr_is_œn_pkt


	)

343 
	#ag7100_phy_£t_pkt_p‹t
 
©hr_£t_pkt_p‹t


	)

344 
	#ag7100_phy_èg_Àn
 
ATHR_VLAN_TAG_SIZE


	)

345 
	#ag7100_phy_gë_cou¡îs
 
©hr_gë_cou¡îs


	)

347 
ölöe
 

348 
	$ag7100_gë_lök_°©us
(
unô
, *
lök
, *
fdx
, 
ag7100_phy_•ìd_t
 *
•ìd
)

350 #i‡
	`deföed
(
CONFIG_MACH_AR7100_PB47
)

352 
	`©hr_phy_°©us
(
unô
, 
lök
, 
fdx
, 
•ìd
);

356 *
lök
=
	`ag7100_phy_is_up
(
unô
);

357 i‡(*
lök
 == 0)

360 *
fdx
=
	`ag7100_phy_is_fdx
(
unô
);

361 *
•ìd
=
	`ag7100_phy_•ìd
(
unô
);

364 
	}
}

366 
ölöe
 

367 
	$ag7100_¥öt_lök_°©us
(
unô
)

370 
	}
}

373 #îr‹ 
unknown
 
PHY
 
ty≥
 PHY 
nŸ
 
c⁄figuªd
 
ö
 
c⁄fig
.
h


	@ag7100/ag7100_trc.h

18 #i‚de‡
_AG7100_TRC_h


19 
	#_AG7100_TRC_h


	)

21 
	#TRC_SIZE
 256

	)

24 
u32
 
	munô
;

25 
	mlöe
;

26 
u32
 
	mvÆ
;

27 
	mcommít
[32];

29 }
	tag7100_åc_íåy_t
;

32 
	mcur
;

33 
ag7100_åc_íåy_t
 
	míåy
[
TRC_SIZE
];

34 }
	tag7100_åc_t
;

36 #ifde‡
CONFIG_AG7100_USE_TRC


38 
	#ag7100_åc_öô
() do { \

39 
i
; \

40 
	`¥ötk
(
MODULE_NAME
": TRACE ENABLED\n"); \

41 
mac
->
tb
.
cur
 = 0; \

42 
i
 = 0; i < 
TRC_SIZE
; i++) { \

43 
mac
->
tb
.
íåy
[
i
].
löe
 = 0; \

44 
mac
->
tb
.
íåy
[
i
].
vÆ
 = 0x7f; \

45 
mac
->
tb
.
íåy
[
i
].
commít
[0] = '\0'; \

47 }0);

	)

49 
	#ag7100_åc_√w
(
_x
,
_y
) do { \

50 
Êags
; \

51 
	`•ö_lock_úqßve
(&
mac
->
mac_lock
, 
Êags
); \

52 
mac
->
tb
.
íåy
[mac->tb.
cur
].
unô
 = mac->
mac_unô
; \

53 
mac
->
tb
.
íåy
[mac->tb.
cur
].
löe
 = 
__LINE__
; \

54 
mac
->
tb
.
íåy
[mac->tb.
cur
].
vÆ
 = (
u32
)(
_x
); \

55 i‡(
_y
) \

56 
	`°∫˝y
(
mac
->
tb
.
íåy
[mac->tb.
cur
].
commít
, (
_y
), (mac->tb.entry[mac->tb.cur].comment)); \

58 
mac
->
tb
.
íåy
[mac->tb.
cur
].
commít
[0] = '\0'; \

59 i‡(
mac
->
tb
.
cur
 =(
TRC_SIZE
 - 1)) \

60 
mac
->
tb
.
cur
 = 0; \

62 
mac
->
tb
.
cur
 ++; \

63 
	`•ö_u∆ock_úqª°‹e
(&
mac
->
mac_lock
, 
Êags
); \

64 }0);

	)

66 
	#ag7100_åc
 
ag7100_åc_√w


	)

68 
	#ag7100_åc_dump
() do { \

69 
Êags
; \

70 
	`•ö_lock_úqßve
(&
mac
->
mac_lock
, 
Êags
); \

71 
i
, 
cur
 = 
mac
->
tb
.cur; \

72 
	`¥ötk
(
MODULE_NAME
": hód %dÅaû %d\n", 
mac
->
mac_txrög
.
rög_hód
, mac->mac_txrög.
rög_èû
);\

73 
i
 = 0; i < 
TRC_SIZE
; i++) { \

74 i‡(
mac
->
tb
.
íåy
[
cur
].
löe
) { \

75 
	`¥ötk
("%d %d %08x %s\n", \

76 
mac
->
tb
.
íåy
[
cur
].
unô
, \

77 
mac
->
tb
.
íåy
[
cur
].
löe
, \

78 
mac
->
tb
.
íåy
[
cur
].
vÆ
, \

79 
mac
->
tb
.
íåy
[
cur
].
commít
); \

80 
mac
->
tb
.
íåy
[
cur
].
löe
 = 0; \

82 i‡(
cur
 =(
TRC_SIZE
 - 1)) \

83 
cur
 = 0; \

85 
cur
++ ; \

87 
	`•ö_u∆ock_úqª°‹e
(&
mac
->
mac_lock
, 
Êags
); \

88 }0);

	)

92 
	#ag7100_åc_öô
()

	)

93 
	#ag7100_åc_√w
(
_x
,
_y
)

	)

94 
	#ag7100_åc
(
_x
, 
_y
)

	)

95 
	#ag7100_åc_dump
()

	)

	@ag7100/athr_phy.h

18 #i‚de‡
_ATHR_PHY_H


19 
	#_ATHR_PHY_H


	)

25 
	#ATHR_PHY_CONTROL
 0

	)

26 
	#ATHR_PHY_STATUS
 1

	)

27 
	#ATHR_PHY_ID1
 2

	)

28 
	#ATHR_PHY_ID2
 3

	)

29 
	#ATHR_AUTONEG_ADVERT
 4

	)

30 
	#ATHR_LINK_PARTNER_ABILITY
 5

	)

31 
	#ATHR_AUTONEG_EXPANSION
 6

	)

32 
	#ATHR_NEXT_PAGE_TRANSMIT
 7

	)

33 
	#ATHR_LINK_PARTNER_NEXT_PAGE
 8

	)

34 
	#ATHR_1000BASET_CONTROL
 9

	)

35 
	#ATHR_1000BASET_STATUS
 10

	)

36 
	#ATHR_PHY_SPEC_CONTROL
 16

	)

37 
	#ATHR_PHY_SPEC_STATUS
 17

	)

38 
	#ATHR_INTR_STATUS
 19

	)

39 
	#ATHR_EXT_PHY_SPEC_CONTROL
 20

	)

42 
	#ATHR_CTRL_SOFTWARE_RESET
 0x8000

	)

43 
	#ATHR_CTRL_SPEED_LSB
 0x2000

	)

44 
	#ATHR_CTRL_AUTONEGOTIATION_ENABLE
 0x1000

	)

45 
	#ATHR_CTRL_RESTART_AUTONEGOTIATION
 0x0200

	)

46 
	#ATHR_CTRL_SPEED_FULL_DUPLEX
 0x0100

	)

47 
	#ATHR_CTRL_SPEED_MSB
 0x0040

	)

49 
	#ATHR_RESET_DONE
(
phy_c⁄åﬁ
) \

50 (((
phy_c⁄åﬁ
Ë& (
ATHR_CTRL_SOFTWARE_RESET
)Ë=0)

	)

53 
	#ATHR_STATUS_AUTO_NEG_DONE
 0x0020

	)

54 
	#ATHR_STATUS_LINK_STATUS
 0x0004

	)

56 
	#ATHR_AUTONEG_DONE
(
ù_phy_°©us
) \

57 (((
ù_phy_°©us
) & \

58 (
ATHR_STATUS_AUTO_NEG_DONE
)) == \

59 (
ATHR_STATUS_AUTO_NEG_DONE
))

	)

62 
	#ATHR_LINK_100BASETX_FULL_DUPLEX
 0x0100

	)

63 
	#ATHR_LINK_100BASETX
 0x0080

	)

64 
	#ATHR_LINK_10BASETX_FULL_DUPLEX
 0x0040

	)

65 
	#ATHR_LINK_10BASETX
 0x0020

	)

68 
	#ATHR_ADVERTISE_NEXT_PAGE
 0x8000

	)

69 
	#ATHR_ADVERTISE_ASYM_PAUSE
 0x0800

	)

70 
	#ATHR_ADVERTISE_PAUSE
 0x0400

	)

71 
	#ATHR_ADVERTISE_100FULL
 0x0100

	)

72 
	#ATHR_ADVERTISE_100HALF
 0x0080

	)

73 
	#ATHR_ADVERTISE_10FULL
 0x0040

	)

74 
	#ATHR_ADVERTISE_10HALF
 0x0020

	)

76 
	#ATHR_ADVERTISE_ALL
 (
ATHR_ADVERTISE_10HALF
 | 
ATHR_ADVERTISE_10FULL
 | \

77 
ATHR_ADVERTISE_100HALF
 | 
ATHR_ADVERTISE_100FULL
)

	)

80 
	#ATHR_ADVERTISE_1000FULL
 0x0200

	)

81 
	#ATHR_ADVERTISE_1000HALF
 0x0100

	)

84 
	#ATHR_STATUS_SPEED_MASK
 0xC000

	)

85 
	#ATHR_STATUS_SPEED_SHIFT
 14

	)

86 
	#ATHR_STATUS_FULL_DUPLEX
 0x2000

	)

87 
	#ATHR_STATUS_RESOLVED
 0x0800

	)

88 
	#ATHR_STATUS_LINK_UP
 0x0400

	)

89 
	#ATHR_STATUS_SMARTSPEED_DOWN
 0x0020

	)

91 
©hr_phy_is_up
(
unô
);

92 
©hr_phy_is_fdx
(
unô
);

93 
©hr_phy_•ìd
(
unô
);

94 
©hr_phy_£tup
(
unô
);

	@ag7100/athrf1_phy.c

15 #ifde‡
__BDI


16 
	~"bdi.h
"

18 #ifde‡
__ECOS


19 #i‡
deföed
(
CYGNUM_USE_ENET_VERBOSE
)

20 #unde‡
VERBOSE


21 
	#VERBOSE
 
CYGNUM_USE_ENET_VERBOSE


	)

23 
	#VERBOSE
 0

	)

25 
	#¥ötk
 
DEBUG_PRINTF


	)

26 
	#udñay
 
A_UDELAY


	)

27 
	#mdñay
(
_x
Ë
	`udñay
((_x)*1000)

	)

29 
	~<löux/kî√l.h
>

30 
	~<asm/dñay.h
>

31 
	~"¨7100.h
"

32 
	#mdñay
(
_x
Ë
	`udñay
((_x)*1000)

	)

36 #i‚de‡
VERBOSE


37 
	#VERBOSE
 0

	)

41 
	~<löux/kî√l.h
>

42 
	~<löux/c⁄fig.h
>

43 
	~<löux/ty≥s.h
>

44 
	~<löux/√tdevi˚.h
>

45 
	~<löux/ëhîdevi˚.h
>

46 
	~<löux/dñay.h
>

49 
	~"ag7100.h
"

50 
	~"ag7100_phy.h
"

52 
	#MODULE_NAME
 "ATHRF1"

	)

55 
	mis_íë_p‹t
;

56 
	mmac_unô
;

57 
	mphy_addr
;

58 }
	t©hr_phy_t
;

60 
©hr_phy_t
 
	gphy_öfo
[] = {

61 #ifde‡
CONFIG_CUS109_F1E_PHY


62 {
is_íë_p‹t
: 1,

63 
mac_unô
 : 0,

64 
phy_addr
 : 0x00},

66 {
is_íë_p‹t
: 1,

67 
mac_unô
 : 1,

68 
phy_addr
 : 0x01}

69 #ñi‡
CONFIG_MACH_AR7100_PB47


70 {
is_íë_p‹t
: 1,

71 
mac_unô
 : 1,

72 
phy_addr
 : 0x00}

74 {
is_íë_p‹t
: 1,

75 
mac_unô
 : 0,

76 
phy_addr
 : 0x00}

80 
©hr_phy_t
 *

81 
	$©hr_phy_föd
(
unô
)

83 
i
;

84 
©hr_phy_t
 *
phy
;

86 
i
 = 0; i < (
phy_öfo
)/(
©hr_phy_t
); i++) {

87 
phy
 = &
phy_öfo
[
i
];

89 i‡(
phy
->
is_íë_p‹t
 && (phy->
mac_unô
 =
unô
))

90  
phy
;

93  
NULL
;

94 
	}
}

97 
	$©hr_phy_£tup
(
unô
)

99 
©hr_phy_t
 *
phy
 = 
	`©hr_phy_föd
(
unô
);

100 
uöt16_t
 
phyHwSètus
;

101 
uöt16_t
 
timeout
;

103 i‡(!
phy
) {

104 
	`¥ötk
(
MODULE_NAME
": \nNÿphy found f‹ unô %d\n", 
unô
);

114 
	`phy_ªg_wrôe
(
unô
, 
phy
->
phy_addr
, 
ATHR_AUTONEG_ADVERT
,

115 
ATHR_ADVERTISE_ALL
);

117 
	`phy_ªg_wrôe
(
unô
, 
phy
->
phy_addr
, 
ATHR_1000BASET_CONTROL
,

118 
ATHR_ADVERTISE_1000FULL
|
ATHR_ADVERTISE_1000HALF
);

120 #ifde‡
CONFIG_CUS109_F1E_PHY


122 
	`phy_ªg_wrôe
(
unô
, 
phy
->
phy_addr
, 0x1D, 0x0);

123 
	`phy_ªg_wrôe
(
unô
, 
phy
->
phy_addr
, 0x1E, 0x34E);

127 
	`phy_ªg_wrôe
(
unô
, 
phy
->
phy_addr
, 0x1D, 0x5);

128 #ifde‡
CONFIG_CUS109_F1E_PHY


129 
	`phy_ªg_wrôe
(
unô
, 
phy
->
phy_addr
, 0x1E, 0x3C47);

131 
	`phy_ªg_wrôe
(
unô
, 
phy
->
phy_addr
, 0x1E, 0x3D47);

135 
	`phy_ªg_wrôe
(
unô
, 
phy
->
phy_addr
, 
ATHR_PHY_CONTROL
,

136 
ATHR_CTRL_AUTONEGOTIATION_ENABLE


137 | 
ATHR_CTRL_SOFTWARE_RESET
);

139 
	`mdñay
(500);

146 
timeout
=20;Åimeout; 
	`mdñay
(150),Åimeout--) {

147 
phyHwSètus
 = 
	`phy_ªg_ªad
(
unô
, 
phy
->
phy_addr
, 
ATHR_PHY_CONTROL
);

149 i‡(!
	`ATHR_RESET_DONE
(
phyHwSètus
))

152 
phyHwSètus
 = 
	`phy_ªg_ªad
(
unô
, 
phy
->
phy_addr
, 
ATHR_PHY_STATUS
);

153 i‡(
	`ATHR_AUTONEG_DONE
(
phyHwSètus
)) {

154 
	`¥ötk
(
MODULE_NAME
": P‹à%d, Neg Suc˚ss\n", 
unô
);

158 i‡(
timeout
 == 0)

159 
	`¥ötk
(
MODULE_NAME
": P‹à%d, NegŸüti⁄Åimeout\n", 
unô
);

161 
	`¥ötk
(
MODULE_NAME
": unô %dÖhyádd∏%x ", 
unô
, 
phy
->
phy_addr
);

162 
	`¥ötk
(
MODULE_NAME
":Ñeg0 %x\n", 
	`ag7100_mii_ªad
(0, 
phy
->
phy_addr
, 0));

163 
	}
}

167 
	$©hr_phy_is_up
(
unô
)

169 
°©us
;

170 
©hr_phy_t
 *
phy
 = 
	`©hr_phy_föd
(
unô
);

172 i‡(!
phy
)

175 
°©us
 = 
	`ag7100_mii_ªad
(
phy
->
mac_unô
,Öhy->
phy_addr
, 
ATHR_PHY_SPEC_STATUS
);

177 i‡(
°©us
 & 
ATHR_STATUS_LINK_UP
)

180 
	}
}

183 
	$©hr_phy_is_fdx
(
unô
)

185 
°©us
;

186 
©hr_phy_t
 *
phy
 = 
	`©hr_phy_föd
(
unô
);

187 
ii
 = 200;

189 i‡(!
phy
)

193 
°©us
 = 
	`ag7100_mii_ªad
(
phy
->
mac_unô
,Öhy->
phy_addr
, 
ATHR_PHY_SPEC_STATUS
);

194 
	`mdñay
(10);

195 } (!(
°©us
 & 
ATHR_STATUS_RESOLVED
)Ë&& --
ii
);

196 
°©us
 = !(!(°©u†& 
ATHR_STATUS_FULL_DUPLEX
));

198  (
°©us
);

199 
	}
}

202 
	$©hr_phy_•ìd
(
unô
)

204 
°©us
;

205 
©hr_phy_t
 *
phy
 = 
	`©hr_phy_föd
(
unô
);

206 
ii
 = 200;

208 i‡(!
phy
)

212 
°©us
 = 
	`ag7100_mii_ªad
(
phy
->
mac_unô
,Öhy->
phy_addr
, 
ATHR_PHY_SPEC_STATUS
);

213 
	`mdñay
(10);

214 }(!(
°©us
 & 
ATHR_STATUS_RESOLVED
)Ë&& --
ii
);

216 
°©us
 = ((°©u†& 
ATHR_STATUS_SPEED_MASK
Ë>> 
ATHR_STATUS_SPEED_SHIFT
);

218 
°©us
) {

220  
AG7100_PHY_SPEED_10T
;

222  
AG7100_PHY_SPEED_100TX
;

224  
AG7100_PHY_SPEED_1000T
;

226 
	`¥ötk
(
MODULE_NAME
": Unkow¿•ìdÑód (phy_add∏%d unô %d)!\n", 
phy
->
phy_addr
,Öhy->
mac_unô
);

229 
	}
}

232 
	$©hr_phy_°©us
(
unô
, *
lök
, *
fdx
, *
•ìd
)

234 
©hr_phy_t
 *
phy
 = 
	`©hr_phy_föd
(
unô
);

235 
°©us
;

236 
ii
 = 100;

238 i‡(!
phy
) {

239 *
lök
 = 0;

244 
°©us
 = 
	`ag7100_mii_ªad
(
phy
->
mac_unô
,Öhy->
phy_addr
, 
ATHR_PHY_SPEC_STATUS
);

245 
	`mdñay
(10);

246 }(!(
°©us
 & 
ATHR_STATUS_RESOLVED
)Ë&& --
ii
);

248 i‡(
ii
 == 0) {

249 *
lök
 = 0;

252 *
lök
 = !(!(
°©us
 & 
ATHR_STATUS_LINK_UP
));

253 *
fdx
 = !(!(
°©us
 & 
ATHR_STATUS_FULL_DUPLEX
));

254 *
•ìd
 = (
°©us
 & 
ATHR_STATUS_SPEED_MASK
Ë>> 
ATHR_STATUS_SPEED_SHIFT
;

255 i‡(
°©us
 & 
ATHR_STATUS_SMARTSPEED_DOWN
)

256 
	`¥ötk
(
MODULE_NAME
": Sm¨tS≥ed Downgøde! (unô %d)\n", 
phy
->
mac_unô
);

260 
	}
}

	@ag7100/athrs16_phy.c

15 
	~<löux/c⁄fig.h
>

16 
	~<löux/ty≥s.h
>

17 
	~<löux/√tdevi˚.h
>

18 
	~<löux/ëhîdevi˚.h
>

19 
	~<löux/dñay.h
>

20 
	~"ag7100_phy.h
"

21 
	~"ag7100.h
"

23 #ifde‡
FULL_FEATURE


24 * 
ssdk_mdio_£t
;

25 * 
ssdk_mdio_gë
;

28 #ifde‡
FULL_FEATURE


29 * 
ssdk_mdio_£t
;

30 * 
ssdk_mdio_gë
;

35 
	mPHY_SRCPORT_INFO
,

36 
	mPHY_PORTINFO_SIZE
,

37 } 
	tPHY_CAP_TYPE
;

40 
	mPHY_SRCPORT_NONE
,

41 
	mPHY_SRCPORT_VLANTAG
,

42 
	mPHY_SRCPORT_TRAILER
,

43 } 
	tPHY_SRCPORT_TYPE
;

45 
	#DRV_LOG
(
DBG_SW
, 
X0
, 
X1
, 
X2
, 
X3
, 
X4
, 
X5
, 
X6
)

	)

46 
	#DRV_MSG
(
x
,
a
,
b
,
c
,
d
,
e
,
f
)

	)

47 
	#DRV_PRINT
(
DBG_SW
,
X
)

	)

49 
	#ATHR_LAN_PORT_VLAN
 1

	)

50 
	#ATHR_WAN_PORT_VLAN
 2

	)

54 #i‡
deföed
 (
CONFIG_PORT0_AS_SWITCH
)

55 
	#ENET_UNIT_LAN
 0

	)

56 
	#ENET_UNIT_WAN
 1

	)

57 
	#CFG_BOARD_AP96
 1

	)

59 
	#ENET_UNIT_LAN
 1

	)

60 
	#ENET_UNIT_WAN
 0

	)

61 
	#CFG_BOARD_PB45
 1

	)

64 
	#TRUE
 1

	)

65 
	#FALSE
 0

	)

67 
	#ATHR_PHY0_ADDR
 0x0

	)

68 
	#ATHR_PHY1_ADDR
 0x1

	)

69 
	#ATHR_PHY2_ADDR
 0x2

	)

70 
	#ATHR_PHY3_ADDR
 0x3

	)

71 
	#ATHR_PHY4_ADDR
 0x4

	)

72 
	#ATHR_IND_PHY
 4

	)

74 
	#MODULE_NAME
 "ATHRS16"

	)

80 
BOOL
 
	misE√tP‹t
;

81 
BOOL
 
	misPhyAlive
;

82 
	mëhUnô
;

83 
uöt32_t
 
	mphyBa£
;

84 
uöt32_t
 
	mphyAddr
;

85 
uöt32_t
 
	mVLANTabÀSëtög
;

86 } 
	t©hrPhyInfo_t
;

91 
©hrPhyInfo_t
 
	g©hrPhyInfo
[] = {

92 {
TRUE
,

93 
FALSE
,

94 
ENET_UNIT_LAN
,

96 
ATHR_PHY0_ADDR
,

97 
ATHR_LAN_PORT_VLAN


100 {
TRUE
,

101 
FALSE
,

102 
ENET_UNIT_LAN
,

104 
ATHR_PHY1_ADDR
,

105 
ATHR_LAN_PORT_VLAN


108 {
TRUE
,

109 
FALSE
,

110 
ENET_UNIT_LAN
,

112 
ATHR_PHY2_ADDR
,

113 
ATHR_LAN_PORT_VLAN


116 {
TRUE
,

117 
FALSE
,

118 
ENET_UNIT_LAN
,

120 
ATHR_PHY3_ADDR
,

121 
ATHR_LAN_PORT_VLAN


124 {
TRUE
,

125 
FALSE
,

126 
ENET_UNIT_WAN
,

128 
ATHR_PHY4_ADDR
,

129 
ATHR_LAN_PORT_VLAN


132 {
FALSE
,

133 
TRUE
,

134 
ENET_UNIT_LAN
,

137 
ATHR_LAN_PORT_VLAN


141 
uöt8_t
 
	g©hr16_öô_Êag
 = 0;

144 
	#ATHR_PHY_MAX
 5

	)

147 
	#ATHR_ID_MIN
 0

	)

148 
	#ATHR_ID_MAX
 (
ATHR_PHY_MAX
-1)

	)

151 
	#ATHR_IS_ENET_PORT
(
phyUnô
Ë(
©hrPhyInfo
[phyUnô].
isE√tP‹t
)

	)

152 
	#ATHR_IS_PHY_ALIVE
(
phyUnô
Ë(
©hrPhyInfo
[phyUnô].
isPhyAlive
)

	)

153 
	#ATHR_ETHUNIT
(
phyUnô
Ë(
©hrPhyInfo
[phyUnô].
ëhUnô
)

	)

154 
	#ATHR_PHYBASE
(
phyUnô
Ë(
©hrPhyInfo
[phyUnô].
phyBa£
)

	)

155 
	#ATHR_PHYADDR
(
phyUnô
Ë(
©hrPhyInfo
[phyUnô].
phyAddr
)

	)

156 
	#ATHR_VLAN_TABLE_SETTING
(
phyUnô
Ë(
©hrPhyInfo
[phyUnô].
VLANTabÀSëtög
)

	)

159 
	#ATHR_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
) \

160 (
	`ATHR_IS_ENET_PORT
(
phyUnô
) && \

161 
	`ATHR_ETHUNIT
(
phyUnô
Ë=(
ëhUnô
))

	)

163 
	#ATHR_IS_WAN_PORT
(
phyUnô
Ë(!(
	`ATHR_ETHUNIT
’hyUnô)==
ENET_UNIT_LAN
))

	)

166 
BOOL
 
©hrs16_phy_is_lök_Æive
(
phyUnô
);

167 
uöt32_t
 
©hrs16_ªg_ªad
(uöt32_à
ªg_addr
);

168 
©hrs16_ªg_wrôe
(
uöt32_t
 
ªg_addr
, uöt32_à
ªg_vÆ
);

170 
	$phy_mode_£tup
()

172 
	`¥ötk
("phy_mode_setup\n");

175 
	`phy_ªg_wrôe
(
	`ATHR_PHYBASE
(
ATHR_IND_PHY
), 
	`ATHR_PHYADDR
(ATHR_IND_PHY), 29, 18);

176 
	`phy_ªg_wrôe
(
	`ATHR_PHYBASE
(
ATHR_IND_PHY
), 
	`ATHR_PHYADDR
(ATHR_IND_PHY), 30, 0x480c);

179 
	`phy_ªg_wrôe
(
	`ATHR_PHYBASE
(
ATHR_IND_PHY
), 
	`ATHR_PHYADDR
(ATHR_IND_PHY), 29, 0);

180 
	`phy_ªg_wrôe
(
	`ATHR_PHYBASE
(
ATHR_IND_PHY
), 
	`ATHR_PHYADDR
(ATHR_IND_PHY), 30, 0x824e);

183 
	`phy_ªg_wrôe
(
	`ATHR_PHYBASE
(
ATHR_IND_PHY
), 
	`ATHR_PHYADDR
(ATHR_IND_PHY), 29, 5);

184 
	`phy_ªg_wrôe
(
	`ATHR_PHYBASE
(
ATHR_IND_PHY
), 
	`ATHR_PHYADDR
(ATHR_IND_PHY), 30, 0x3d47);

186 
	}
}

188 
	$©hrs16_ªg_öô
()

192 i‡(
©hr16_öô_Êag
)

196 #i‡
CFG_BOARD_PB45


197 
	`©hrs16_ªg_wrôe
(0x208, 0x2fd0001);

198 
	`©hrs16_ªg_wrôe
(0x108, 0x2be0001);

199 #ñi‡
CFG_BOARD_AP96


200 
	`©hrs16_ªg_wrôe
(0x8, 0x012e1bea);

203 
	`©hrs16_ªg_wrôe
(0x100, 0x7e);

204 
	`©hrs16_ªg_wrôe
(0x200, 0x200);

205 
	`©hrs16_ªg_wrôe
(0x300, 0x200);

206 
	`©hrs16_ªg_wrôe
(0x400, 0x200);

207 
	`©hrs16_ªg_wrôe
(0x500, 0x200);

208 #i‡
CFG_BOARD_PB45


209 
	`©hrs16_ªg_wrôe
(0x600, 0x200);

210 #ñi‡
CFG_BOARD_AP96


211 
	`©hrs16_ªg_wrôe
(0x600, 0x0);

214 
	`©hrs16_ªg_wrôe
(0x2c, 0x003f003f);

216 #i‡
	`deföed
(
CONFIG_VLAN_8021Q
Ë|| deföed(
CONFIG_VLAN_8021Q_MODULE
)

217 #ifde‡
HEADER_EN


218 
	`©hrs16_ªg_wrôe
(0x104, 0x6804);

220 
	`©hrs16_ªg_wrôe
(0x104, 0x6004);

223 
	`©hrs16_ªg_wrôe
(0x204, 0x6004);

224 
	`©hrs16_ªg_wrôe
(0x304, 0x6004);

225 
	`©hrs16_ªg_wrôe
(0x404, 0x6004);

226 
	`©hrs16_ªg_wrôe
(0x504, 0x6004);

227 
	`©hrs16_ªg_wrôe
(0x604, 0x6004);

229 #ifde‡
HEADER_EN


230 
	`©hrs16_ªg_wrôe
(0x104, 0x4804);

232 
	`©hrs16_ªg_wrôe
(0x104, 0x4004);

236 #ifde‡
FULL_FEATURE


237 
ssdk_mdio_£t
 = 
phy_ªg_wrôe
;

238 
ssdk_mdio_gë
 = 
phy_ªg_ªad
;

239 
	`ssdk_ªdu˚d_öô
(0, 2, 1);

241 
	`¥ötk
("athrs16_reg_init complete.\n");

243 
©hr16_öô_Êag
 = 1;

244 
	}
}

254 
BOOL


255 
	$©hrs16_phy_is_lök_Æive
(
phyUnô
)

257 
uöt16_t
 
phyHwSètus
;

258 
uöt32_t
 
phyBa£
;

259 
uöt32_t
 
phyAddr
;

261 
phyBa£
 = 
	`ATHR_PHYBASE
(
phyUnô
);

262 
phyAddr
 = 
	`ATHR_PHYADDR
(
phyUnô
);

264 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
ATHR_PHY_SPEC_STATUS
);

266 i‡(
phyHwSètus
 & 
ATHR_STATUS_LINK_PASS
)

267  
TRUE
;

269  
FALSE
;

270 
	}
}

284 
BOOL


285 
	$©hrs16_phy_£tup
(
ëhUnô
)

287 
phyUnô
;

288 
uöt16_t
 
phyHwSètus
;

289 
uöt16_t
 
timeout
;

290 
liveLöks
 = 0;

291 
uöt32_t
 
phyBa£
 = 0;

292 
BOOL
 
foundPhy
 = 
FALSE
;

293 
uöt32_t
 
phyAddr
 = 0;

298 
phyUnô
=0;ÖhyUnô < 
ATHR_PHY_MAX
;ÖhyUnit++) {

299 i‡(!
	`ATHR_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

303 
foundPhy
 = 
TRUE
;

304 
phyBa£
 = 
	`ATHR_PHYBASE
(
phyUnô
);

305 
phyAddr
 = 
	`ATHR_PHYADDR
(
phyUnô
);

307 
	`phy_ªg_wrôe
(
phyBa£
, 
phyAddr
, 
ATHR_AUTONEG_ADVERT
,

308 
ATHR_ADVERTISE_ALL
);

310 
	`phy_ªg_wrôe
(
phyBa£
, 
phyAddr
, 
ATHR_1000BASET_CONTROL
,

311 
ATHR_ADVERTISE_1000FULL
);

314 
	`phy_ªg_wrôe
(
phyBa£
, 
phyAddr
, 
ATHR_PHY_CONTROL
,

315 
ATHR_CTRL_AUTONEGOTIATION_ENABLE


316 | 
ATHR_CTRL_SOFTWARE_RESET
);

320 i‡(!
foundPhy
) {

321  
FALSE
;

328 
	`mdñay
(1000);

336 
phyUnô
=0; (phyUnô < 
ATHR_PHY_MAX
) ;ÖhyUnit++) {

337 i‡(!
	`ATHR_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

341 
timeout
=20;

343 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
ATHR_PHY_CONTROL
);

345 i‡(
	`ATHR_RESET_DONE
(
phyHwSètus
)) {

346 
	`DRV_PRINT
(
DRV_DEBUG_PHYSETUP
,

347 ("P‹à%d, Neg Suc˚ss\n", 
phyUnô
));

350 i‡(
timeout
 == 0) {

351 
	`DRV_PRINT
(
DRV_DEBUG_PHYSETUP
,

352 ("P‹à%d, Negogüti⁄Åimeout\n", 
phyUnô
));

355 i‡(--
timeout
 == 0) {

356 
	`DRV_PRINT
(
DRV_DEBUG_PHYSETUP
,

357 ("P‹à%d, Negogüti⁄Åimeout\n", 
phyUnô
));

361 
	`mdñay
(150);

374 
phyUnô
=0;ÖhyUnô < 
ATHR_PHY_MAX
;ÖhyUnit++) {

375 i‡(!
	`ATHR_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

379 i‡(
	`©hrs16_phy_is_lök_Æive
(
phyUnô
)) {

380 
liveLöks
++;

381 
	`ATHR_IS_PHY_ALIVE
(
phyUnô
Ë
TRUE
;

383 
	`ATHR_IS_PHY_ALIVE
(
phyUnô
Ë
FALSE
;

386 
	`DRV_PRINT
(
DRV_DEBUG_PHYSETUP
,

388 
ëhUnô
,

389 
	`phy_ªg_ªad
(
	`ATHR_PHYBASE
(
phyUnô
),

390 
	`ATHR_PHYADDR
(
phyUnô
),

391 
ATHR_PHY_SPEC_STATUS
)));

394  (
liveLöks
 > 0);

395 
	}
}

407 
	$©hrs16_phy_is_fdx
(
ëhUnô
)

409 
phyUnô
;

410 
uöt32_t
 
phyBa£
;

411 
uöt32_t
 
phyAddr
;

412 
uöt16_t
 
phyHwSètus
;

413 
ii
 = 200;

415 i‡(
ëhUnô
 =
ENET_UNIT_LAN
)

416  
TRUE
;

418 
phyUnô
=0;ÖhyUnô < 
ATHR_PHY_MAX
;ÖhyUnit++) {

419 i‡(!
	`ATHR_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

423 i‡(
	`©hrs16_phy_is_lök_Æive
(
phyUnô
)) {

425 
phyBa£
 = 
	`ATHR_PHYBASE
(
phyUnô
);

426 
phyAddr
 = 
	`ATHR_PHYADDR
(
phyUnô
);

429 
phyHwSètus
 = 
	`ag7100_mii_ªad
 (
phyBa£
, 
phyAddr
,

430 
ATHR_PHY_SPEC_STATUS
);

431 if(
phyHwSètus
 & 
ATHR_STATUS_RESOVLED
)

433 
	`mdñay
(10);

434 } --
ii
);

436 i‡(
phyHwSètus
 & 
ATHER_STATUS_FULL_DEPLEX
)

437  
TRUE
;

441  
FALSE
;

442 
	}
}

456 
	$©hrs16_phy_•ìd
(
ëhUnô
)

458 
phyUnô
;

459 
uöt16_t
 
phyHwSètus
;

460 
uöt32_t
 
phyBa£
;

461 
uöt32_t
 
phyAddr
;

462 
ii
 = 200;

464 i‡(
ëhUnô
 =
ENET_UNIT_LAN
)

465  
AG7100_PHY_SPEED_1000T
;

467 
phyUnô
=0;ÖhyUnô < 
ATHR_PHY_MAX
;ÖhyUnit++) {

468 i‡(!
	`ATHR_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

472 i‡(
	`©hrs16_phy_is_lök_Æive
(
phyUnô
)) {

474 
phyBa£
 = 
	`ATHR_PHYBASE
(
phyUnô
);

475 
phyAddr
 = 
	`ATHR_PHYADDR
(
phyUnô
);

477 
phyHwSètus
 = 
	`ag7100_mii_ªad
(
phyBa£
, 
phyAddr
,

478 
ATHR_PHY_SPEC_STATUS
);

479 if(
phyHwSètus
 & 
ATHR_STATUS_RESOVLED
)

481 
	`mdñay
(10);

482 } --
ii
);

484 
phyHwSètus
 = (’hyHwSètu†& 
ATHER_STATUS_LINK_MASK
) >>

485 
ATHER_STATUS_LINK_SHIFT
);

487 
phyHwSètus
) {

489  
AG7100_PHY_SPEED_10T
;

491  
AG7100_PHY_SPEED_100TX
;

493  
AG7100_PHY_SPEED_1000T
;

495 
	`¥ötk
("Unkown speedÑead!\n");

500  
AG7100_PHY_SPEED_10T
;

501 
	}
}

516 
	$©hrs16_phy_is_up
(
ëhUnô
)

518 
phyUnô
;

519 
uöt16_t
 
phyHwSètus
, 
phyHwC⁄åﬁ
;

520 
©hrPhyInfo_t
 *
œ°Sètus
;

521 
lökCou¡
 = 0;

522 
lo°Löks
 = 0;

523 
gaöedLöks
 = 0;

524 
uöt32_t
 
phyBa£
;

525 
uöt32_t
 
phyAddr
;

527 
phyUnô
=0;ÖhyUnô < 
ATHR_PHY_MAX
;ÖhyUnit++) {

528 i‡(!
	`ATHR_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

532 
phyBa£
 = 
	`ATHR_PHYBASE
(
phyUnô
);

533 
phyAddr
 = 
	`ATHR_PHYADDR
(
phyUnô
);

535 
œ°Sètus
 = &
©hrPhyInfo
[
phyUnô
];

537 i‡(
œ°Sètus
->
isPhyAlive
) {

538 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
ATHR_PHY_SPEC_STATUS
);

541 i‡(
phyHwSètus
 & 
ATHR_STATUS_LINK_PASS
) {

542 
lökCou¡
++;

544 
lo°Löks
++;

545 
	`DRV_PRINT
(
DRV_DEBUG_PHYCHANGE
,("\nenet%dÖort%d down\n",

546 
ëhUnô
, 
phyUnô
));

547 
œ°Sètus
->
isPhyAlive
 = 
FALSE
;

551 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
ATHR_PHY_STATUS
);

552 i‡(!
	`ATHR_RESET_DONE
(
phyHwSètus
))

555 
phyHwC⁄åﬁ
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
ATHR_PHY_CONTROL
);

557 i‡((!(
phyHwC⁄åﬁ
 & 
ATHR_CTRL_AUTONEGOTIATION_ENABLE
))

558 || 
	`ATHR_AUTONEG_DONE
(
phyHwSètus
)) {

559 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
,

560 
ATHR_PHY_SPEC_STATUS
);

562 i‡(
phyHwSètus
 & 
ATHR_STATUS_LINK_PASS
) {

563 
gaöedLöks
++;

564 
lökCou¡
++;

565 
	`DRV_PRINT
(
DRV_DEBUG_PHYCHANGE
,("\nenet%dÖort%d up\n",

566 
ëhUnô
, 
phyUnô
));

567 
œ°Sètus
->
isPhyAlive
 = 
TRUE
;

573  (
lökCou¡
);

575 
	}
}

577 
uöt32_t


578 
	$©hrs16_ªg_ªad
(
uöt32_t
 
ªg_addr
)

580 
uöt32_t
 
ªg_w‹d_addr
;

581 
uöt32_t
 
phy_addr
, 
tmp_vÆ
, 
ªg_vÆ
;

582 
uöt16_t
 
phy_vÆ
;

583 
uöt8_t
 
phy_ªg
;

586 
ªg_w‹d_addr
 = (
ªg_addr
 & 0xfffffffc) >> 1;

589 
phy_addr
 = 0x18;

590 
phy_ªg
 = 0x0;

591 
phy_vÆ
 = (
uöt16_t
Ë((
ªg_w‹d_addr
 >> 8) & 0x1ff);

592 
	`phy_ªg_wrôe
(0, 
phy_addr
, 
phy_ªg
, 
phy_vÆ
);

598 
phy_addr
 = 0x10 | ((
ªg_w‹d_addr
 >> 5) & 0x7);

599 
phy_ªg
 = (
uöt8_t
Ë(
ªg_w‹d_addr
 & 0x1f);

600 
ªg_vÆ
 = (
uöt32_t
Ë
	`phy_ªg_ªad
(0, 
phy_addr
, 
phy_ªg
);

603 
ªg_w‹d_addr
++;

604 
phy_addr
 = 0x10 | ((
ªg_w‹d_addr
 >> 5) & 0x7);

605 
phy_ªg
 = (
uöt8_t
Ë(
ªg_w‹d_addr
 & 0x1f);

606 
tmp_vÆ
 = (
uöt32_t
Ë
	`phy_ªg_ªad
(0, 
phy_addr
, 
phy_ªg
);

607 
ªg_vÆ
 |(
tmp_vÆ
 << 16);

609  
ªg_vÆ
;

610 
	}
}

613 
	$©hrs16_ªg_wrôe
(
uöt32_t
 
ªg_addr
, uöt32_à
ªg_vÆ
)

615 
uöt32_t
 
ªg_w‹d_addr
;

616 
uöt32_t
 
phy_addr
;

617 
uöt16_t
 
phy_vÆ
;

618 
uöt8_t
 
phy_ªg
;

621 
ªg_w‹d_addr
 = (
ªg_addr
 & 0xfffffffc) >> 1;

624 
phy_addr
 = 0x18;

625 
phy_ªg
 = 0x0;

626 
phy_vÆ
 = (
uöt16_t
Ë((
ªg_w‹d_addr
 >> 8) & 0x1ff);

627 
	`phy_ªg_wrôe
(0, 
phy_addr
, 
phy_ªg
, 
phy_vÆ
);

634 
ªg_w‹d_addr
++;

635 
phy_addr
 = 0x10 | ((
ªg_w‹d_addr
 >> 5) & 0x7);

636 
phy_ªg
 = (
uöt8_t
Ë(
ªg_w‹d_addr
 & 0x1f);

637 
phy_vÆ
 = (
uöt16_t
Ë((
ªg_vÆ
 >> 16) & 0xffff);

638 
	`phy_ªg_wrôe
(0, 
phy_addr
, 
phy_ªg
, 
phy_vÆ
);

641 
ªg_w‹d_addr
--;

642 
phy_addr
 = 0x10 | ((
ªg_w‹d_addr
 >> 5) & 0x7);

643 
phy_ªg
 = (
uöt8_t
Ë(
ªg_w‹d_addr
 & 0x1f);

644 
phy_vÆ
 = (
uöt16_t
Ë(
ªg_vÆ
 & 0xffff);

645 
	`phy_ªg_wrôe
(0, 
phy_addr
, 
phy_ªg
, 
phy_vÆ
);

646 
	}
}

649 
	$©hr_io˘l
(
uöt32_t
 *
¨gs
, 
cmd
)

651 #ifde‡
FULL_FEATURE


652 i‡(
	`sw_io˘l
(
¨gs
, 
cmd
))

653  -
EOPNOTSUPP
;

657 
	`¥ötk
("EOPNOTSUPP\n");

658  -
EOPNOTSUPP
;

660 
	}
}

	@ag7100/athrs16_phy.h

18 #i‚de‡
_ATHRS16_PHY_H


19 
	#_ATHRS16_PHY_H


	)

25 
	#ATHR_PHY_CONTROL
 0

	)

26 
	#ATHR_PHY_STATUS
 1

	)

27 
	#ATHR_PHY_ID1
 2

	)

28 
	#ATHR_PHY_ID2
 3

	)

29 
	#ATHR_AUTONEG_ADVERT
 4

	)

30 
	#ATHR_LINK_PARTNER_ABILITY
 5

	)

31 
	#ATHR_AUTONEG_EXPANSION
 6

	)

32 
	#ATHR_NEXT_PAGE_TRANSMIT
 7

	)

33 
	#ATHR_LINK_PARTNER_NEXT_PAGE
 8

	)

34 
	#ATHR_1000BASET_CONTROL
 9

	)

35 
	#ATHR_1000BASET_STATUS
 10

	)

36 
	#ATHR_PHY_SPEC_CONTROL
 16

	)

37 
	#ATHR_PHY_SPEC_STATUS
 17

	)

38 
	#ATHR_DEBUG_PORT_ADDRESS
 29

	)

39 
	#ATHR_DEBUG_PORT_DATA
 30

	)

42 
	#ATHR_CTRL_SOFTWARE_RESET
 0x8000

	)

43 
	#ATHR_CTRL_SPEED_LSB
 0x2000

	)

44 
	#ATHR_CTRL_AUTONEGOTIATION_ENABLE
 0x1000

	)

45 
	#ATHR_CTRL_RESTART_AUTONEGOTIATION
 0x0200

	)

46 
	#ATHR_CTRL_SPEED_FULL_DUPLEX
 0x0100

	)

47 
	#ATHR_CTRL_SPEED_MSB
 0x0040

	)

49 
	#ATHR_RESET_DONE
(
phy_c⁄åﬁ
) \

50 (((
phy_c⁄åﬁ
Ë& (
ATHR_CTRL_SOFTWARE_RESET
)Ë=0)

	)

53 
	#ATHR_STATUS_AUTO_NEG_DONE
 0x0020

	)

55 
	#ATHR_AUTONEG_DONE
(
ù_phy_°©us
) \

56 (((
ù_phy_°©us
) & \

57 (
ATHR_STATUS_AUTO_NEG_DONE
)) == \

58 (
ATHR_STATUS_AUTO_NEG_DONE
))

	)

61 
	#ATHR_LINK_100BASETX_FULL_DUPLEX
 0x0100

	)

62 
	#ATHR_LINK_100BASETX
 0x0080

	)

63 
	#ATHR_LINK_10BASETX_FULL_DUPLEX
 0x0040

	)

64 
	#ATHR_LINK_10BASETX
 0x0020

	)

67 
	#ATHR_ADVERTISE_NEXT_PAGE
 0x8000

	)

68 
	#ATHR_ADVERTISE_ASYM_PAUSE
 0x0800

	)

69 
	#ATHR_ADVERTISE_PAUSE
 0x0400

	)

70 
	#ATHR_ADVERTISE_100FULL
 0x0100

	)

71 
	#ATHR_ADVERTISE_100HALF
 0x0080

	)

72 
	#ATHR_ADVERTISE_10FULL
 0x0040

	)

73 
	#ATHR_ADVERTISE_10HALF
 0x0020

	)

75 
	#ATHR_ADVERTISE_ALL
 (
ATHR_ADVERTISE_ASYM_PAUSE
 | 
ATHR_ADVERTISE_PAUSE
 | \

76 
ATHR_ADVERTISE_10HALF
 | 
ATHR_ADVERTISE_10FULL
 | \

77 
ATHR_ADVERTISE_100HALF
 | 
ATHR_ADVERTISE_100FULL
)

	)

80 
	#ATHR_ADVERTISE_1000FULL
 0x0200

	)

83 
	#ATHER_STATUS_LINK_MASK
 0xC000

	)

84 
	#ATHER_STATUS_LINK_SHIFT
 14

	)

85 
	#ATHER_STATUS_FULL_DEPLEX
 0x2000

	)

86 
	#ATHR_STATUS_LINK_PASS
 0x0400

	)

87 
	#ATHR_STATUS_RESOVLED
 0x0800

	)

90 
	#ATHER_DEBUG_SERDES_REG
 5

	)

93 
	#ATHER_SERDES_BEACON
 0x0100

	)

95 #i‚de‡
BOOL


96 
	#BOOL
 

	)

102 #ifde‡
CONFIG_ATHRS16_PHY


103 #unde‡
HEADER_REG_CONF


104 #unde‡
HEADER_EN


107 
©hrs16_ªg_öô
();

108 
©hrs16_phy_is_up
(
unô
);

109 
©hrs16_phy_is_fdx
(
unô
);

110 
©hrs16_phy_•ìd
(
unô
);

111 
BOOL
 
©hrs16_phy_£tup
(
unô
);

	@ag7100/athrs26_phy.c

15 
	~<löux/c⁄fig.h
>

16 
	~<löux/ty≥s.h
>

17 
	~<löux/√tdevi˚.h
>

18 
	~<löux/ëhîdevi˚.h
>

19 
	~<löux/dñay.h
>

20 
	~"ag7100_phy.h
"

21 
	~"ag7100.h
"

26 
	mPHY_SRCPORT_INFO
,

27 
	mPHY_PORTINFO_SIZE
,

28 } 
	tPHY_CAP_TYPE
;

31 
	mPHY_SRCPORT_NONE
,

32 
	mPHY_SRCPORT_VLANTAG
,

33 
	mPHY_SRCPORT_TRAILER
,

34 } 
	tPHY_SRCPORT_TYPE
;

36 
	#DRV_LOG
(
DBG_SW
, 
X0
, 
X1
, 
X2
, 
X3
, 
X4
, 
X5
, 
X6
)

	)

37 
	#DRV_MSG
(
x
,
a
,
b
,
c
,
d
,
e
,
f
)

	)

38 
	#DRV_PRINT
(
DBG_SW
,
X
)

	)

40 
	#ATHR_LAN_PORT_VLAN
 1

	)

41 
	#ATHR_WAN_PORT_VLAN
 2

	)

43 
	#ENET_UNIT_LAN
 0

	)

45 
	#TRUE
 1

	)

46 
	#FALSE
 0

	)

48 
	#ATHR_PHY0_ADDR
 0x0

	)

49 
	#ATHR_PHY1_ADDR
 0x1

	)

50 
	#ATHR_PHY2_ADDR
 0x2

	)

51 
	#ATHR_PHY3_ADDR
 0x3

	)

52 
	#ATHR_PHY4_ADDR
 0x4

	)

54 
	#MODULE_NAME
 "ATHRS26"

	)

60 
BOOL
 
	misE√tP‹t
;

61 
BOOL
 
	misPhyAlive
;

62 
	mëhUnô
;

63 
uöt32_t
 
	mphyBa£
;

64 
uöt32_t
 
	mphyAddr
;

65 
uöt32_t
 
	mVLANTabÀSëtög
;

66 } 
	t©hrPhyInfo_t
;

71 
©hrPhyInfo_t
 
	g©hrPhyInfo
[] = {

72 {
TRUE
,

73 
FALSE
,

74 
ENET_UNIT_LAN
,

76 
ATHR_PHY0_ADDR
,

77 
ATHR_LAN_PORT_VLAN


80 {
TRUE
,

81 
FALSE
,

82 
ENET_UNIT_LAN
,

84 
ATHR_PHY1_ADDR
,

85 
ATHR_LAN_PORT_VLAN


88 {
TRUE
,

89 
FALSE
,

90 
ENET_UNIT_LAN
,

92 
ATHR_PHY2_ADDR
,

93 
ATHR_LAN_PORT_VLAN


96 {
TRUE
,

97 
FALSE
,

98 
ENET_UNIT_LAN
,

100 
ATHR_PHY3_ADDR
,

101 
ATHR_LAN_PORT_VLAN


104 {
TRUE
,

105 
FALSE
,

108 
ATHR_PHY4_ADDR
,

109 
ATHR_LAN_PORT_VLAN


112 {
FALSE
,

113 
TRUE
,

114 
ENET_UNIT_LAN
,

117 
ATHR_LAN_PORT_VLAN


121 
uöt8_t
 
	g©hr26_öô_Êag
 = 0;

123 
cmd_ª•_t
 
	gcmd_ª•
;

124 
DECLARE_WAIT_QUEUE_HEAD
 (
hd_c⁄f_waô
);

125 
	gwaô_Êag
 = 0;

126 
ag7100_mac_t
 *
	gag7100_macs
[2];

127 
©omic_t
 
	g£q˙t
 = 
ATOMIC_INIT
(0);

129 
	#ATHR_GLOBALREGBASE
 0

	)

132 
	#ATHR_PHY_MAX
 5

	)

135 
	#ATHR_ID_MIN
 0

	)

136 
	#ATHR_ID_MAX
 (
ATHR_PHY_MAX
-1)

	)

139 
	#ATHR_IS_ENET_PORT
(
phyUnô
Ë(
©hrPhyInfo
[phyUnô].
isE√tP‹t
)

	)

140 
	#ATHR_IS_PHY_ALIVE
(
phyUnô
Ë(
©hrPhyInfo
[phyUnô].
isPhyAlive
)

	)

141 
	#ATHR_ETHUNIT
(
phyUnô
Ë(
©hrPhyInfo
[phyUnô].
ëhUnô
)

	)

142 
	#ATHR_PHYBASE
(
phyUnô
Ë(
©hrPhyInfo
[phyUnô].
phyBa£
)

	)

143 
	#ATHR_PHYADDR
(
phyUnô
Ë(
©hrPhyInfo
[phyUnô].
phyAddr
)

	)

144 
	#ATHR_VLAN_TABLE_SETTING
(
phyUnô
Ë(
©hrPhyInfo
[phyUnô].
VLANTabÀSëtög
)

	)

147 
	#ATHR_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
) \

148 (
	`ATHR_IS_ENET_PORT
(
phyUnô
) && \

149 
	`ATHR_ETHUNIT
(
phyUnô
Ë=(
ëhUnô
))

	)

151 
	#ATHR_IS_WAN_PORT
(
phyUnô
Ë(!(
	`ATHR_ETHUNIT
’hyUnô)==
ENET_UNIT_LAN
))

	)

154 
BOOL
 
©hrs26_phy_is_lök_Æive
(
phyUnô
);

155 
uöt32_t
 
©hrs26_ªg_ªad
(uöt32_à
ªg_addr
);

156 
©hrs26_ªg_wrôe
(
uöt32_t
 
ªg_addr
, uöt32_à
ªg_vÆ
);

158 #i‡!
deföed
(
HEADER_REG_CONF
Ë&& !deföed(
CONFIG_AR9100
)

159 
	#gë_fõld_vÆ
(
_ªg
, 
_mask
, 
_shi·
, 
_ªs_ªg
) \

161 
ãmp
; \

162 
ãmp
 = 
	`¨7100_ªg_rd
(
_ªg
); \

163 
ãmp
 &()
_mask
;\

164 
_ªs_ªg
 = 
ãmp
 >> 
_shi·
; \

165 } 0)

	)

167 
	#£t_fõld_vÆ
(
_ªg
, 
_mask
, 
_shi·
, 
_vÆ
) \

169 
ãmp
; \

170 
ãmp
 = 
	`¨7100_ªg_rd
(
_ªg
); \

171 
ãmp
 &~
_mask
; \

172 
ãmp
 |
_vÆ
 << 
_shi·
; \

173 
	`¨7100_ªg_wr
(
_ªg
, 
ãmp
);\

174 } 0)

	)

176 
	gﬁd_ahb_div
 = 0;

178 
	$ag7100_ahb_„q_adju°
()

180 
∂l_fb
 = 0, 
ahb_div
 = 0, 
˝u_div
 = 0, 
mask
 = 0;

182 
mask
 = 
PLL_DIV_MASK
 << 
PLL_DIV_SHIFT
;

183 
	`gë_fõld_vÆ
(
AR7100_PLL_CONFIG
, 
mask
, 
PLL_DIV_SHIFT
, 
∂l_fb
);

185 
mask
 = 
AHB_DIV_MASK
 << 
AHB_DIV_SHIFT
;

186 
	`gë_fõld_vÆ
(
AR7100_PLL_CONFIG
, 
mask
, 
AHB_DIV_SHIFT
, 
ﬁd_ahb_div
);

188 
mask
 = 
CPU_DIV_MASK
 << 
CPU_DIV_SHIFT
;

189 
	`gë_fõld_vÆ
(
AR7100_PLL_CONFIG
, 
mask
, 
CPU_DIV_SHIFT
, 
˝u_div
);

192 
ahb_div
 = ( (2*
∂l_fb
 + 2)/(5*
˝u_div
 + 5) + 1)/2 - 1;

193 
mask
 = 
AHB_DIV_MASK
 << 
AHB_DIV_SHIFT
;

194 
	`£t_fõld_vÆ
(
AR7100_PLL_CONFIG
, 
mask
, 
AHB_DIV_SHIFT
, 
ahb_div
);

195 
	}
}

197 
	$ag7100_ahb_„q_ª°‹e
()

199 
mask
 = 0;

200 
mask
 = 
AHB_DIV_MASK
 << 
AHB_DIV_SHIFT
;

201 
	`£t_fõld_vÆ
(
AR7100_PLL_CONFIG
, 
mask
, 
AHB_DIV_SHIFT
, 
ﬁd_ahb_div
);

202 
	}
}

205 #i‡
deföed
(
CONFIG_VLAN_8021Q
Ë|| deföed(
CONFIG_VLAN_8021Q_MODULE
)

206 
uöt16_t
 
	gp‹t_def_vid
[5] = {1, 1, 1, 1, 1};

207 
uöt8_t
 
	g˝u_egªss_ègged_Êag
 = 0;

209 
ölöe
 
uöt8_t
 
	$is_˝u_egªss_ègged
()

211  
˝u_egªss_ègged_Êag
;

212 
	}
}

214 
	$£t_˝u_egªss_ègged
(
uöt8_t
 
is_ègged
)

216 
˝u_egªss_ègged_Êag
 = 
is_ègged
;

217 
	}
}

219 
ölöe
 
uöt16_t
 
	$©hrs26_defvid_gë
(
uöt32_t
 
p‹t_id
)

221 i‡((
p‹t_id
 == 0) || (port_id > 5))

224  
p‹t_def_vid
[
p‹t_id
 - 1];

225 
	}
}

227 
BOOL
 
	$©hrs26_defvid_£t
(
uöt32_t
 
p‹t_id
, 
uöt16_t
 
def_vid
)

229 i‡((
def_vid
 == 0) || (def_vid > 4094))

230  
FALSE
;

232 i‡((
p‹t_id
 == 0) || (port_id > 5))

233  
FALSE
;

235 
p‹t_def_vid
[
p‹t_id
 - 1] = 
def_vid
;

236  
TRUE
;

237 
	}
}

240 
	$©hrs26_ªg_öô
()

242 
i
 = 20;

246 i‡(
©hr26_öô_Êag
)

250 
______________________________________________________


251 
u
-
boŸ
 
has
 
dós£πed
 
the
 
RMII
's TX_CTL,Åhe following

252 
addôi⁄Æ
 
ª£t
 
ö
 
	`©hrs26_ªg_öô
(Ë
is
 
nŸ
 
√eded
.

253 
______________________________________________________


256 
	`¥ötk
(
MODULE_NAME
 ":Ñesetting s26\n");

257 
	`©hrs26_ªg_wrôe
(0x0, 
	`©hrs26_ªg_ªad
(0x0)|0x80000000);

259 
i
--) {

260 
	`mdñay
(100);

261 if(!(
	`©hrs26_ªg_ªad
(0x0)&0x80000000))

265 
	`mdñay
(3000);

266 
	`¥ötk
(
MODULE_NAME
 ": s26Ñeset done\n");

268 
	`phy_ªg_wrôe
(0, 
ATHR_PHY4_ADDR
, 0, 0x0800);

271 
	`©hrs26_ªg_wrôe
(0x200, 0x200);

272 
	`©hrs26_ªg_wrôe
(0x300, 0x200);

273 
	`©hrs26_ªg_wrôe
(0x400, 0x200);

274 
	`©hrs26_ªg_wrôe
(0x500, 0x200);

275 
	`©hrs26_ªg_wrôe
(0x600, 0x7d);

277 
	`©hrs26_ªg_wrôe
(0x38, 0xc000050e);

279 
	`©hrs26_ªg_wrôe
(0x100, 0x7d);

280 
	`©hrs26_ªg_wrôe
(0x4, 0xa0000);

281 
	`©hrs26_ªg_wrôe
(0x8, 0x20000000);

282 
	`©hrs26_ªg_wrôe
(0x2c, 0x7e3f003f);

286 #i‡
	`deföed
(
CONFIG_VLAN_8021Q
Ë|| deföed(
CONFIG_VLAN_8021Q_MODULE
)

287 #ifde‡
HEADER_EN


288 
	`©hrs26_ªg_wrôe
(0x104, 0x6804);

290 
	`©hrs26_ªg_wrôe
(0x104, 0x6004);

293 
	`©hrs26_ªg_wrôe
(0x204, 0x6004);

294 
	`©hrs26_ªg_wrôe
(0x304, 0x6004);

295 
	`©hrs26_ªg_wrôe
(0x404, 0x6004);

296 
	`©hrs26_ªg_wrôe
(0x504, 0x6004);

297 
	`©hrs26_ªg_wrôe
(0x604, 0x6004);

300 
	`©hrs26_ªg_wrôe
(0x38, 0xc000050e);

301 #ifde‡
HEADER_EN


302 
	`©hrs26_ªg_wrôe
(0x104, 0x4804);

304 
	`©hrs26_ªg_wrôe
(0x104, 0x4004);

308 
	`©hrs26_ªg_wrôe
(0x60, 0xffffffff);

309 
	`©hrs26_ªg_wrôe
(0x64, 0xaaaaaaaa);

310 
	`©hrs26_ªg_wrôe
(0x68, 0x55555555);

311 
	`©hrs26_ªg_wrôe
(0x6c, 0x0);

313 
	`©hrs26_ªg_wrôe
(0x70, 0x41af);

316 #i‡
	`deföed
(
CONFIG_VLAN_8021Q
Ë|| deföed(
CONFIG_VLAN_8021Q_MODULE
)

317 
	`£t_˝u_egªss_ègged
(0);

322 #ifde‡
FULL_FEATURE


323 
	`©hía_öô
(0, 2);

326 
©hr26_öô_Êag
 = 1;

327 
	}
}

330 
	gphy_vÆ_ßved
 = 0;

337 
	$©hrs26_phy_off
(
ag7100_mac_t
 *
mac
)

339 
√t_devi˚
 *
dev
 = 
mac
->
mac_dev
;

341 i‡(
mac
->
mac_unô
 =
ENET_UNIT_LAN
)

344 
	`√tif_ˇºõr_off
(
dev
);

345 
	`√tif_°›_queue
(
dev
);

346 
phy_vÆ_ßved
 = 
	`phy_ªg_ªad
(0, 
ATHR_PHY4_ADDR
, 
ATHR_PHY_CONTROL
);

347 
	`phy_ªg_wrôe
(0, 
ATHR_PHY4_ADDR
, 
ATHR_PHY_CONTROL
, 
phy_vÆ_ßved
 | 0x800);

348 
	}
}

356 
	$©hrs26_phy_⁄
(
ag7100_mac_t
 *
mac
)

358 i‡((
mac
->
mac_unô
 =
ENET_UNIT_LAN
Ë|| (
phy_vÆ_ßved
 == 0))

361 
	`phy_ªg_wrôe
(0, 
ATHR_PHY4_ADDR
, 
ATHR_PHY_CONTROL
, 
phy_vÆ_ßved
 & 0xf7ff);

362 
	`mdñay
(2000);

363 
	}
}

371 
	$©hrs26_mac_•ìd_£t
(
ag7100_mac_t
 *
mac
, 
ag7100_phy_•ìd_t
 
•ìd
)

373 
uöt32_t
 
ªg_vÆ
;

375 i‡((
mac
->
mac_unô
 =
ENET_UNIT_LAN
))

378 #i‡(!
	`deföed
(
CONFIG_AR9100
)Ë&& (!deföed(
HEADER_REG_CONF
))

379 
	`ag7100_ahb_„q_adju°
();

382 
ªg_vÆ
 = 
	`©hrs26_ªg_ªad
(0x600);

384 
•ìd
) {

385 
AG7100_PHY_SPEED_100TX
:

386 
	`©hrs26_ªg_wrôe
 (0x600, (
ªg_vÆ
 & 0xfffffffc) | 0x1);

389 
AG7100_PHY_SPEED_10T
:

390 
	`©hrs26_ªg_wrôe
 (0x600, (
ªg_vÆ
 & 0xfffffffc));

396 #i‡(!
	`deföed
(
CONFIG_AR9100
)Ë&& (!deföed(
HEADER_REG_CONF
))

397 
	`ag7100_ahb_„q_ª°‹e
();

399 
	}
}

409 
BOOL


410 
	$©hrs26_phy_is_lök_Æive
(
phyUnô
)

412 
uöt16_t
 
phyHwSètus
;

413 
uöt32_t
 
phyBa£
;

414 
uöt32_t
 
phyAddr
;

416 
phyBa£
 = 
	`ATHR_PHYBASE
(
phyUnô
);

417 
phyAddr
 = 
	`ATHR_PHYADDR
(
phyUnô
);

419 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
ATHR_PHY_SPEC_STATUS
);

421 i‡(
phyHwSètus
 & 
ATHR_STATUS_LINK_PASS
)

422  
TRUE
;

424  
FALSE
;

425 
	}
}

439 
BOOL


440 
	$©hrs26_phy_£tup
(
ëhUnô
)

442 
phyUnô
;

443 
uöt16_t
 
phyHwSètus
;

444 
uöt16_t
 
timeout
;

445 
liveLöks
 = 0;

446 
uöt32_t
 
phyBa£
 = 0;

447 
BOOL
 
foundPhy
 = 
FALSE
;

448 
uöt32_t
 
phyAddr
 = 0;

453 
phyUnô
=0;ÖhyUnô < 
ATHR_PHY_MAX
;ÖhyUnit++) {

454 i‡(!
	`ATHR_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

458 
foundPhy
 = 
TRUE
;

459 
phyBa£
 = 
	`ATHR_PHYBASE
(
phyUnô
);

460 
phyAddr
 = 
	`ATHR_PHYADDR
(
phyUnô
);

462 
	`phy_ªg_wrôe
(
phyBa£
, 
phyAddr
, 
ATHR_AUTONEG_ADVERT
,

463 
ATHR_ADVERTISE_ALL
);

466 
	`phy_ªg_wrôe
(
phyBa£
, 
phyAddr
, 
ATHR_PHY_CONTROL
,

467 
ATHR_CTRL_AUTONEGOTIATION_ENABLE


468 | 
ATHR_CTRL_SOFTWARE_RESET
);

471 i‡(!
foundPhy
) {

472  
FALSE
;

480 
	`mdñay
(1000);

487 
phyUnô
=0; (phyUnô < 
ATHR_PHY_MAX
) ;ÖhyUnit++) {

488 i‡(!
	`ATHR_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

492 
timeout
=20;

494 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
ATHR_PHY_CONTROL
);

496 i‡(
	`ATHR_RESET_DONE
(
phyHwSètus
)) {

497 
	`DRV_PRINT
(
DRV_DEBUG_PHYSETUP
,

498 ("P‹à%d, Neg Suc˚ss\n", 
phyUnô
));

501 i‡(
timeout
 == 0) {

502 
	`DRV_PRINT
(
DRV_DEBUG_PHYSETUP
,

503 ("P‹à%d, Negogüti⁄Åimeout\n", 
phyUnô
));

506 i‡(--
timeout
 == 0) {

507 
	`DRV_PRINT
(
DRV_DEBUG_PHYSETUP
,

508 ("P‹à%d, Negogüti⁄Åimeout\n", 
phyUnô
));

512 
	`mdñay
(150);

514 #ifde‡
CONFIG_AR9100


517 
	`phy_ªg_wrôe
(0, 
phyUnô
, 29, 0x14);

518 
	`phy_ªg_wrôe
(0, 
phyUnô
, 30, 0x1352);

520 #ifde‡
S26_VER_1_0


522 
	`phy_ªg_wrôe
(0, 
phyUnô
, 29, 41);

523 
	`phy_ªg_wrôe
(0, 
phyUnô
, 30, 0);

524 
	`¥ötk
("def_ S26_VER_1_0\n");

538 
phyUnô
=0;ÖhyUnô < 
ATHR_PHY_MAX
;ÖhyUnit++) {

539 i‡(!
	`ATHR_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

543 i‡(
	`©hrs26_phy_is_lök_Æive
(
phyUnô
)) {

544 
liveLöks
++;

545 
	`ATHR_IS_PHY_ALIVE
(
phyUnô
Ë
TRUE
;

547 
	`ATHR_IS_PHY_ALIVE
(
phyUnô
Ë
FALSE
;

550 
	`DRV_PRINT
(
DRV_DEBUG_PHYSETUP
,

552 
ëhUnô
,

553 
	`phy_ªg_ªad
(
	`ATHR_PHYBASE
(
phyUnô
),

554 
	`ATHR_PHYADDR
(
phyUnô
),

555 
ATHR_PHY_SPEC_STATUS
)));

557 #i‚de‡
CONFIG_AR9100


558 i‡(
ëhUnô
 =
ENET_UNIT_LAN
) {

559 
	`ag7100_ahb_„q_adju°
();

560 
	`©hrs26_ªg_öô
();

561 
	`ag7100_ahb_„q_ª°‹e
();

564  (
liveLöks
 > 0);

565 
	}
}

577 
	$©hrs26_phy_is_fdx
(
ëhUnô
)

579 
phyUnô
;

580 
uöt32_t
 
phyBa£
;

581 
uöt32_t
 
phyAddr
;

582 
uöt16_t
 
phyHwSètus
;

583 
ii
 = 200;

585 i‡(
ëhUnô
 =
ENET_UNIT_LAN
)

586  
TRUE
;

588 
phyUnô
=0;ÖhyUnô < 
ATHR_PHY_MAX
;ÖhyUnit++) {

589 i‡(!
	`ATHR_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

593 i‡(
	`©hrs26_phy_is_lök_Æive
(
phyUnô
)) {

595 
phyBa£
 = 
	`ATHR_PHYBASE
(
phyUnô
);

596 
phyAddr
 = 
	`ATHR_PHYADDR
(
phyUnô
);

599 
phyHwSètus
 = 
	`ag7100_mii_ªad
 (
phyBa£
, 
phyAddr
,

600 
ATHR_PHY_SPEC_STATUS
);

601 
	`mdñay
(10);

602 } (!(
phyHwSètus
 & 
ATHR_STATUS_RESOVLED
)Ë&& --
ii
);

604 i‡(
phyHwSètus
 & 
ATHER_STATUS_FULL_DEPLEX
)

605  
TRUE
;

609  
FALSE
;

610 
	}
}

624 
	$©hrs26_phy_•ìd
(
ëhUnô
)

626 
phyUnô
;

627 
uöt16_t
 
phyHwSètus
;

628 
uöt32_t
 
phyBa£
;

629 
uöt32_t
 
phyAddr
;

630 
ii
 = 200;

632 i‡(
ëhUnô
 =
ENET_UNIT_LAN
)

633  
AG7100_PHY_SPEED_100TX
;

635 
phyUnô
=0;ÖhyUnô < 
ATHR_PHY_MAX
;ÖhyUnit++) {

636 i‡(!
	`ATHR_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

640 i‡(
	`©hrs26_phy_is_lök_Æive
(
phyUnô
)) {

642 
phyBa£
 = 
	`ATHR_PHYBASE
(
phyUnô
);

643 
phyAddr
 = 
	`ATHR_PHYADDR
(
phyUnô
);

645 
phyHwSètus
 = 
	`ag7100_mii_ªad
(
phyBa£
, 
phyAddr
,

646 
ATHR_PHY_SPEC_STATUS
);

647 
	`mdñay
(10);

648 }(!(
phyHwSètus
 & 
ATHR_STATUS_RESOVLED
)Ë&& --
ii
);

650 
phyHwSètus
 = (’hyHwSètu†& 
ATHER_STATUS_LINK_MASK
) >>

651 
ATHER_STATUS_LINK_SHIFT
);

653 
phyHwSètus
) {

655  
AG7100_PHY_SPEED_10T
;

657  
AG7100_PHY_SPEED_100TX
;

659  
AG7100_PHY_SPEED_1000T
;

661 
	`¥ötk
("Unkown speedÑead!\n");

666  
AG7100_PHY_SPEED_10T
;

667 
	}
}

682 
	$©hrs26_phy_is_up
(
ëhUnô
)

684 
phyUnô
;

685 
uöt16_t
 
phyHwSètus
, 
phyHwC⁄åﬁ
;

686 
©hrPhyInfo_t
 *
œ°Sètus
;

687 
lökCou¡
 = 0;

688 
lo°Löks
 = 0;

689 
gaöedLöks
 = 0;

690 
uöt32_t
 
phyBa£
;

691 
uöt32_t
 
phyAddr
;

693 #ifde‡
HEADER_REG_CONF


695 i‡(
ëhUnô
 =
ENET_UNIT_LAN
)

699 
phyUnô
=0;ÖhyUnô < 
ATHR_PHY_MAX
;ÖhyUnit++) {

700 i‡(!
	`ATHR_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

704 
phyBa£
 = 
	`ATHR_PHYBASE
(
phyUnô
);

705 
phyAddr
 = 
	`ATHR_PHYADDR
(
phyUnô
);

707 
œ°Sètus
 = &
©hrPhyInfo
[
phyUnô
];

709 i‡(
œ°Sètus
->
isPhyAlive
) {

710 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
ATHR_PHY_SPEC_STATUS
);

713 i‡(
phyHwSètus
 & 
ATHR_STATUS_LINK_PASS
) {

714 
lökCou¡
++;

716 
lo°Löks
++;

717 
	`DRV_PRINT
(
DRV_DEBUG_PHYCHANGE
,("\nenet%dÖort%d down\n",

718 
ëhUnô
, 
phyUnô
));

719 
œ°Sètus
->
isPhyAlive
 = 
FALSE
;

723 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
ATHR_PHY_STATUS
);

724 i‡(!
	`ATHR_RESET_DONE
(
phyHwSètus
))

727 
phyHwC⁄åﬁ
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
ATHR_PHY_CONTROL
);

729 i‡((!(
phyHwC⁄åﬁ
 & 
ATHR_CTRL_AUTONEGOTIATION_ENABLE
))

730 || 
	`ATHR_AUTONEG_DONE
(
phyHwSètus
)) {

731 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
,

732 
ATHR_PHY_SPEC_STATUS
);

734 i‡(
phyHwSètus
 & 
ATHR_STATUS_LINK_PASS
) {

735 
gaöedLöks
++;

736 
lökCou¡
++;

737 
	`DRV_PRINT
(
DRV_DEBUG_PHYCHANGE
,("\nenet%dÖort%d up\n",

738 
ëhUnô
, 
phyUnô
));

739 
œ°Sètus
->
isPhyAlive
 = 
TRUE
;

745  (
lökCou¡
);

748 i‡(
lökCou¡
 == 0) {

749 i‡(
lo°Löks
) {

751 
	`phyLökLo°
(
ëhUnô
);

754 i‡(
gaöedLöks
 =
lökCou¡
) {

756 
	`phyLökGaöed
(
ëhUnô
);

760 
	}
}

763 
	$©hrs26_hódî_c⁄fig_ªg
 (
√t_devi˚
 *
dev
, 
uöt8_t
 
wr_Êag
,

764 
uöt32_t
 
ªg_addr
, 
uöt16_t
 
cmd_Àn
,

765 
uöt8_t
 *
vÆ
, 
uöt32_t
 
£q_num
)

767 
sk_buff
 *
skb
;

768 
©_hódî_t
 
©_hódî
;

769 
ªg_cmd_t
 
ªg_cmd
;

772 
skb
 = 
	`dev_Æloc_skb
(64);

773 i‡(!
skb
) {

774 
	`¥ötk
("allocate skb fail\n");

777 
	`skb_put
(
skb
, 60);

780 
©_hódî
.
ª£rved0
 = 0x10;

781 
©_hódî
.
¥i‹ôy
 = 0;

782 
©_hódî
.
ty≥
 = 0x5;

783 
©_hódî
.
brﬂdˇ°
 = 0;

784 
©_hódî
.
‰om_˝u
 = 1;

785 
©_hódî
.
ª£rved1
 = 0x01;

786 
©_hódî
.
p‹t_num
 = 0;

788 
skb
->
d©a
[0] = 
©_hódî
.
p‹t_num
;

789 
skb
->
d©a
[0] |
©_hódî
.
ª£rved1
 << 4;

790 
skb
->
d©a
[0] |
©_hódî
.
‰om_˝u
 << 6;

791 
skb
->
d©a
[0] |
©_hódî
.
brﬂdˇ°
 << 7;

793 
skb
->
d©a
[1] = 
©_hódî
.
ty≥
;

794 
skb
->
d©a
[1] |
©_hódî
.
¥i‹ôy
 << 4;

795 
skb
->
d©a
[1] |
©_hódî
.
ª£rved0
 << 6;

798 if(
cmd_Àn
 > 4)

799 
cmd_Àn
 = 4;

801 
ªg_cmd
.
ªg_addr
 =Ñeg_addr&0x3FFFC;

802 
ªg_cmd
.
cmd_Àn
 = cmd_len;

803 
ªg_cmd
.
cmd
 = 
wr_Êag
;

804 
ªg_cmd
.
ª£rved2
 = 0x5;

805 
ªg_cmd
.
£q_num
 = seq_num;

807 
skb
->
d©a
[2] = 
ªg_cmd
.
ªg_addr
 & 0xff;

808 
skb
->
d©a
[3] = (
ªg_cmd
.
ªg_addr
 & 0xff00) >> 8;

809 
skb
->
d©a
[4] = (
ªg_cmd
.
ªg_addr
 & 0x30000) >> 16;

810 
skb
->
d©a
[4] |
ªg_cmd
.
cmd_Àn
 << 4;

811 
skb
->
d©a
[5] = 
ªg_cmd
.
cmd
 << 4;

812 
skb
->
d©a
[5] |
ªg_cmd
.
ª£rved2
 << 5;

813 
skb
->
d©a
[6] = (
ªg_cmd
.
£q_num
 & 0x7f) << 1;

814 
skb
->
d©a
[7] = (
ªg_cmd
.
£q_num
 & 0x7f80) >> 7;

815 
skb
->
d©a
[8] = (
ªg_cmd
.
£q_num
 & 0x7f8000) >> 15;

816 
skb
->
d©a
[9] = (
ªg_cmd
.
£q_num
 & 0x7f800000) >> 23;

818 if(!
wr_Êag
)

819 
	`mem˝y
(
skb
->
d©a
 + 10, 
vÆ
, 
cmd_Àn
);

821 
skb
->
dev
 = dev;

824 
skb
->
cb
[0] = 0x7f;

825 
skb
->
cb
[1] = 0x5d;

828 
	`hódî_xmô
(
skb
, 
dev
);

831 
	}
}

835 
	$__©hrs26_hódî_wrôe_ªg
(
uöt32_t
 
ªg_addr
, 
uöt16_t
 
cmd_Àn
, 
uöt8_t
 *
ªg_d©a
,

836 
uöt32_t
 
£q_num
)

838 
timeout
;

839 
i
 = 2;

840 
uöt8_t
 
ªg_tmp
[4];

843 
ªg_tmp
[0] = (
uöt8_t
)(0x00f‡& (*((
uöt32_t
 *)
ªg_d©a
)));

844 
ªg_tmp
[1] = (
uöt8_t
)((0xff00 & (*((
uöt32_t
 *)
ªg_d©a
))) >> 8);

845 
ªg_tmp
[2] = (
uöt8_t
)((0xff0000 & (*((
uöt32_t
 *)
ªg_d©a
))) >> 16);

846 
ªg_tmp
[3] = (
uöt8_t
)((0xff000000 & (*((
uöt32_t
 *)
ªg_d©a
))) >> 24);

849 
waô_Êag
 = 0;

850 
	`©hrs26_hódî_c⁄fig_ªg
(
ag7100_macs
[0]->
mac_dev
, 0, 
ªg_addr
, 
cmd_Àn
,

851 
ªg_tmp
, 
£q_num
);

852 
timeout
 = 
HZ
;

853 i‡(!
	`ö_öãºu±
()) {

854 
timeout
 = 
	`waô_evít_öãºu±ibÀ_timeout
 (
hd_c⁄f_waô
,

855 
waô_Êag
 !0, 
timeout
);

857 i‡(
timeout
 || ((
ªg_addr
 =0)&&(
ªg_tmp
[3]&0x80)))

860 
	`¥ötk
("writeÅime out\n");

861 } 
i
--);

863 if(
i
==0) {

868 
	}
}

871 
	$__©hrs26_hódî_ªad_ªg
(
uöt32_t
 
ªg_addr
, 
uöt16_t
 
cmd_Àn
, 
uöt8_t
 *
ªg_d©a
,

872 
uöt32_t
 
£q_num
)

874 
timeout
;

875 
i
 = 2;

877 i‡(
	`ö_öãºu±
())

881 
waô_Êag
 = 0;

882 
	`©hrs26_hódî_c⁄fig_ªg
(
ag7100_macs
[0]->
mac_dev
, 1, 
ªg_addr
,

883 
cmd_Àn
, 
ªg_d©a
, 
£q_num
);

884 
timeout
 = 
HZ
;

885 
timeout
 = 
	`waô_evít_öãºu±ibÀ_timeout
 (
hd_c⁄f_waô
,

886 
waô_Êag
 !0, 
timeout
);

888 i‡(
timeout
)

891 
	`¥ötk
("readÅime out\n");

892 } 
i
--);

894 i‡((
i
==0Ë|| (
£q_num
 !
cmd_ª•
.
£q
Ë|| (
cmd_Àn
 !cmd_ª•.
Àn
)) {

898 (*((
uöt32_t
 *)
ªg_d©a
)Ë
cmd_ª•
.
d©a
[0] | (cmd_resp.data[1] << 8)

899 | (
cmd_ª•
.
d©a
[2] << 16)| (cmd_resp.data[3] << 24);

902 
	}
}

905 
	$£t_˝u_p‹t_À¨n
(
Êags
)

907 
uöt32_t
 
ªg_d©a
 = 0;

908 
uöt32_t
 
ªg_addr
 = 0x104;

909 
uöt32_t
 
£q_num
 = 0x7fffffff;

911 
	`__©hrs26_hódî_ªad_ªg
(
ªg_addr
, 4, (
uöt8_t
 *)&
ªg_d©a
, 
£q_num
);

913 if(
Êags
)

914 
ªg_d©a
 |= 0x1<<14;

916 
ªg_d©a
 &= ~(0x1<<14);

918 
	`__©hrs26_hódî_wrôe_ªg
 (
ªg_addr
, 4, (
uöt8_t
 *)&
ªg_d©a
, 
£q_num
);

919 
	}
}

922 
	$gë_˝u_p‹t_À¨n
()

924 
uöt32_t
 
ªg_d©a
 = 0;

925 
uöt32_t
 
ªg_addr
 = 0x104;

926 
uöt32_t
 
£q_num
 = 0x7fffffff;

928 
	`__©hrs26_hódî_ªad_ªg
(
ªg_addr
, 4, (
uöt8_t
 *)&
ªg_d©a
, 
£q_num
);

930  (
ªg_d©a
 >> 14) & 0x1;

931 
	}
}

934 
	$©hrs26_hódî_wrôe_ªg
(
uöt32_t
 
ªg_addr
, 
uöt16_t
 
cmd_Àn
, 
uöt8_t
 *
ªg_d©a
)

936 
Êagßve
 = 0;

938 if(
Êagßve
 = 
	`gë_˝u_p‹t_À¨n
())

939 
	`£t_˝u_p‹t_À¨n
(0);

942 if(
	`©omic_ªad
(&
£q˙t
) == 0x7ffffffe){

943 
	`©omic_£t
(&
£q˙t
, 0);

945 
	`©omic_öc
(&
£q˙t
);

948 
	`__©hrs26_hódî_wrôe_ªg
(
ªg_addr
, 4, 
ªg_d©a
, 
	`©omic_ªad
(&
£q˙t
));

950 if(
Êagßve
 &&

951 !((
ªg_addr
 =0x104Ë&& ((*(
uöt32_t
 *)
ªg_d©a
>>14 & 0x1) == 0)))

952 
	`£t_˝u_p‹t_À¨n
(1);

955 
	}
}

958 
	$©hrs26_hódî_ªad_ªg
(
uöt32_t
 
ªg_addr
, 
uöt16_t
 
cmd_Àn
, 
uöt8_t
 *
ªg_d©a
)

960 
Êagßve
 = 0;

962 if(
Êagßve
 = 
	`gë_˝u_p‹t_À¨n
())

963 
	`£t_˝u_p‹t_À¨n
(0);

966 if(
	`©omic_ªad
(&
£q˙t
) == 0x7ffffffe){

967 
	`©omic_£t
(&
£q˙t
, 0);

969 
	`©omic_öc
(&
£q˙t
);

972 
	`__©hrs26_hódî_ªad_ªg
(
ªg_addr
, 4, 
ªg_d©a
, 
	`©omic_ªad
(&
£q˙t
));

975 if((
ªg_addr
 =0x104Ë&& (
Êagßve
 == 1))

976 *(
uöt32_t
 *)
ªg_d©a
 |= 0x1<<14;

977 i‡((
ªg_addr
 =0x104Ë&& (
Êagßve
 == 0))

978 *(
uöt32_t
 *)
ªg_d©a
 &= ~(0x1<<14);

980 if(
Êagßve
)

981 
	`£t_˝u_p‹t_À¨n
(1);

984 
	}
}

986 
	$hódî_ª˚ive_skb
(
sk_buff
 *
skb
)

988 
waô_Êag
 = 1;

989 
cmd_ª•
.
Àn
 = 
skb
->
d©a
[4] >> 4;

990 i‡(
cmd_ª•
.
Àn
 > 10)

991 
out
;

993 
cmd_ª•
.
£q
 = 
skb
->
d©a
[6] >> 1;

994 
cmd_ª•
.
£q
 |
skb
->
d©a
[7] << 7;

995 
cmd_ª•
.
£q
 |
skb
->
d©a
[8] << 15;

996 
cmd_ª•
.
£q
 |
skb
->
d©a
[9] << 23;

998 i‡(
cmd_ª•
.
£q
 < 
	`©omic_ªad
(&
£q˙t
))

999 
out
;

1001 
	`mem˝y
 (
cmd_ª•
.
d©a
, (
skb
->d©®+ 10), cmd_ª•.
Àn
);

1002 
	`wake_up_öãºu±ibÀ
(&
hd_c⁄f_waô
);

1004 
out
:

1005 
	`k‰ì_skb
(
skb
);

1006 
	}
}

1008 
	$©hrs26_ªg_dev
(
ag7100_mac_t
 **
mac
)

1010 
ag7100_macs
[0] = 
mac
[0];

1011 
ag7100_macs
[0]->
mac_•ìd
 = 0xff;

1012 
ag7100_macs
[1] = 
mac
[1];

1013 
ag7100_macs
[1]->
mac_•ìd
 = 0xff;

1015 
	}
}

1017 
uöt32_t


1018 
	$©hrs26_ªg_ªad
(
uöt32_t
 
ªg_addr
)

1020 #i‚de‡
HEADER_REG_CONF


1021 
uöt32_t
 
ªg_w‹d_addr
;

1022 
uöt32_t
 
phy_addr
, 
tmp_vÆ
, 
ªg_vÆ
;

1023 
uöt16_t
 
phy_vÆ
;

1024 
uöt8_t
 
phy_ªg
;

1027 
ªg_w‹d_addr
 = (
ªg_addr
 & 0xfffffffc) >> 1;

1030 
phy_addr
 = 0x18;

1031 
phy_ªg
 = 0x0;

1032 
phy_vÆ
 = (
uöt16_t
Ë((
ªg_w‹d_addr
 >> 8) & 0x1ff);

1033 
	`phy_ªg_wrôe
(0, 
phy_addr
, 
phy_ªg
, 
phy_vÆ
);

1039 
phy_addr
 = 0x10 | ((
ªg_w‹d_addr
 >> 5) & 0x7);

1040 
phy_ªg
 = (
uöt8_t
Ë(
ªg_w‹d_addr
 & 0x1f);

1041 
ªg_vÆ
 = (
uöt32_t
Ë
	`phy_ªg_ªad
(0, 
phy_addr
, 
phy_ªg
);

1044 
ªg_w‹d_addr
++;

1045 
phy_addr
 = 0x10 | ((
ªg_w‹d_addr
 >> 5) & 0x7);

1046 
phy_ªg
 = (
uöt8_t
Ë(
ªg_w‹d_addr
 & 0x1f);

1047 
tmp_vÆ
 = (
uöt32_t
Ë
	`phy_ªg_ªad
(0, 
phy_addr
, 
phy_ªg
);

1048 
ªg_vÆ
 |(
tmp_vÆ
 << 16);

1050  
ªg_vÆ
;

1052 
uöt8_t
 
ªg_d©a
[4];

1054 
	`mem£t
 (
ªg_d©a
, 0, 4);

1055 
	`©hrs26_hódî_ªad_ªg
(
ªg_addr
, 4, 
ªg_d©a
);

1056  *((
uöt32_t
 *)
ªg_d©a
);

1058 
	}
}

1061 
	$©hrs26_ªg_wrôe
(
uöt32_t
 
ªg_addr
, uöt32_à
ªg_vÆ
)

1063 #i‚de‡
HEADER_REG_CONF


1064 
uöt32_t
 
ªg_w‹d_addr
;

1065 
uöt32_t
 
phy_addr
;

1066 
uöt16_t
 
phy_vÆ
;

1067 
uöt8_t
 
phy_ªg
;

1070 
ªg_w‹d_addr
 = (
ªg_addr
 & 0xfffffffc) >> 1;

1073 
phy_addr
 = 0x18;

1074 
phy_ªg
 = 0x0;

1075 
phy_vÆ
 = (
uöt16_t
Ë((
ªg_w‹d_addr
 >> 8) & 0x1ff);

1076 
	`phy_ªg_wrôe
(0, 
phy_addr
, 
phy_ªg
, 
phy_vÆ
);

1083 
ªg_w‹d_addr
++;

1084 
phy_addr
 = 0x10 | ((
ªg_w‹d_addr
 >> 5) & 0x7);

1085 
phy_ªg
 = (
uöt8_t
Ë(
ªg_w‹d_addr
 & 0x1f);

1086 
phy_vÆ
 = (
uöt16_t
Ë((
ªg_vÆ
 >> 16) & 0xffff);

1087 
	`phy_ªg_wrôe
(0, 
phy_addr
, 
phy_ªg
, 
phy_vÆ
);

1090 
ªg_w‹d_addr
--;

1091 
phy_addr
 = 0x10 | ((
ªg_w‹d_addr
 >> 5) & 0x7);

1092 
phy_ªg
 = (
uöt8_t
Ë(
ªg_w‹d_addr
 & 0x1f);

1093 
phy_vÆ
 = (
uöt16_t
Ë(
ªg_vÆ
 & 0xffff);

1094 
	`phy_ªg_wrôe
(0, 
phy_addr
, 
phy_ªg
, 
phy_vÆ
);

1096 
	`©hrs26_hódî_wrôe_ªg
 (
ªg_addr
, 4, (
uöt8_t
 *)&
ªg_vÆ
);

1098 
	}
}

1101 
	$©hr_io˘l
(
uöt32_t
 *
¨gs
, 
cmd
)

1103 #ifde‡
FULL_FEATURE


1104 i‡(
	`sw_io˘l
(
¨gs
, 
cmd
))

1105  -
EOPNOTSUPP
;

1109  -
EOPNOTSUPP
;

1111 
	}
}

	@ag7100/athrs26_phy.h

18 #i‚de‡
_ATHRS26_PHY_H


19 
	#_ATHRS26_PHY_H


	)

25 
	#ATHR_PHY_CONTROL
 0

	)

26 
	#ATHR_PHY_STATUS
 1

	)

27 
	#ATHR_PHY_ID1
 2

	)

28 
	#ATHR_PHY_ID2
 3

	)

29 
	#ATHR_AUTONEG_ADVERT
 4

	)

30 
	#ATHR_LINK_PARTNER_ABILITY
 5

	)

31 
	#ATHR_AUTONEG_EXPANSION
 6

	)

32 
	#ATHR_NEXT_PAGE_TRANSMIT
 7

	)

33 
	#ATHR_LINK_PARTNER_NEXT_PAGE
 8

	)

34 
	#ATHR_1000BASET_CONTROL
 9

	)

35 
	#ATHR_1000BASET_STATUS
 10

	)

36 
	#ATHR_PHY_SPEC_CONTROL
 16

	)

37 
	#ATHR_PHY_SPEC_STATUS
 17

	)

38 
	#ATHR_DEBUG_PORT_ADDRESS
 29

	)

39 
	#ATHR_DEBUG_PORT_DATA
 30

	)

42 
	#ATHR_CTRL_SOFTWARE_RESET
 0x8000

	)

43 
	#ATHR_CTRL_SPEED_LSB
 0x2000

	)

44 
	#ATHR_CTRL_AUTONEGOTIATION_ENABLE
 0x1000

	)

45 
	#ATHR_CTRL_RESTART_AUTONEGOTIATION
 0x0200

	)

46 
	#ATHR_CTRL_SPEED_FULL_DUPLEX
 0x0100

	)

47 
	#ATHR_CTRL_SPEED_MSB
 0x0040

	)

49 
	#ATHR_RESET_DONE
(
phy_c⁄åﬁ
) \

50 (((
phy_c⁄åﬁ
Ë& (
ATHR_CTRL_SOFTWARE_RESET
)Ë=0)

	)

53 
	#ATHR_STATUS_AUTO_NEG_DONE
 0x0020

	)

55 
	#ATHR_AUTONEG_DONE
(
ù_phy_°©us
) \

56 (((
ù_phy_°©us
) & \

57 (
ATHR_STATUS_AUTO_NEG_DONE
)) == \

58 (
ATHR_STATUS_AUTO_NEG_DONE
))

	)

61 
	#ATHR_LINK_100BASETX_FULL_DUPLEX
 0x0100

	)

62 
	#ATHR_LINK_100BASETX
 0x0080

	)

63 
	#ATHR_LINK_10BASETX_FULL_DUPLEX
 0x0040

	)

64 
	#ATHR_LINK_10BASETX
 0x0020

	)

67 
	#ATHR_ADVERTISE_NEXT_PAGE
 0x8000

	)

68 
	#ATHR_ADVERTISE_ASYM_PAUSE
 0x0800

	)

69 
	#ATHR_ADVERTISE_PAUSE
 0x0400

	)

70 
	#ATHR_ADVERTISE_100FULL
 0x0100

	)

71 
	#ATHR_ADVERTISE_100HALF
 0x0080

	)

72 
	#ATHR_ADVERTISE_10FULL
 0x0040

	)

73 
	#ATHR_ADVERTISE_10HALF
 0x0020

	)

75 
	#ATHR_ADVERTISE_ALL
 (
ATHR_ADVERTISE_ASYM_PAUSE
 | 
ATHR_ADVERTISE_PAUSE
 | \

76 
ATHR_ADVERTISE_10HALF
 | 
ATHR_ADVERTISE_10FULL
 | \

77 
ATHR_ADVERTISE_100HALF
 | 
ATHR_ADVERTISE_100FULL
)

	)

80 
	#ATHR_ADVERTISE_1000FULL
 0x0200

	)

83 
	#ATHER_STATUS_LINK_MASK
 0xC000

	)

84 
	#ATHER_STATUS_LINK_SHIFT
 14

	)

85 
	#ATHER_STATUS_FULL_DEPLEX
 0x2000

	)

86 
	#ATHR_STATUS_LINK_PASS
 0x0400

	)

87 
	#ATHR_STATUS_RESOVLED
 0x0800

	)

90 
	#ATHER_DEBUG_SERDES_REG
 5

	)

93 
	#ATHER_SERDES_BEACON
 0x0100

	)

95 #i‚de‡
BOOL


96 
	#BOOL
 

	)

99 
	#HEADER_LEN
 2

	)

100 
	#HEADER_MAX_DATA
 10

	)

101 #unde‡
S26_VER_1_0


105 #i‚de‡
CONFIG_AR9100


106 #unde‡
HEADER_REG_CONF


108 
	#HEADER_REG_CONF
 1

	)

110 #ifde‡
HEADER_REG_CONF


111 
	#HEADER_EN


	)

115 
	mNORMAL_PACKET
,

116 
	mRESERVED0
,

117 
	mMIB_1ST
,

118 
	mRESERVED1
,

119 
	mRESERVED2
,

120 
	mREAD_WRITE_REG
,

121 
	mREAD_WRITE_REG_ACK
,

122 
	mRESERVED3


123 } 
	tAT_HEADER_TYPE
;

126 
uöt16_t
 
	mª£rved0
;

127 
uöt16_t
 
	m¥i‹ôy
;

128 
uöt16_t
 
	mty≥
 ;

129 
uöt16_t
 
	mbrﬂdˇ°
;

130 
uöt16_t
 
	m‰om_˝u
;

131 
uöt16_t
 
	mª£rved1
;

132 
uöt16_t
 
	mp‹t_num
;

133 }
	t©_hódî_t
;

136 
uöt64_t
 
	mªg_addr
;

137 
uöt64_t
 
	mª£rved0
;

138 
uöt64_t
 
	mcmd_Àn
;

139 
uöt64_t
 
	mª£rved1
;

140 
uöt64_t
 
	mcmd
;

141 
uöt64_t
 
	mª£rved2
;

142 
uöt64_t
 
	m£q_num
;

143 }
	tªg_cmd_t
;

146 
uöt8_t
 
	md©a
[
HEADER_MAX_DATA
];

147 
uöt8_t
 
	mÀn
;

148 
uöt32_t
 
	m£q
;

149 } 
	tcmd_ª•_t
;

151 
hódî_ª˚ive_skb
(
sk_buff
 *
skb
);

152 
©hrs26_ªg_dev
(
ag7100_mac_t
 **
mac
);

154 
	#hódî_xmô
(
skb
, 
dev
Ë
	`ag7100_h¨d_°¨t
(skb, dev)

155 

	)

156 
©hrs26_ªg_öô
();

157 
©hrs26_phy_is_up
(
unô
);

158 
©hrs26_phy_is_fdx
(
unô
);

159 
©hrs26_phy_•ìd
(
unô
);

160 
BOOL
 
©hrs26_phy_£tup
(
unô
);

162 
©hrs26_phy_off
(
ag7100_mac_t
 *
mac
);

163 
©hrs26_phy_⁄
(
ag7100_mac_t
 *
mac
);

164 
©hrs26_mac_•ìd_£t
(
ag7100_mac_t
 *
mac
, 
ag7100_phy_•ìd_t
 
•ìd
);

	@ag7100/g5_Plus1_2_29a_unmanaged_Atheros_v5.c

1 
	gg5_Plus1_2_29a_unm™aged_Athîos_v5
 [] = {

	@ag7100/g5_Plus1_2_29b_unmanaged_Atheros_v5.c

1 
	gg5_Plus1_2_29b_unm™aged_Athîos_v5
 [] = {

	@ag7100/g5_Plus1_2_31_unmanaged_Atheros_v3.c

9 
	gg5_Plus1_2_31_unm™aged_Athîos_v3
 [] = {

	@ag7100/g5_Plus1_2_31_unmanaged_Atheros_v4.c

9 
	gg5_Plus1_2_31_unm™aged_Athîos_v4
 [] = {

	@ag7100/g5_Plus1_2_31_unmanaged_Atheros_v6.c

1 
	gg5_Plus1_2_31_unm™aged_Athîos_v6
 [] = {

	@ag7100/g5e_Plus1_2_29a_unmanaged_Atheros_v3.c

1 
	glut⁄u
 [] = {

	@ag7100/generic_i2c.c

21 #ifde‡
__BDI


22 
	~"bdi.h
"

23 
	#¥Ÿe˘
()

	)

24 
	#u≈rŸe˘
()

	)

25 
	#gíîic_check_öãºu±i⁄
(Ë(1)

	)

27 #ifde‡
__ECOS


28 
	~<cyg/hÆ/¨7100_soc.h
>

29 
	~"ag7100_ecos.h
"

30 
	#¥ötk
 
DEBUG_PRINTF


	)

31 
	#udñay
 
A_UDELAY


	)

32 
	#¥Ÿe˘
()

	)

33 
	#u≈rŸe˘
()

	)

34 
	#gíîic_check_öãºu±i⁄
(Ë(1)

	)

36 
	~<löux/kî√l.h
>

37 
	~<asm/dñay.h
>

38 
	~"¨7100.h
"

40 
	#¥Ÿe˘
()

	)

41 
	#u≈rŸe˘
()

	)

43 
	#gíîic_check_öãºu±i⁄
(Ë(1)

	)

48 
	~"gíîic_i2c.h
"

50 
	#GENERIC_I2C_IO_EXP
 0x40

	)

52 #unde‡
USE_TEST_CODE


53 
	#USE_TEST_CODE


	)

57 
	ggíîic_gpio_îr˙t
 = 0;

59 
ölöe


60 
	$gíîic_gpio_îr˛r
()

62 
gíîic_gpio_îr˙t
 = 0;

63 
	}
}

65 
ölöe


66 
	$gíîic_gpio_check_rc
(
rc
)

68 i‡(
rc
Ë
gíîic_gpio_îr˙t
++;

69 
	}
}

71 
ölöe


72 
	$gíîic_gpio_îrgë
()

74  
gíîic_gpio_îr˙t
;

75 
	}
}

79 
	#GENERIC_I2C_SCL
 (1<<0)

	)

80 
	#GENERIC_I2C_SDA
 (1<<1)

	)

81 
	#GENERIC_I2C_PAUSE
 2

	)

83 
ölöe


84 
	$gíîic_i2c_chigh_dhigh
()

86 
	`gíîic_gpio_check_rc
(
	`¨7100_gpio_Êﬂt_high_ã°
 ( 
GENERIC_I2C_SCL
 | 
GENERIC_I2C_SDA
 ));

87 
	`udñay
–
GENERIC_I2C_PAUSE
);

88 
	}
}

90 
ölöe


91 
	$gíîic_i2c_chigh_dlow
()

93 
	`gíîic_gpio_check_rc
(
	`¨7100_gpio_Êﬂt_high_ã°
 ( 
GENERIC_I2C_SCL
 ));

94 
	`¨7100_gpio_drive_low
–
GENERIC_I2C_SDA
 );

95 
	`udñay
–
GENERIC_I2C_PAUSE
 );

96 
	}
}

98 
ölöe


99 
	$gíîic_i2c_˛ow_dlow
()

101 
	`¨7100_gpio_drive_low
–
GENERIC_I2C_SCL
 | 
GENERIC_I2C_SDA
 );

102 
	`udñay
–
GENERIC_I2C_PAUSE
 );

103 
	}
}

105 
ölöe


106 
	$gíîic_i2c_˛ow_dhigh
()

108 
	`¨7100_gpio_drive_low
–
GENERIC_I2C_SCL
 );

109 
	`gíîic_gpio_check_rc
(
	`¨7100_gpio_Êﬂt_high_ã°
–
GENERIC_I2C_SDA
 ));

110 
	`udñay
–
GENERIC_I2C_PAUSE
 );

111 
	}
}

113 
ölöe


114 
	$gíîic_i2c_˛ow_dÊﬂt
()

116 
	`¨7100_gpio_drive_low
–
GENERIC_I2C_SCL
 );

117 
	`¨7100_ªg_rmw_˛ór
(
AR7100_GPIO_OE
, 
GENERIC_I2C_SDA
 );

118 
	`udñay
–
GENERIC_I2C_PAUSE
 );

119 
	}
}

121 
ölöe


122 
	$gíîic_i2c_chigh_dÊﬂt
()

124 
	`¨7100_gpio_drive_high
–
GENERIC_I2C_SCL
 );

125 
	`¨7100_ªg_rmw_˛ór
–
AR7100_GPIO_OE
, 
GENERIC_I2C_SDA
 );

126 
	`udñay
–
GENERIC_I2C_PAUSE
 );

127 
	}
}

130 
	$gíîic_i2c_chigh_dªad
()

132 
d
;

134 
	`¨7100_gpio_Êﬂt_high_ã°
–
GENERIC_I2C_SCL
 );

135 
	`¨7100_ªg_rmw_˛ór
–
AR7100_GPIO_OE
, 
GENERIC_I2C_SDA
 );

136 
	`udñay
–
GENERIC_I2C_PAUSE
/2 );

138 
d
 = (
	`¨7100_ªg_rd
–
AR7100_GPIO_IN
 ) & 
GENERIC_I2C_SDA
) ? 1 : 0;

139 
	`udñay
 ( 
GENERIC_I2C_PAUSE
/2);

141  
d
;

142 
	}
}

144 
ölöe


145 
	$gíîic_i2c_°¨t
()

147 
	`gíîic_i2c_chigh_dhigh
();

148 
	`gíîic_i2c_chigh_dlow
();

149 
	`gíîic_i2c_˛ow_dlow
();

150 
	}
}

152 
ölöe


153 
	$gíîic_i2c_°›
()

155 
	`gíîic_i2c_˛ow_dlow
();

156 
	`gíîic_i2c_chigh_dlow
();

157 
	`gíîic_i2c_chigh_dhigh
();

158 
	}
}

161 
	$gíîic_i2c_øw_wrôe_8
(
v
)

163 
ack
;

164 
ii
=7;

166 i‡((1<<
ii
Ë& 
v
) {

167 
	`gíîic_i2c_˛ow_dhigh
();

168 
	`gíîic_i2c_chigh_dhigh
();

170 
	`gíîic_i2c_˛ow_dlow
();

171 
	`gíîic_i2c_chigh_dlow
();

173 } 
ii
--);

175 
	`gíîic_i2c_˛ow_dÊﬂt
();

176 
ack
=
	`gíîic_i2c_chigh_dªad
();

177 
	`gíîic_i2c_˛ow_dÊﬂt
();

179  
ack
;

180 
	}
}

183 
	$gíîic_i2c_øw_ªad_8
(
œ°Byã
, *
v
)

185 
d
;

186 
ii
=7;

187 
jj
=0;

189 
	`gíîic_i2c_˛ow_dÊﬂt
();

190 
d
=
	`gíîic_i2c_chigh_dªad
();

191 i‡(
d
Ë
jj
 |1<<
ii
;

192 } 
ii
--);

194 i‡(
œ°Byã
) {

195 
	`gíîic_i2c_˛ow_dÊﬂt
();

196 
	`gíîic_i2c_chigh_dÊﬂt
();

198 
	`gíîic_i2c_˛ow_dlow
();

199 
	`gíîic_i2c_chigh_dlow
();

201 *
v
 = 
jj
 & 0xff;

202 
	}
}

205 
	$gíîic_i2c_øw_wrôe_byãs_to_addr
(
addr
, *
buf„r
, 
cou¡
)

207 vﬁ©ûê
ack
;

208 
ii
;

209 
	`gíîic_gpio_îr˛r
();

210 
	`gíîic_i2c_°¨t
();

211 
ack
 = 
	`gíîic_i2c_øw_wrôe_8
(
addr
&0xfe);

212 i‡(
ack
)

215 
ii
=0; ii<
cou¡
; ii++) {

216 
ack
 = 
	`gíîic_i2c_øw_wrôe_8
(
buf„r
[
ii
]);

218 
	`gíîic_i2c_°›
();

219  
	`gíîic_gpio_îrgë
();

220 
	}
}

223 
	$gíîic_i2c_øw_ªad_byãs_‰om_addr
(
addr
, *
buf„r
, 
cou¡
)

225 
ack
;

226 
ii
;

227 
	`gíîic_gpio_îr˛r
();

228 
	`gíîic_i2c_°¨t
();

229 
ack
 = 
	`gíîic_i2c_øw_wrôe_8
((
addr
&0xff)|0x01);

230 
ii
=0; ii<
cou¡
; ii++Ë
	`gíîic_i2c_øw_ªad_8
–ii==(cou¡-1), &
buf„r
[ii]);

231 
	`gíîic_i2c_°›
();

232  
	`gíîic_gpio_îrgë
();

233 
	}
}

235 #ifde‡
USE_TEST_CODE


237 
	$gíîic_i2c_ã°_wrôe_bôs
()

239 
	`¥ötk
("Writing bit stream of AA00\n");

240 
	`gíîic_gpio_îr˛r
();

242 
	`gíîic_i2c_°¨t
();

243 
	`gíîic_i2c_øw_wrôe_8
(0xAA);

244 
	`gíîic_i2c_øw_wrôe_8
(0x00);

245 
	`gíîic_i2c_°›
();

246 
	`udñay
(1000);

247 } 
	`gíîic_check_öãºu±i⁄
();

248 
	}
}

251 
	$gíîic_i2c_ã°_addr_°øµög
()

253 
jj
;

255 
íd
 = 0x7e;

256 
addr
 = 0x20;

258 
jj
=0;

259 
	`¥ötk
("Lo›ögÅhrougháddªs£†%02x .. %02x\n", 
addr
, 
íd
);

260 
addr
<
íd
) {

261 vﬁ©ûê
ack
;

262 
	`gíîic_i2c_°¨t
();

263 
ack
 = 
	`gíîic_i2c_øw_wrôe_8
(
addr
&0xfe);

264 
	`gíîic_i2c_°›
();

265 i‡(0==
ack
) {

266 
jj
++;

267 
	`¥ötk
(" Foundáddr: %02x\n", 
addr
);

269 
addr
+=2;

272 i‡(0==
jj
)

273 
	`¥ötk
(" FailedÅest,Ço i2c found\n");

274 
	}
}

280 
	ggíîic_i2c_shadow_of_gpio
 = 0;

283 
	$gíîic_i2c_wrôe_gpio
(
d
)

285 
îr˙t
;

287 
b
[2];

288 
b
[0] = 
d
;

289 
b
[1] = 
d
>>8;

291 
	`¥Ÿe˘
();

293 
îr˙t
 = 
	`gíîic_i2c_øw_wrôe_byãs_to_addr
(
GENERIC_I2C_IO_EXP
, 
b
, (b));

295 i‡(
îr˙t
 == 0)

296 
gíîic_i2c_shadow_of_gpio
 = 
d
;

298 
	`¥ötk
("%†Áûed: %d %04x\n", 
__FUNCTION__
, 
îr˙t
, 
d
 );

300 
	`u≈rŸe˘
();

302  
îr˙t
;

303 
	}
}

306 
	$gíîic_i2c_ªad_gpio
(*
d
)

308 
îr˙t
;

309 
b
[2];

311 
	`¥Ÿe˘
();

313 
îr˙t
 = 
	`gíîic_i2c_øw_ªad_byãs_‰om_addr
(
GENERIC_I2C_IO_EXP
, 
b
, (b));

314 i‡(
îr˙t
 == 0) {

315 *
d
 = 
b
[1]<<8 | b[0];

316 
gíîic_i2c_shadow_of_gpio
 = *
d
;

319 
	`¥ötk
("%†Áûed: %d %04x\n", 
__FUNCTION__
, 
îr˙t
, *
d
 );

321 
	`u≈rŸe˘
();

323  
îr˙t
;

324 
	}
}

327 
	$gíîic_i2c_öô_gpio
()

329 
	`¨7100_gpio_íabÀ_i2c_⁄_gpio_0_1
();

330 
	`gíîic_i2c_wrôe_gpio
(
GENERIC_I2C_INIT_OUT_HIGH
);

332 
	}
}

334 #ifde‡
USE_TEST_CODE


337 
	$gíîic_i2c_vÆ_bô_desc
 (
chg
, 
vÆ
, *
bô_des¸ùti⁄s
[])

339 
ii
;

340 
jj
;

341 *
p2
;

343 
ii
=0;ii<16; ii++) {

344 
jj
 = 1<<(15-
ii
);

345 i‡–
chg
 & 
jj
 ) {

346 
p2
 = 
bô_des¸ùti⁄s
[
ii
];

347 i‡(
p2
 &&Ö2[0])

348 i‡(
vÆ
 & 
jj
 )

349 
	`¥ötk
(" %s-H\n", 
p2
);

351 
	`¥ötk
(" %s-L\n", 
p2
);

354 
	}
}

356 *
	ggpio_desc
[16] = {

376 
	$gíîic_i2c_ã°_ªad_wrôe_gpio
()

378 
d
;

379 
e
;

380 
f
;

382 
	`¥ötk
("Looping on gpioálternatelyÅurning on LED1,TP24ánd LED2,TP25 \n");

383 
	`¥ötk
("PressingÉitherÖush button will generateán output\n");

385 
	`gíîic_i2c_öô_gpio
();

387 
d

GENERIC_I2C_JUMP_LED1
 | 
GENERIC_I2C_TP28
 | 
GENERIC_I2C_INIT_INPUT
;

388 
	`gíîic_i2c_wrôe_gpio
(
d
);

389 
	`gíîic_i2c_ªad_gpio
 (&
e
);

390 
f
 = 
d
^
e
;

391 i‡–
f
 & (
GENERIC_I2C_INIT_OUT_HIGH
|
GENERIC_I2C_INIT_OUT_LOW
 ))

392 
	`¥ötk
("îr: wrŸe: %04xÉx≥˘ed: %04x dif: %04x \n", 
d
, 
e
, 
f
);

394 
	`gíîic_i2c_vÆ_bô_desc
 (
f
, 
e
, 
gpio_desc
);

395 
	`udñay
(100000);

397 
d

GENERIC_I2C_JUMP_LED2
 | 
GENERIC_I2C_TP27
;

398 
	`gíîic_i2c_wrôe_gpio
(
d
);

399 
	`gíîic_i2c_ªad_gpio
 (&
e
);

400 
f
 = 
d
^
e
;

401 i‡(
f
)

402 
	`¥ötk
("îr: wrŸe: %04xÉx≥˘ed: %04x chg: %04x \n", 
d
, 
e
, 
f
);

404 
	`gíîic_i2c_vÆ_bô_desc
 (
f
, 
e
, 
gpio_desc
);

405 
	`udñay
(200000);

407 } 
	`gíîic_check_öãºu±i⁄
();

408 
	}
}

411 
	$gíîic_i2c_ã°_toggÀ
(
t
)

413 
d
=0;

415 
	`¥ötk
("Togglög i2¯GPIOÖö†%08x\n", 
t
);

416 
	`gíîic_i2c_ªad_gpio
(&
d
);

418 
	`gíîic_i2c_wrôe_gpio
(
d
 | 
t
);

419 
	`udñay
(1000);

420 
	`gíîic_i2c_wrôe_gpio
(
d
 & ~
t
);

421 
	`udñay
(1000);

422 } 
	`gíîic_check_öãºu±i⁄
();

423 
	}
}

428 
	$gíîic_i2c_as£π_cs
(
cs
)

430 
d
 = 
gíîic_i2c_shadow_of_gpio
;

433 
d
 |
GENERIC_I2C_VSC73XX_CS
|
GENERIC_I2C_STEREO_CS
|
GENERIC_I2C_SLIC_CS0
;

436 
cs
) {

437 
GENERIC_I2C_VSC73XX_CS
:

438 
GENERIC_I2C_STEREO_CS
:

439 
GENERIC_I2C_SLIC_CS0
:

440 
d
 &~
cs
;

441  
	`gíîic_i2c_wrôe_gpio
(
d
);

444 
	`¥ötk
("%†Áû: %d\n", 
__FUNCTION__
, 
cs
);

447 
	}
}

450 
	$gíîic_i2c_dós£π_cs
() {

451 
d
 = 
gíîic_i2c_shadow_of_gpio
;

454 
d
 |
GENERIC_I2C_VSC73XX_CS
|
GENERIC_I2C_STEREO_CS
|
GENERIC_I2C_SLIC_CS0
;

455 
	`gíîic_i2c_wrôe_gpio
(
d
);

456 
	}
}

458 #ifde‡
USE_TEST_CODE


461 
	$gíîic_i2c_ã°_cs_toggÀ
(
cs
)

463 
	`¥ötk
("Lo›ög o¿CS %d \n", 
cs
);

466 
	`gíîic_i2c_as£π_cs
(
cs
);

467 
	`gíîic_i2c_dós£π_cs
();

468 
	`udñay
(1000);

469 } 
	`gíîic_check_öãºu±i⁄
();

470 
	}
}

	@ag7100/generic_i2c.h

27 #i‚de‡
_GENERIC_I2C_H


28 
	#_GENERIC_I2C_H


	)

31 
	#GENERIC_I2C_VSC73XX_CS
 (1<<0)

	)

32 
	#GENERIC_I2C_STEREO_CS
 (1<<1)

	)

33 
	#GENERIC_I2C_SLIC_CS0
 (1<<2)

	)

34 
	#GENERIC_I2C_SLIC_TEST
 (1<<3)

	)

36 
	#GENERIC_I2C_INIT_OUT_HIGH
 (
GENERIC_I2C_VSC73XX_CS
 | 
GENERIC_I2C_STEREO_CS
 | 
GENERIC_I2C_SLIC_CS0
 | 
GENERIC_I2C_TP28
)

	)

39 
	#GENERIC_I2C_JUMP_LED1
 (1<<9)

	)

40 
	#GENERIC_I2C_JUMP_LED2
 (1<<10)

	)

41 
	#GENERIC_I2C_TP25
 (1<<12)

	)

42 
	#GENERIC_I2C_TP26
 (1<<13)

	)

44 
	#GENERIC_I2C_INIT_OUT_LOW
 (
GENERIC_I2C_JUMP_LED1
 | 
GENERIC_I2C_JUMP_LED2
 | 
GENERIC_I2C_SLIC_TEST
 | 
GENERIC_I2C_TP25
 | 
GENERIC_I2C_TP26
)

	)

47 
	#GENERIC_I2C_SLIC_INT0
 (1<<4)

	)

48 
	#GENERIC_I2C_SLIC_INT1
 (1<<5)

	)

49 
	#GENERIC_i2C_SW_RESET
 (1<<6)

	)

50 
	#GENERIC_I2C_JUMP_SW
 (1<<8)

	)

51 
	#GENERIC_I2C_TP24
 (1<<11)

	)

52 
	#GENERIC_I2C_TP27
 (1<<14)

	)

53 
	#GENERIC_I2C_TP28
 (1<<15)

	)

55 
	#GENERIC_I2C_INIT_INPUT
 (~(
GENERIC_I2C_INIT_OUT_HIGH
|
GENERIC_I2C_INIT_OUT_LOW
))

	)

57 
	#GENERIC_I2C_INPUT_LOW
 (
GENERIC_I2C_SLIC_INT0
 | 
GENERIC_I2C_SLIC_INT1
 | 
GENERIC_i2C_SW_RESET
 | 
GENERIC_I2C_JUMP_SW
)

	)

60 
gíîic_i2c_öô_gpio
();

63 
gíîic_i2c_wrôe_gpio
(
d
);

66 
gíîic_i2c_ªad_gpio
(*
d
);

69 
gíîic_i2c_as£π_cs
(
cs
);

72 
gíîic_i2c_dós£π_cs
();

74 #ifde‡
USE_TEST_CODE


77 
gíîic_i2c_ã°_s˛
();

80 
gíîic_i2c_ã°_sda
();

83 
gíîic_i2c_ã°_wrôe_bôs
();

86 
gíîic_i2c_ã°_toggÀ
(
t
);

89 
gíîic_i2c_ã°_addr_°øµög
();

92 
gíîic_i2c_check_öput
();

95 
gíîic_i2c_ã°_ªad_wrôe_gpio
();

98 
gíîic_i2c_ã°_vs7385_toggÀ
();

	@ag7100/generic_spi.c

18 
	#hîe
(Ëdÿ{ 
	`¥ötk
("%s(%d)\n", 
__func__
, 
__LINE__
); } 0)

	)

22 #ifde‡
__BDI


23 
	~"bdi.h
"

25 
	#¥Ÿe˘
()

	)

26 
	#u≈rŸe˘
()

	)

29 #ifde‡
__ECOS


30 
	~<cyg/hÆ/¨7100_soc.h
>

31 
	~"ag7100_ecos.h
"

32 
	#¥ötk
 
DEBUG_PRINTF


	)

34 
	#¥Ÿe˘
()

	)

35 
	#u≈rŸe˘
()

	)

39 
	~<löux/kî√l.h
>

40 
	~<löux/•ölock.h
>

41 
	~<asm/dñay.h
>

42 
	~<asm/io.h
>

44 
	~"¨7100.h
"

46 
¨7100_Êash_•i_down
();

47 
¨7100_Êash_•i_up
();

49 
	#¥Ÿe˘
(Ë
	`¨7100_Êash_•i_down
()

	)

50 
	#u≈rŸe˘
(Ë
	`¨7100_Êash_•i_up
()

	)

55 
	~"gíîic_•i.h
"

56 
	~"gíîic_i2c.h
"

59 #ifde‡
CONFIG_AR9100


61 
bﬂrd_vîsi⁄
;

63 
	#AR9100_SPI_GPIO_OE
 0x18040000

	)

64 
	#AR9100_SPI_GPIO_OUT
 0x18040008

	)

65 
	#AR9100_SPI_GPIO_FUNC
 0x18040028

	)

66 
	#AR9100_SPI_CLK_HIGH
 (1<<23)

	)

67 
	#AR9100_SPI_CLK_LOW
 ~(1<<23)

	)

68 
	#AR9100_SPI_DO_HI
 (1<<0)

	)

69 
	#AR9100_SPI_CS_DISABLE_0
 (1<<12)

	)

70 
	#AR9100_SPI_CS_DISABLE_1
 (1<<13)

	)

71 
	#AR9100_SPI_CLK


	)

72 
	#AR9100_SPI_GPIO_IN
 0x18040004

	)

76 
	#GENERIC_SPI_FS
 0x1f000000

	)

77 
	#GENERIC_SPI_CLOCK
 0x1f000004

	)

79 
	#GENERIC_SPI_WRITE
 0x1f000008

	)

87 
	#GENERIC_SPI_RD_SHIFT_REG
 0x1f00000¯

	)

89 
	#GENERIC_SPI_CS_DISABLE_0
 (1<<16)

	)

90 
	#GENERIC_SPI_CS_DISABLE_1
 (1<<17)

	)

91 
	#GENERIC_SPI_CS_DISABLE_2
 (1<<18)

	)

93 
	#GENERIC_SPI_CS_DIS
 (
GENERIC_SPI_CS_DISABLE_0
|
GENERIC_SPI_CS_DISABLE_1
|
GENERIC_SPI_CS_DISABLE_2
)

	)

95 
	#GENERIC_SPI_D0_HIGH
 (1<<0)

	)

96 
	#GENERIC_SPI_CLK_HIGH
 (1<<8)

	)

98 #ifde‡
CONFIG_AR9100


100 
	$gíîic_•i_ac˚ss_íabÀ
(
cs
)

102 
uöt32_t
 
vÆ
;

104 
	`¥Ÿe˘
();

105 
vÆ
 = (
	`¨7100_ªg_rd
(
AR9100_SPI_GPIO_OE
)|0x02);

106 
	`¨7100_ªg_wr_nf
(
AR9100_SPI_GPIO_OE
,
vÆ
);

107 
vÆ
 = (
	`¨7100_ªg_rd
(
AR9100_SPI_GPIO_OUT
) & ~(0x0A));

108 
	`¨7100_ªg_wr_nf
(
AR9100_SPI_GPIO_OUT
,
vÆ
);

111 
	}
}

113 
	$gíîic_•i_ac˚ss_d⁄e
()

115 
uöt32_t
 
vÆ
;

117 
vÆ
 = (
	`¨7100_ªg_rd
(
AR9100_SPI_GPIO_OE
)|0x02);

118 
	`¨7100_ªg_wr_nf
(
AR9100_SPI_GPIO_OE
,
vÆ
);

119 
vÆ
 = (
	`¨7100_ªg_rd
(
AR9100_SPI_GPIO_OUT
)|0x02);

120 
	`¨7100_ªg_wr_nf
(
AR9100_SPI_GPIO_OUT
,
vÆ
);

122 
	`u≈rŸe˘
();

125 
	}
}

127 
	$gíîic_•i_öô
(
cs
)

130 
	}
}

133 
	#IN_DATA_GPIO
 3

	)

134 
	#OUT_DATA_GPIO
 16

	)

135 
	#CLK_GPIO
 17

	)

138 
	$gíîic_•i_øw_ouçut_u8_050
(
vÆ
)

140 
i
, 
rd_vÆ
, 
wr_vÆ
;

142 
i
 = 7; i >= 0; i--) {

143 
rd_vÆ
 = 
	`¨7100_ªg_rd
(
AR9100_SPI_GPIO_OUT
);

145 
rd_vÆ
 &~(1 << 
CLK_GPIO
);

147 
wr_vÆ
 = (((
vÆ
 >> 
i
Ë& 1Ë<< 
OUT_DATA_GPIO
);

148 
wr_vÆ
 |(
rd_vÆ
 & ~(1 << 
OUT_DATA_GPIO
));

150 
	`¨7100_ªg_wr_nf
(
AR9100_SPI_GPIO_OUT
, 
wr_vÆ
);

152 
wr_vÆ
 |(1 << 
CLK_GPIO
);

153 
	`¨7100_ªg_wr_nf
(
AR9100_SPI_GPIO_OUT
, 
wr_vÆ
);

155 
	}
}

157 
	$gíîic_•i_øw_öput_u32_050
()

159 
i
, 
rd_vÆ
;

160 
ªt_vÆ
 = 0;

163 
rd_vÆ
 = (
	`¨7100_ªg_rd
(
AR9100_SPI_GPIO_OE
Ë& ~(1 << 
IN_DATA_GPIO
));

164 
	`¨7100_ªg_wr_nf
(
AR9100_SPI_GPIO_OE
, 
rd_vÆ
);

167 
rd_vÆ
 = (
	`¨7100_ªg_rd
(
AR9100_SPI_GPIO_OE
Ë| (1 << 
CLK_GPIO
));

168 
	`¨7100_ªg_wr_nf
(
AR9100_SPI_GPIO_OE
, 
rd_vÆ
);

170 
i
 = 31; i >= 0; i--) {

171 
rd_vÆ
 = 
	`¨7100_ªg_rd
(
AR9100_SPI_GPIO_OUT
);

172 
rd_vÆ
 &~(1 << 
CLK_GPIO
);

173 
	`¨7100_ªg_wr_nf
(
AR9100_SPI_GPIO_OUT
, 
rd_vÆ
);

175 
rd_vÆ
 = 
	`¨7100_ªg_rd
(
AR9100_SPI_GPIO_OUT
);

176 
rd_vÆ
 |(1 << 
CLK_GPIO
);

177 
	`¨7100_ªg_wr_nf
(
AR9100_SPI_GPIO_OUT
, 
rd_vÆ
);

179 
rd_vÆ
 = 
	`¨7100_ªg_rd
(
AR9100_SPI_GPIO_IN
);

181 
ªt_vÆ
 |((
rd_vÆ
 & (1 << 
IN_DATA_GPIO
)Ë>> IN_DATA_GPIOË<< 
i
;

184 
rd_vÆ
 = 
	`¨7100_ªg_rd
(
AR9100_SPI_GPIO_OUT
);

185 
rd_vÆ
 &~(1 << 
CLK_GPIO
);

186 
	`¨7100_ªg_wr_nf
(
AR9100_SPI_GPIO_OUT
, 
rd_vÆ
);

188  
ªt_vÆ
;

189 
	}
}

192 
	$gpio_˛k_£tup
()

194 
rd_vÆ
;

196 
rd_vÆ
 = (
	`¨7100_ªg_rd
(
AR9100_SPI_GPIO_OE
Ë| (1 << 
OUT_DATA_GPIO
));

197 
	`¨7100_ªg_wr_nf
(
AR9100_SPI_GPIO_OE
, 
rd_vÆ
);

200 
rd_vÆ
 = (
	`¨7100_ªg_rd
(
AR9100_SPI_GPIO_OE
Ë| (1 << 
CLK_GPIO
));

201 
	`¨7100_ªg_wr_nf
(
AR9100_SPI_GPIO_OE
, 
rd_vÆ
);

202 
	}
}

205 
	$gíîic_•i_øw_ouçut_u8_040
(
vÆ
)

207 
ii
,
rd_vÆ
, 
wr_vÆ
;

210 
cs0to2mask
 = (0xbf000000);

212 
rd_vÆ
 = (
	`¨7100_ªg_rd
(
AR9100_SPI_GPIO_OE
) & ~(0x08));

213 
	`¨7100_ªg_wr_nf
(
AR9100_SPI_GPIO_OE
,
rd_vÆ
);

216 
ii
 = 7; ii>=0 ; ii--) {

217 
uöt32_t
 
jj
 = (
vÆ
 >> 
ii
) & 1;

220 if(
jj
)

221 
wr_vÆ
 = (
cs0to2mask
 | (1 << 22));

223 
wr_vÆ
 = 
cs0to2mask
;

225 
rd_vÆ
=
	`¨7100_ªg_rd
(
wr_vÆ
);

227 
rd_vÆ
=
	`¨7100_ªg_rd
((
wr_vÆ
 | 
AR9100_SPI_CLK_HIGH
));

229 
	}
}

231 
	$gíîic_•i_øw_öput_u32_040
()

233 
ii
;

234 
uöt32_t
 
vÆ
;

235 
uöt32_t
 
rd_vÆ
 = 0x0;

236 
cs0to2mask
 = 0xbf000000;

238 
vÆ
 = (
	`¨7100_ªg_rd
(
AR9100_SPI_GPIO_OE
) & ~(0x08));

239 
	`¨7100_ªg_wr_nf
(
AR9100_SPI_GPIO_OE
,
vÆ
);

240 
vÆ
=
	`¨7100_ªg_rd
(
cs0to2mask
);

244 
ii
 = 31; ii>=0 ; ii--) {

246 
vÆ
=
	`¨7100_ªg_rd
((
cs0to2mask
 | 
AR9100_SPI_CLK_HIGH
));

247 
vÆ
 = 
	`¨7100_ªg_rd
(
AR9100_SPI_GPIO_IN
);

248 
rd_vÆ
 =Ñd_vÆ | (((
vÆ
 >> 3Ë& 0x1)<< 
ii
);

249 
vÆ
=
	`¨7100_ªg_rd
(
cs0to2mask
);

252 
vÆ
=
	`¨7100_ªg_rd
(
cs0to2mask
);

255  
rd_vÆ
;

256 
	}
}

259 
	$gíîic_•i_øw_ouçut_u8
(
vÆ
)

261 i‡(
bﬂrd_vîsi⁄
 >= 50) {

262 
	`gíîic_•i_øw_ouçut_u8_050
(
vÆ
);

264 
	`gíîic_•i_øw_ouçut_u8_040
(
vÆ
);

266 
	}
}

269 
	$gíîic_•i_øw_öput_u32
()

271 i‡(
bﬂrd_vîsi⁄
 >= 50) {

272  
	`gíîic_•i_øw_öput_u32_050
();

274  
	`gíîic_•i_øw_öput_u32_040
();

276 
	}
}

280 
	$gíîic_•i_ac˚ss_íabÀ
(
cs
)

283 
	`¥Ÿe˘
();

285 
	`¨7100_ªg_wr
(
GENERIC_SPI_CLOCK
, 0x43);

290 
	`¨7100_ªg_wr_nf
(
GENERIC_SPI_FS
, 1);

291 
	`¨7100_ªg_wr_nf
(
GENERIC_SPI_WRITE
, 
GENERIC_SPI_CS_DIS
);

294 
cs0to2mask
;

295 
cs0to2mask
 = 
	`¨7100_ªg_rd
(
GENERIC_SPI_WRITE
Ë& 
GENERIC_SPI_CS_DIS
;

296 
	`¨7100_ªg_wr
 (
GENERIC_SPI_WRITE
, 
cs0to2mask
 | 
GENERIC_SPI_CLK_HIGH
 );

299 
	`gíîic_i2c_as£π_cs
(
cs
);

302 
	}
}

305 
	$gíîic_•i_ac˚ss_d⁄e
()

307 
	`gíîic_i2c_dós£π_cs
();

308 
	`¨7100_ªg_wr_nf
(
GENERIC_SPI_FS
, 0);

310 
	`u≈rŸe˘
();

313 
	}
}

316 
	$gíîic_•i_öô
(
cs
)

320  
	`gíîic_i2c_öô_gpio
();

321 
	}
}

326 
	$gíîic_•i_øw_ouçut_u8
(
vÆ
)

328 
ii
;

330 
cs0to2mask
 = 
	`¨7100_ªg_rd
(
GENERIC_SPI_WRITE
Ë& ~(
GENERIC_SPI_D0_HIGH
|
GENERIC_SPI_CLK_HIGH
);

333 
ii
 = 7; ii>=0 ; ii--) {

334 
jj
 = (
vÆ
 >> 
ii
) & 1;

336 
	`¨7100_ªg_wr
(
GENERIC_SPI_WRITE
, 
cs0to2mask
 | 
jj
 );

337 
	`¨7100_ªg_wr
(
GENERIC_SPI_WRITE
, 
cs0to2mask
 | 
jj
 | 
GENERIC_SPI_CLK_HIGH
 );

339 
	}
}

342 
	$gíîic_•i_øw_öput_u32
()

344 
ii
;

346 
cs0to2mask
 = 
	`¨7100_ªg_rd
(
GENERIC_SPI_WRITE
Ë& ~(
GENERIC_SPI_D0_HIGH
|
GENERIC_SPI_CLK_HIGH
);

349 
ii
 = 31; ii>=0 ; ii--) {

350 
	`¨7100_ªg_wr
(
GENERIC_SPI_WRITE
, 
cs0to2mask
 );

351 
	`¨7100_ªg_wr
(
GENERIC_SPI_WRITE
, 
cs0to2mask
 | 
GENERIC_SPI_CLK_HIGH
 );

355  
	`¨7100_ªg_rd
(
GENERIC_SPI_RD_SHIFT_REG
);

356 
	}
}

359 
	$gíîic_•i_øw_öput_u8
()

361 
ii
;

363 
cs0to2mask
 = 
	`¨7100_ªg_rd
(
GENERIC_SPI_WRITE
Ë& ~(
GENERIC_SPI_D0_HIGH
|
GENERIC_SPI_CLK_HIGH
);

366 
ii
 = 7; ii>=0 ; ii--) {

367 
	`¨7100_ªg_wr
(
GENERIC_SPI_WRITE
, 
cs0to2mask
 );

368 
	`¨7100_ªg_wr
(
GENERIC_SPI_WRITE
, 
cs0to2mask
 | 
GENERIC_SPI_CLK_HIGH
 );

372  
	`¨7100_ªg_rd
(
GENERIC_SPI_RD_SHIFT_REG
);

373 
	}
}

	@ag7100/generic_spi.h

20 #i‚de‡
_GENERIC_SPI_H


21 
	#_GENERIC_SPI_H


	)

23 #i‚de‡
CEXTERN


24 
	#CEXTERN
 
ölöe


	)

27 
	~"gíîic_i2c.h
"

29 
	#GENERIC_SPI_VSC73XX_CS
 
GENERIC_I2C_VSC73XX_CS


	)

30 
	#GENERIC_SPI_STEREO_CS
 
GENERIC_I2C_STEREO_CS


	)

31 
	#GENERIC_SPI_SLIC_CS0
 
GENERIC_I2C_SLIC_CS0


	)

32 
	#GENERIC_SPI_SLIC_CS1
 
GENERIC_I2C_SLIC_CS1


	)

35 
gíîic_•i_öô
(
cs
);

38 
gíîic_•i_ac˚ss_íabÀ
(
cs
);

41 
gíîic_•i_ac˚ss_d⁄e
();

44 
gíîic_•i_øw_ouçut_u8
(
vÆ
);

47 
gíîic_•i_øw_öput_u32
();

50 
gíîic_•i_øw_öput_u8
();

52 #ifde‡
CONFIG_AR9100


53 
gpio_˛k_£tup
();

	@ag7100/ipPhy.c

32 
	~<löux/c⁄fig.h
>

33 
	~<löux/ty≥s.h
>

34 
	~<löux/√tdevi˚.h
>

35 
	~<löux/ëhîdevi˚.h
>

36 
	~<löux/dñay.h
>

38 
	~"ag7100_phy.h
"

40 
	~"ùPhy.h
"

45 
	mPHY_SRCPORT_INFO
,

46 
	mPHY_PORTINFO_SIZE
,

47 } 
	tPHY_CAP_TYPE
;

50 
	mPHY_SRCPORT_NONE
,

51 
	mPHY_SRCPORT_VLANTAG
,

52 
	mPHY_SRCPORT_TRAILER
,

53 } 
	tPHY_SRCPORT_TYPE
;

55 #ifde‡
DEBUG


56 
	#DRV_DEBUG
 1

	)

58 
	#DRV_DEBUG
 1

	)

60 #i‡
DRV_DEBUG


61 
	#DRV_DEBUG_PHYERROR
 0x00000001

	)

62 
	#DRV_DEBUG_PHYCHANGE
 0x00000002

	)

63 
	#DRV_DEBUG_PHYSETUP
 0x00000004

	)

65 
	gùPhyDebug
 = 
DRV_DEBUG_PHYERROR
;

67 
	#DRV_LOG
(
FLG
, 
X0
, 
X1
, 
X2
, 
X3
, 
X4
, 
X5
, 
X6
) \

69 i‡(
ùPhyDebug
 & (
FLG
)) { \

70 
	`logMsg
(
X0
, 
X1
, 
X2
, 
X3
, 
X4
, 
X5
, 
X6
); \

72 }

	)

74 
	#DRV_MSG
(
x
,
a
,
b
,
c
,
d
,
e
,
f
) \

75 
	`logMsg
(
x
,
a
,
b
,
c
,
d
,
e
,
f
)

	)

77 
	#DRV_PRINT
(
FLG
, 
X
) \

79 i‡(
ùPhyDebug
 & (
FLG
)) { \

80 
¥ötk
 
X
; \

82 }

	)

85 
	#DRV_LOG
(
DBG_SW
, 
X0
, 
X1
, 
X2
, 
X3
, 
X4
, 
X5
, 
X6
)

	)

86 
	#DRV_MSG
(
x
,
a
,
b
,
c
,
d
,
e
,
f
)

	)

87 
	#DRV_PRINT
(
DBG_SW
,
X
)

	)

90 
	#IP_LAN_PORT_VLAN
 1

	)

91 
	#IP_WAN_PORT_VLAN
 2

	)

93 
	#ENET_UNIT_DEFAULT
 0

	)

95 
	#BOOL
 
uöt32_t


	)

96 
	#TRUE
 1

	)

97 
	#FALSE
 0

	)

103 
BOOL
 
	misE√tP‹t
;

104 
BOOL
 
	misPhyAlive
;

105 
	mëhUnô
;

106 
uöt32_t
 
	mphyBa£
;

107 
uöt32_t
 
	mphyAddr
;

108 
uöt32_t
 
	mVLANTabÀSëtög
;

109 } 
	tùPhyInfo_t
;

114 
ùPhyInfo_t
 
	gùPhyInfo
[] = {

126 {
TRUE
,

127 
FALSE
,

128 
ENET_UNIT_DEFAULT
,

130 
IP_PHY0_ADDR
,

131 
IP_LAN_PORT_VLAN


134 {
TRUE
,

135 
FALSE
,

136 
ENET_UNIT_DEFAULT
,

138 
IP_PHY1_ADDR
,

139 
IP_LAN_PORT_VLAN


142 {
TRUE
,

143 
FALSE
,

144 
ENET_UNIT_DEFAULT
,

146 
IP_PHY2_ADDR
,

147 
IP_LAN_PORT_VLAN


150 {
TRUE
,

151 
FALSE
,

152 
ENET_UNIT_DEFAULT
,

154 
IP_PHY3_ADDR
,

155 
IP_LAN_PORT_VLAN


158 {
TRUE
,

159 
FALSE
,

160 
ENET_UNIT_DEFAULT
,

162 
IP_PHY4_ADDR
,

163 
IP_LAN_PORT_VLAN


166 {
FALSE
,

167 
TRUE
,

168 
ENET_UNIT_DEFAULT
,

171 
IP_LAN_PORT_VLAN


175 
	#IP_GLOBALREGBASE
 0

	)

177 
	#IP_PHY_MAX
 ((
ùPhyInfo
Ë/ (ùPhyInfo[0]))

	)

180 
	#IP_ID_MIN
 0

	)

181 
	#IP_ID_MAX
 (
IP_PHY_MAX
-1)

	)

184 
	#IP_IS_ENET_PORT
(
phyUnô
Ë(
ùPhyInfo
[phyUnô].
isE√tP‹t
)

	)

185 
	#IP_IS_PHY_ALIVE
(
phyUnô
Ë(
ùPhyInfo
[phyUnô].
isPhyAlive
)

	)

186 
	#IP_ETHUNIT
(
phyUnô
Ë(
ùPhyInfo
[phyUnô].
ëhUnô
)

	)

187 
	#IP_PHYBASE
(
phyUnô
Ë(
ùPhyInfo
[phyUnô].
phyBa£
)

	)

188 
	#IP_PHYADDR
(
phyUnô
Ë(
ùPhyInfo
[phyUnô].
phyAddr
)

	)

189 
	#IP_VLAN_TABLE_SETTING
(
phyUnô
Ë(
ùPhyInfo
[phyUnô].
VLANTabÀSëtög
)

	)

192 
	#IP_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
) \

193 (
	`IP_IS_ENET_PORT
(
phyUnô
) && \

194 
	`IP_ETHUNIT
(
phyUnô
Ë=(
ëhUnô
))

	)

197 
BOOL
 
ù_phyIsLökAlive
(
phyUnô
);

198 
ù_VLANInô
(
ëhUnô
);

199 
ù_vîifyRódy
(
ëhUnô
);

200 #i‡
DEBUG


201 
ù_phyShow
(
phyUnô
);

202 
ù_phySë
(
phyUnô
, 
uöt32_t
 
ªgnum
, uöt32_à
vÆue
);

203 
ù_globÆSë
(
uöt32_t
 
phyAddr
, uöt32_à
ªgnum
, uöt32_à
vÆue
);

214 
BOOL


215 
	$ù_phyIsLökAlive
(
phyUnô
)

217 
uöt16_t
 
phyHwSètus
;

218 
uöt32_t
 
phyBa£
;

219 
uöt32_t
 
phyAddr
;

221 
phyBa£
 = 
	`IP_PHYBASE
(
phyUnô
);

222 
phyAddr
 = 
	`IP_PHYADDR
(
phyUnô
);

224 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
IP_PHY_STATUS
);

226 i‡(
phyHwSètus
 & 
IP_STATUS_LINK_PASS
) {

227  
TRUE
;

229  
FALSE
;

231 
	}
}

238 
	$ù_VLANInô
(
ëhUnô
)

240 
phyUnô
;

241 
uöt32_t
 
phyBa£
;

242 
uöt32_t
 
phyReg
;

244 
phyBa£
 = 
IP_GLOBALREGBASE
;

246 
phyUnô
=0;ÖhyUnô < 
IP_PHY_MAX
;ÖhyUnit++) {

247 i‡(
	`IP_ETHUNIT
(
phyUnô
Ë!
ëhUnô
) {

250 
	`phy_ªg_wrôe
(
phyBa£
, 
IP_GLOBAL_PHY29_ADDR
,

251 
IP_GLOBAL_PHY29_24_REG
 + ((
phyUnô
 == 5) ? (phyUnit + 1) :ÖhyUnit),

252 
	`IP_VLAN_TABLE_SETTING
(
phyUnô
));

255 
phyReg
 = 
	`phy_ªg_ªad
(
phyBa£
, 
IP_GLOBAL_PHY30_ADDR
, 
IP_GLOBAL_PHY30_1_REG
);

256 
phyReg
 =ÖhyReg | ((1 << 
phyUnô
Ë<< 
IP_VLAN1_OUTPUT_PORT_MASK_S
);

257 
	`phy_ªg_wrôe
(
phyBa£
, 
IP_GLOBAL_PHY30_ADDR
, 
IP_GLOBAL_PHY30_1_REG
, 
phyReg
);

259 
phyReg
 = 
	`phy_ªg_ªad
(
phyBa£
, 
IP_GLOBAL_PHY30_ADDR
, 
IP_GLOBAL_PHY30_9_REG
);

260 
phyReg
 =ÖhyReg | 
TAG_VLAN_ENABLE
;

261 
phyReg
 =ÖhyReg & ~
VID_INDX_SEL_M
;

262 
	`phy_ªg_wrôe
(
phyBa£
, 
IP_GLOBAL_PHY30_ADDR
, 
IP_GLOBAL_PHY30_9_REG
, 
phyReg
);

264 
	}
}

268 
	$ù_vîifyRódy
(
ëhUnô
)

270 
phyUnô
;

271 
uöt32_t
 
phyBa£
 = 0;

272 
uöt32_t
 
phyAddr
;

273 
uöt16_t
 
phyID1
;

274 
uöt16_t
 
phyID2
;

280 
phyUnô
=0;ÖhyUnô < 
IP_PHY_MAX
;ÖhyUnit++) {

281 i‡(!
	`IP_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

285 
phyBa£
 = 
	`IP_PHYBASE
(
phyUnô
);

286 
phyAddr
 = 
	`IP_PHYADDR
(
phyUnô
);

288 
phyID1
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
IP_PHY_ID1
);

292 
phyUnô
=0;ÖhyUnô < 
IP_PHY_MAX
;ÖhyUnit++) {

293 i‡(!
	`IP_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

300 
phyBa£
 = 
	`IP_PHYBASE
(
phyUnô
);

301 
phyAddr
 = 
	`IP_PHYADDR
(
phyUnô
);

303 
phyID1
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
IP_PHY_ID1
);

304 i‡(
phyID1
 !
IP_PHY_ID1_EXPECTATION
) {

305 
	`DRV_PRINT
(
DRV_DEBUG_PHYERROR
,

307 
ëhUnô
,

308 
phyUnô
,

309 
IP_PHY_ID1_EXPECTATION
,

310 
phyID1
));

314 
phyID2
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
IP_PHY_ID2
);

315 i‡((
phyID2
 & 
IP_OUI_LSB_MASK
Ë!
IP_OUI_LSB_EXPECTATION
) {

316 
	`DRV_PRINT
(
DRV_DEBUG_PHYERROR
,

318 
ëhUnô
,

319 
phyUnô
,

320 
IP_OUI_LSB_EXPECTATION
,

321 
phyID2
));

325 
	`DRV_PRINT
(
DRV_DEBUG_PHYSETUP
,

327 
ëhUnô
,

328 
phyUnô
,

329 (
phyID2
 & 
IP_MODEL_NUM_MASK
Ë>> 
IP_MODEL_NUM_SHIFT
,

330 (
phyID2
 & 
IP_REV_NUM_MASK
Ë>> 
IP_REV_NUM_SHIFT
));

333 
	}
}

348 
BOOL


349 
	$ù_phySëup
(
ëhUnô
)

351 
phyUnô
;

352 
uöt16_t
 
phyHwSètus
;

353 
uöt16_t
 
timeout
;

354 
liveLöks
 = 0;

355 
uöt32_t
 
phyBa£
 = 0;

356 
BOOL
 
foundPhy
 = 
FALSE
;

357 
uöt32_t
 
phyAddr
;

360 
phyUnô
=0;ÖhyUnô < 
IP_PHY_MAX
;ÖhyUnit++) {

361 i‡(!
	`IP_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

365 
phyBa£
 = 
	`IP_PHYBASE
(
phyUnô
);

366 
phyAddr
 = 
	`IP_PHYADDR
(
phyUnô
);

368 
	`phy_ªg_wrôe
(
phyBa£
, 
phyAddr
, 
IP_PHY_CONTROL
,

369 
IP_CTRL_SOFTWARE_RESET
);

375 
	`mdñay
(300);

377 
	`ù_vîifyRódy
(
ëhUnô
);

380 
phyUnô
=0;ÖhyUnô < 
IP_PHY_MAX
;ÖhyUnit++) {

381 i‡(
	`IP_ETHUNIT
(
phyUnô
Ë!
ëhUnô
) {

385 
phyBa£
 = 
	`IP_PHYBASE
(
phyUnô
);

386 
foundPhy
 = 
TRUE
;

390 i‡(!
foundPhy
) {

391  
FALSE
;

394 #ifde‡
COBRA_TODO


403 
phyUnô
=0;ÖhyUnô < 
IP_PHY_MAX
;ÖhyUnit++) {

404 i‡(!
	`IP_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

408 
phyBa£
 = 
	`IP_PHYBASE
(
phyUnô
);

409 
phyAddr
 = 
	`IP_PHYADDR
(
phyUnô
);

411 
	`phy_ªg_wrôe
(
phyBa£
, 
phyAddr
, 
IP_AUTONEG_ADVERT
,

412 
IP_ADVERTISE_ALL
);

413 
	`phy_ªg_wrôe
(
phyBa£
, 
phyAddr
, 
IP_PHY_CONTROL
,

414 
IP_CTRL_AUTONEGOTIATION_ENABLE
 | 
IP_CTRL_START_AUTONEGOTIATION
);

422 
timeout
=5;

423 
phyUnô
=0; (phyUnô < 
IP_PHY_MAX
) ;ÖhyUnit++) {

424 i‡(!
	`IP_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

428 
phyBa£
 = 
	`IP_PHYBASE
(
phyUnô
);

429 
phyAddr
 = 
	`IP_PHYADDR
(
phyUnô
);

431 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
IP_PHY_STATUS
);

433 i‡(
	`IP_AUTONEG_DONE
(
phyHwSètus
)) {

434 
	`DRV_PRINT
(
DRV_DEBUG_PHYSETUP
,

435 ("P‹à%d, Neg Suc˚ss\n", 
phyUnô
));

438 i‡(
timeout
 == 0) {

439 
	`DRV_PRINT
(
DRV_DEBUG_PHYSETUP
,

440 ("P‹à%d, Negogüti⁄Åimeout\n", 
phyUnô
));

443 i‡(--
timeout
 == 0) {

444 
	`DRV_PRINT
(
DRV_DEBUG_PHYSETUP
,

445 ("P‹à%d, Negogüti⁄Åimeout\n", 
phyUnô
));

449 
	`mdñay
(150);

462 
phyUnô
=0;ÖhyUnô < 
IP_PHY_MAX
;ÖhyUnit++) {

463 i‡(!
	`IP_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

467 i‡(
	`ù_phyIsLökAlive
(
phyUnô
)) {

468 
liveLöks
++;

469 
	`IP_IS_PHY_ALIVE
(
phyUnô
Ë
TRUE
;

471 
	`IP_IS_PHY_ALIVE
(
phyUnô
Ë
FALSE
;

474 
	`DRV_PRINT
(
DRV_DEBUG_PHYSETUP
,

476 
ëhUnô
,

477 
	`phy_ªg_ªad
(
	`IP_PHYBASE
(
phyUnô
),

478 
	`IP_PHYADDR
(
phyUnô
),

479 
IP_PHY_STATUS
)));

482 
	`ù_VLANInô
(
ëhUnô
);

484  (
liveLöks
 > 0);

485 
	}
}

497 
	$ù_phyIsFuŒDu∂ex
(
ëhUnô
)

499 
phyUnô
;

500 
uöt32_t
 
phyBa£
;

501 
uöt32_t
 
phyAddr
;

502 
uöt16_t
 
phyHwSètus
;

504 
phyUnô
=0;ÖhyUnô < 
IP_PHY_MAX
;ÖhyUnit++) {

505 i‡(!
	`IP_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

509 i‡(
	`ù_phyIsLökAlive
(
phyUnô
)) {

511 
phyBa£
 = 
	`IP_PHYBASE
(
phyUnô
);

512 
phyAddr
 = 
	`IP_PHYADDR
(
phyUnô
);

514 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
IP_LINK_PARTNER_ABILITY
);

515 
	`¥ötk
("ùPhy.c:ÖhyHwSètu†0x%x\n",
phyHwSètus
);

516 i‡((
phyHwSètus
 & 
IP_LINK_100BASETX_FULL_DUPLEX
) ||

517 (
phyHwSètus
 & 
IP_LINK_10BASETX_FULL_DUPLEX
)) {

518  
TRUE
;

524  
FALSE
;

526 
	}
}

539 
BOOL


540 
	$ù_phyS≥ed
(
ëhUnô
)

542 
phyUnô
;

543 
uöt16_t
 
phyHwSètus
;

544 
uöt32_t
 
phyBa£
;

545 
uöt32_t
 
phyAddr
;

547 
phyUnô
=0;ÖhyUnô < 
IP_PHY_MAX
;ÖhyUnit++) {

548 i‡(!
	`IP_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

552 i‡(
	`ù_phyIsLökAlive
(
phyUnô
)) {

554 
phyBa£
 = 
	`IP_PHYBASE
(
phyUnô
);

555 
phyAddr
 = 
	`IP_PHYADDR
(
phyUnô
);

557 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
IP_LINK_PARTNER_ABILITY
);

559 i‡(
phyHwSètus
 & 
IP_LINK_100BASETX
) {

560  
AG7100_PHY_SPEED_100TX
;

565  
AG7100_PHY_SPEED_10T
;

566 
	}
}

581 
	$ù_phyIsUp
(
ëhUnô
)

584 
phyUnô
;

585 
uöt16_t
 
phyHwSètus
;

586 
ùPhyInfo_t
 *
œ°Sètus
;

587 
lökCou¡
 = 0;

588 
lo°Löks
 = 0;

589 
gaöedLöks
 = 0;

590 
uöt32_t
 
phyBa£
;

591 
uöt32_t
 
phyAddr
;

593 
phyUnô
=0;ÖhyUnô < 
IP_PHY_MAX
;ÖhyUnit++) {

594 i‡(!
	`IP_IS_ETHUNIT
(
phyUnô
, 
ëhUnô
)) {

598 
phyBa£
 = 
	`IP_PHYBASE
(
phyUnô
);

599 
phyAddr
 = 
	`IP_PHYADDR
(
phyUnô
);

601 
œ°Sètus
 = &
ùPhyInfo
[
phyUnô
];

602 
phyHwSètus
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
IP_PHY_STATUS
);

604 i‡(
œ°Sètus
->
isPhyAlive
) {

606 i‡(
phyHwSètus
 & 
IP_STATUS_LINK_PASS
) {

607 
lökCou¡
++;

609 
lo°Löks
++;

610 #ifde‡
COBRA_TODO


611 
	`mv_ÊushATUDB
(
phyUnô
);

613 
	`DRV_PRINT
(
DRV_DEBUG_PHYCHANGE
,("\nenet%dÖort%d down\n",

614 
ëhUnô
, 
phyUnô
));

615 
œ°Sètus
->
isPhyAlive
 = 
FALSE
;

619 i‡(
	`IP_AUTONEG_DONE
(
phyHwSètus
)) {

620 
gaöedLöks
++;

621 
lökCou¡
++;

622 
	`DRV_PRINT
(
DRV_DEBUG_PHYCHANGE
,("\nenet%dÖort%d up\n",

623 
ëhUnô
, 
phyUnô
));

624 
œ°Sètus
->
isPhyAlive
 = 
TRUE
;

629  (
lökCou¡
);

632 i‡(
lökCou¡
 == 0) {

633 i‡(
lo°Löks
) {

635 
	`phyLökLo°
(
ëhUnô
);

638 i‡(
gaöedLöks
 =
lökCou¡
) {

640 
	`phyLökGaöed
(
ëhUnô
);

644 
	}
}

646 #i‡
DEBUG


649 
	sùRegi°îTabÀE¡ry_s
 {

650 
uöt32_t
 
	mªgNum
;

651 *
	mªgIdSåög
;

652 } 
	tùRegi°îTabÀE¡ry_t
;

654 
ùRegi°îTabÀE¡ry_t
 
	gùPhyRegi°îTabÀ
[] = {

655 {
IP_PHY_CONTROL
, "PHY Control "},

656 {
IP_PHY_STATUS
, "PHY Status "},

657 {
IP_PHY_ID1
, "PHY Identifier 1 "},

658 {
IP_PHY_ID2
, "PHY Identifier 2 "},

659 {
IP_AUTONEG_ADVERT
, "Auto-Negotiation Advertisement "},

660 {
IP_LINK_PARTNER_ABILITY
, "Link Partner Ability "},

661 {
IP_AUTONEG_EXPANSION
, "Auto-Negotiation Expansion "},

663 
	gùPhyNumRegs
 = (
ùPhyRegi°îTabÀ
) / (ipPhyRegisterTable[0]);

666 
ùRegi°îTabÀE¡ry_t
 
	gùPhy29GlobÆRegi°îTabÀ
[] = {

667 {
IP_GLOBAL_PHY29_18_REG
, "29_18_REG "},

668 {
IP_GLOBAL_PHY29_19_REG
, "29_19_REG "},

669 {
IP_GLOBAL_PHY29_20_REG
, "29_20_REG "},

670 {
IP_GLOBAL_PHY29_21_REG
, "29_21_REG "},

671 {
IP_GLOBAL_PHY29_22_REG
, "29_22_REG "},

672 {
IP_GLOBAL_PHY29_23_REG
, "29_23_REG "},

673 {
IP_GLOBAL_PHY29_24_REG
, "29_24_REG "},

674 {
IP_GLOBAL_PHY29_25_REG
, "29_25_REG "},

675 {
IP_GLOBAL_PHY29_26_REG
, "29_26_REG "},

676 {
IP_GLOBAL_PHY29_27_REG
, "29_27_REG "},

677 {
IP_GLOBAL_PHY29_28_REG
, "29_28_REG "},

678 {
IP_GLOBAL_PHY29_29_REG
, "29_29_REG "},

679 {
IP_GLOBAL_PHY29_30_REG
, "29_30_REG "},

680 {
IP_GLOBAL_PHY29_31_REG
, "29_31_REG "},

682 
	gùPhy29GlobÆNumRegs
 =

683 (
ùPhy29GlobÆRegi°îTabÀ
) / (ipPhy29GlobalRegisterTable[0]);

686 
ùRegi°îTabÀE¡ry_t
 
	gùPhy30GlobÆRegi°îTabÀ
[] = {

687 {
IP_GLOBAL_PHY30_0_REG
, "30_0_REG "},

688 {
IP_GLOBAL_PHY30_1_REG
, "30_1_REG "},

689 {
IP_GLOBAL_PHY30_2_REG
, "30_2_REG "},

690 {
IP_GLOBAL_PHY30_3_REG
, "30_3_REG "},

691 {
IP_GLOBAL_PHY30_4_REG
, "30_4_REG "},

692 {
IP_GLOBAL_PHY30_5_REG
, "30_5_REG "},

693 {
IP_GLOBAL_PHY30_6_REG
, "30_6_REG "},

694 {
IP_GLOBAL_PHY30_7_REG
, "30_7_REG "},

695 {
IP_GLOBAL_PHY30_8_REG
, "30_8_REG "},

696 {
IP_GLOBAL_PHY30_9_REG
, "30_9_REG "},

697 {
IP_GLOBAL_PHY30_10_REG
, "30_10_REG "},

698 {
IP_GLOBAL_PHY30_11_REG
, "30_11_REG "},

699 {
IP_GLOBAL_PHY30_12_REG
, "30_12_REG "},

700 {
IP_GLOBAL_PHY30_13_REG
, "30_13_REG "},

701 {
IP_GLOBAL_PHY30_16_REG
, "30_16_REG "},

702 {
IP_GLOBAL_PHY30_17_REG
, "30_17_REG "},

703 {
IP_GLOBAL_PHY30_18_REG
, "30_18_REG "},

704 {
IP_GLOBAL_PHY30_20_REG
, "30_20_REG "},

705 {
IP_GLOBAL_PHY30_21_REG
, "30_21_REG "},

706 {
IP_GLOBAL_PHY30_22_REG
, "30_22_REG "},

707 {
IP_GLOBAL_PHY30_23_REG
, "30_23_REG "},

708 {
IP_GLOBAL_PHY30_24_REG
, "30_24_REG "},

709 {
IP_GLOBAL_PHY30_25_REG
, "30_25_REG "},

710 {
IP_GLOBAL_PHY30_26_REG
, "30_26_REG "},

711 {
IP_GLOBAL_PHY30_27_REG
, "30_27_REG "},

712 {
IP_GLOBAL_PHY30_28_REG
, "30_28_REG "},

713 {
IP_GLOBAL_PHY30_29_REG
, "30_29_REG "},

714 {
IP_GLOBAL_PHY30_30_REG
, "30_30_REG "},

715 {
IP_GLOBAL_PHY30_31_REG
, "30_31_REG "},

717 
	gùPhy30GlobÆNumRegs
 =

718 (
ùPhy30GlobÆRegi°îTabÀ
) / (ipPhy30GlobalRegisterTable[0]);

720 
ùRegi°îTabÀE¡ry_t
 
	gùPhy31GlobÆRegi°îTabÀ
[] = {

721 {
IP_GLOBAL_PHY31_0_REG
, "31_0_REG "},

722 {
IP_GLOBAL_PHY31_1_REG
, "31_1_REG "},

723 {
IP_GLOBAL_PHY31_2_REG
, "31_2_REG "},

724 {
IP_GLOBAL_PHY31_3_REG
, "31_3_REG "},

725 {
IP_GLOBAL_PHY31_4_REG
, "31_4_REG "},

726 {
IP_GLOBAL_PHY31_5_REG
, "31_5_REG "},

727 {
IP_GLOBAL_PHY31_6_REG
, "31_6_REG "},

730 
	gùPhy31GlobÆNumRegs
 =

731 (
ùPhy31GlobÆRegi°îTabÀ
) / (ipPhy31GlobalRegisterTable[0]);

743 
	$ù_phyShow
(
phyUnô
)

745 
i
;

746 
uöt16_t
 
vÆue
;

747 
uöt32_t
 
phyBa£
;

748 
uöt32_t
 
phyAddr
;

750 i‡(!
	`ù_vÆidPhyId
(
phyUnô
)) {

754 
phyBa£
 = 
	`IP_PHYBASE
(
phyUnô
);

755 
phyAddr
 = 
	`IP_PHYADDR
(
phyUnô
);

757 
	`¥ötk
("PHY state for PHY%d (enet%d,ÖhyBase 0x%8x,ÖhyAddr 0x%x)\n",

758 
phyUnô
,

759 
	`IP_ETHUNIT
(
phyUnô
),

760 
	`IP_PHYBASE
(
phyUnô
),

761 
	`IP_PHYADDR
(
phyUnô
));

763 
	`¥ötk
("PHY Registers:\n");

764 
i
=0; i < 
ùPhyNumRegs
; i++) {

766 
vÆue
 = 
	`phy_ªg_ªad
(
phyBa£
, 
phyAddr
, 
ùPhyRegi°îTabÀ
[
i
].
ªgNum
);

768 
	`¥ötk
("Reg %02d (0x%02x) %s = 0x%08x\n",

769 
ùPhyRegi°îTabÀ
[
i
].
ªgNum
,

770 
ùPhyRegi°îTabÀ
[
i
].
ªgNum
,

771 
ùPhyRegi°îTabÀ
[
i
].
ªgIdSåög
,

772 
vÆue
);

775 
phyBa£
 = 
IP_GLOBALREGBASE
;

777 
	`¥ötk
("Switch Global Registers:\n");

778 
	`¥ötk
("Phy29 Registers:\n");

779 
i
=0; i < 
ùPhy29GlobÆNumRegs
; i++) {

781 
vÆue
 = 
	`phy_ªg_ªad
(
phyBa£
, 
IP_GLOBAL_PHY29_ADDR
,

782 
ùPhy29GlobÆRegi°îTabÀ
[
i
].
ªgNum
);

784 
	`¥ötk
("Reg %02d (0x%02x) %s = 0x%08x\n",

785 
ùPhy29GlobÆRegi°îTabÀ
[
i
].
ªgNum
,

786 
ùPhy29GlobÆRegi°îTabÀ
[
i
].
ªgNum
,

787 
ùPhy29GlobÆRegi°îTabÀ
[
i
].
ªgIdSåög
,

788 
vÆue
);

791 
	`¥ötk
("Phy30 Registers:\n");

792 
i
=0; i < 
ùPhy30GlobÆNumRegs
; i++) {

794 
vÆue
 = 
	`phy_ªg_ªad
(
phyBa£
, 
IP_GLOBAL_PHY30_ADDR
,

795 
ùPhy30GlobÆRegi°îTabÀ
[
i
].
ªgNum
);

797 
	`¥ötk
("Reg %02d (0x%02x) %s = 0x%08x\n",

798 
ùPhy30GlobÆRegi°îTabÀ
[
i
].
ªgNum
,

799 
ùPhy30GlobÆRegi°îTabÀ
[
i
].
ªgNum
,

800 
ùPhy30GlobÆRegi°îTabÀ
[
i
].
ªgIdSåög
,

801 
vÆue
);

803 
	`¥ötk
("Phy31 Registers:\n");

804 
i
=0; i < 
ùPhy31GlobÆNumRegs
; i++) {

806 
vÆue
 = 
	`phy_ªg_ªad
(
phyBa£
, 
IP_GLOBAL_PHY31_ADDR
,

807 
ùPhy31GlobÆRegi°îTabÀ
[
i
].
ªgNum
);

809 
	`¥ötk
("Reg %02d (0x%02x) %s = 0x%08x\n",

810 
ùPhy31GlobÆRegi°îTabÀ
[
i
].
ªgNum
,

811 
ùPhy31GlobÆRegi°îTabÀ
[
i
].
ªgNum
,

812 
ùPhy31GlobÆRegi°îTabÀ
[
i
].
ªgIdSåög
,

813 
vÆue
);

815 
	}
}

822 
	$ù_phySë
(
phyUnô
, 
uöt32_t
 
ªgnum
, uöt32_à
vÆue
)

824 
uöt32_t
 
phyBa£
;

825 
uöt32_t
 
phyAddr
;

827 i‡(
	`ù_vÆidPhyId
(
phyUnô
)) {

829 
phyBa£
 = 
	`IP_PHYBASE
(
phyUnô
);

830 
phyAddr
 = 
	`IP_PHYADDR
(
phyUnô
);

832 
	`phy_ªg_wrôe
(
phyBa£
, 
phyAddr
, 
ªgnum
, 
vÆue
);

834 
	}
}

842 
	$ù_globÆSë
(
uöt32_t
 
phyAddr
, uöt32_à
ªgnum
, uöt32_à
vÆue
)

844 
uöt32_t
 
phyBa£
;

846 
phyBa£
 = 
IP_GLOBALREGBASE
;

848 
	`phy_ªg_wrôe
(
phyBa£
, 
phyAddr
, 
ªgnum
, 
vÆue
);

849 
	}
}

	@ag7100/ipPhy.h

15 #i‚de‡
IPPHY_H


16 
	#IPPHY_H


	)

21 
	#IP_PHY_CONTROL
 0

	)

22 
	#IP_PHY_STATUS
 1

	)

23 
	#IP_PHY_ID1
 2

	)

24 
	#IP_PHY_ID2
 3

	)

25 
	#IP_AUTONEG_ADVERT
 4

	)

26 
	#IP_LINK_PARTNER_ABILITY
 5

	)

27 
	#IP_AUTONEG_EXPANSION
 6

	)

31 
	#IP_CTRL_SOFTWARE_RESET
 0x8000

	)

32 
	#IP_CTRL_SPEED_100
 0x2000

	)

33 
	#IP_CTRL_AUTONEGOTIATION_ENABLE
 0x1000

	)

34 
	#IP_CTRL_START_AUTONEGOTIATION
 0x0200

	)

35 
	#IP_CTRL_SPEED_FULL_DUPLEX
 0x0100

	)

38 
	#IP_STATUS_AUTO_NEG_DONE
 0x0020

	)

39 
	#IP_STATUS_LINK_PASS
 0x0004

	)

41 
	#IP_AUTONEG_DONE
(
ù_phy_°©us
) \

42 (((
ù_phy_°©us
) & \

43 (
IP_STATUS_AUTO_NEG_DONE
)) == \

44 (
IP_STATUS_AUTO_NEG_DONE
))

	)

47 
	#IP_PHY_ID1_EXPECTATION
 0x0243

	)

50 
	#IP_OUI_LSB_MASK
 0xfc00

	)

51 
	#IP_OUI_LSB_EXPECTATION
 0x0c00

	)

52 
	#IP_OUI_LSB_SHIFT
 10

	)

53 
	#IP_MODEL_NUM_MASK
 0x03f0

	)

54 
	#IP_MODEL_NUM_SHIFT
 4

	)

55 
	#IP_REV_NUM_MASK
 0x000f

	)

56 
	#IP_REV_NUM_SHIFT
 0

	)

59 
	#IP_LINK_100BASETX_FULL_DUPLEX
 0x0100

	)

60 
	#IP_LINK_100BASETX
 0x0080

	)

61 
	#IP_LINK_10BASETX_FULL_DUPLEX
 0x0040

	)

62 
	#IP_LINK_10BASETX
 0x0020

	)

65 
	#IP_ADVERTISE_100FULL
 0x0100

	)

66 
	#IP_ADVERTISE_100HALF
 0x0080

	)

67 
	#IP_ADVERTISE_10FULL
 0x0040

	)

68 
	#IP_ADVERTISE_10HALF
 0x0020

	)

70 
	#IP_ADVERTISE_ALL
 (
IP_ADVERTISE_10HALF
 | 
IP_ADVERTISE_10FULL
 | \

71 
IP_ADVERTISE_100HALF
 | 
IP_ADVERTISE_100FULL
)

	)

74 
	#IP_VLAN_TAG_VALID
 0x81

	)

75 
	#IP_VLAN_TAG_SIZE
 4

	)

76 
	#IP_VLAN_TAG_OFFSET
 12

	)

77 
	#IP_SPECIAL_TAG_VALID
 0x81

	)

84 
	#IP_GLOBAL_PHY29_18_REG
 18

	)

85 
	#IP_GLOBAL_PHY29_19_REG
 19

	)

86 
	#IP_GLOBAL_PHY29_20_REG
 20

	)

87 
	#IP_GLOBAL_PHY29_21_REG
 21

	)

88 
	#IP_GLOBAL_PHY29_22_REG
 22

	)

89 
	#IP_GLOBAL_PHY29_23_REG
 23

	)

90 
	#IP_GLOBAL_PHY29_24_REG
 24

	)

91 
	#IP_GLOBAL_PHY29_25_REG
 25

	)

92 
	#IP_GLOBAL_PHY29_26_REG
 26

	)

93 
	#IP_GLOBAL_PHY29_27_REG
 27

	)

94 
	#IP_GLOBAL_PHY29_28_REG
 28

	)

95 
	#IP_GLOBAL_PHY29_29_REG
 29

	)

96 
	#IP_GLOBAL_PHY29_30_REG
 30

	)

97 
	#IP_GLOBAL_PHY29_31_REG
 31

	)

100 
	#IP_GLOBAL_PHY30_0_REG
 0

	)

101 
	#IP_GLOBAL_PHY30_1_REG
 1

	)

102 
	#IP_GLOBAL_PHY30_2_REG
 2

	)

103 
	#IP_GLOBAL_PHY30_3_REG
 3

	)

104 
	#IP_GLOBAL_PHY30_4_REG
 4

	)

105 
	#IP_GLOBAL_PHY30_5_REG
 5

	)

106 
	#IP_GLOBAL_PHY30_6_REG
 6

	)

107 
	#IP_GLOBAL_PHY30_7_REG
 7

	)

108 
	#IP_GLOBAL_PHY30_8_REG
 8

	)

109 
	#IP_GLOBAL_PHY30_9_REG
 9

	)

110 
	#IP_GLOBAL_PHY30_10_REG
 10

	)

111 
	#IP_GLOBAL_PHY30_11_REG
 11

	)

112 
	#IP_GLOBAL_PHY30_12_REG
 12

	)

113 
	#IP_GLOBAL_PHY30_13_REG
 13

	)

114 
	#IP_GLOBAL_PHY30_16_REG
 16

	)

115 
	#IP_GLOBAL_PHY30_17_REG
 17

	)

116 
	#IP_GLOBAL_PHY30_18_REG
 18

	)

117 
	#IP_GLOBAL_PHY30_20_REG
 20

	)

118 
	#IP_GLOBAL_PHY30_21_REG
 21

	)

119 
	#IP_GLOBAL_PHY30_22_REG
 22

	)

120 
	#IP_GLOBAL_PHY30_23_REG
 23

	)

121 
	#IP_GLOBAL_PHY30_24_REG
 24

	)

122 
	#IP_GLOBAL_PHY30_25_REG
 25

	)

123 
	#IP_GLOBAL_PHY30_26_REG
 26

	)

124 
	#IP_GLOBAL_PHY30_27_REG
 27

	)

125 
	#IP_GLOBAL_PHY30_28_REG
 28

	)

126 
	#IP_GLOBAL_PHY30_29_REG
 29

	)

127 
	#IP_GLOBAL_PHY30_30_REG
 30

	)

128 
	#IP_GLOBAL_PHY30_31_REG
 31

	)

130 
	#IP_GLOBAL_PHY31_0_REG
 0

	)

131 
	#IP_GLOBAL_PHY31_1_REG
 1

	)

132 
	#IP_GLOBAL_PHY31_2_REG
 2

	)

133 
	#IP_GLOBAL_PHY31_3_REG
 3

	)

134 
	#IP_GLOBAL_PHY31_4_REG
 4

	)

135 
	#IP_GLOBAL_PHY31_5_REG
 5

	)

136 
	#IP_GLOBAL_PHY31_6_REG
 6

	)

138 
	#IP_GLOBAL_PHY29_31_REG
 31

	)

141 
	#IP_VLAN0_OUTPUT_PORT_MASK_S
 0

	)

142 
	#IP_VLAN1_OUTPUT_PORT_MASK_S
 8

	)

143 
	#IP_VLAN2_OUTPUT_PORT_MASK_S
 0

	)

144 
	#IP_VLAN3_OUTPUT_PORT_MASK_S
 8

	)

147 
	#IP_PORTX_ADD_TAG_S
 11

	)

148 
	#IP_PORTX_REMOVE_TAG_S
 6

	)

149 
	#IP_PORT5_ADD_TAG_S
 1

	)

150 
	#IP_PORT5_REMOVE_TAG_S
 0

	)

155 
	#TAG_VLAN_ENABLE
 0x0080

	)

156 
	#VID_INDX_SEL_M
 0x0070

	)

157 
	#VID_INDX_SEL_S
 4

	)

161 
	#IP_PHY0_ADDR
 0

	)

162 
	#IP_PHY1_ADDR
 1

	)

163 
	#IP_PHY2_ADDR
 2

	)

164 
	#IP_PHY3_ADDR
 3

	)

165 
	#IP_PHY4_ADDR
 4

	)

167 
	#IP_GLOBAL_PHY29_ADDR
 29

	)

168 
	#IP_GLOBAL_PHY30_ADDR
 30

	)

169 
	#IP_GLOBAL_PHY31_ADDR
 31

	)

	@ag7100/rtPhy.c

16 
	~<löux/c⁄fig.h
>

17 
	~<löux/ty≥s.h
>

18 
	~<löux/√tdevi˚.h
>

19 
	~<löux/ëhîdevi˚.h
>

20 
	~<löux/dñay.h
>

22 
	~"ag7100_phy.h
"

25 
	#RT_DEBUG_ERROR
 0x00000001

	)

26 
	#RT_DEBUG_PHYSETUP
 0x00000002

	)

27 
	#RT_DEBUG_PHYCHANGE
 0x00000004

	)

29 
	gπPhyDebug
 = 
RT_DEBUG_ERROR
;

31 
	#RT_PRINT
(
FLG
, 
X
) \

33 i‡(
πPhyDebug
 & (
FLG
)) { \

34 
¥ötk
 
X
; \

36 }

	)

38 
	#RT_PRINT
(
FLG
, 
X
)

	)

45 
BOOL
 
	mphyAlive
;

46 
UINT32
 
	mphyBa£
;

47 
UINT32
 
	mphyAddr
;

48 } 
	tπPhyInfo_t
;

50 
	#ETH_PHY_ADDR
 2

	)

58 
πPhyInfo_t
 
	gπPhyInfo
[] = {

59 {
phyAlive
: 
FALSE
,

60 
phyBa£
: 0,

61 
phyAddr
: 
ETH_PHY_ADDR
},

63 {
phyAlive
: 
FALSE
,

64 
phyBa£
: 0,

65 
phyAddr
: 
ETH_PHY_ADDR
}

69 
	#RT_PHYBASE
(
phyUnô
Ë(
πPhyInfo
[phyUnô].
phyBa£
)

	)

70 
	#RT_PHYADDR
(
phyUnô
Ë(
πPhyInfo
[phyUnô].
phyAddr
)

	)

85 
BOOL


86 
	$π_phySëup
(
ëhUnô
, 
UINT32
 
phyBa£
)

88 
BOOL
 
lökAlive
 = 
FALSE
;

89 
UINT32
 
phyAddr
;

91 
	`RT_PHYBASE
(
ëhUnô
Ë
phyBa£
;

93 
phyAddr
 = 
	`RT_PHYADDR
(
ëhUnô
);

98 
	`phyRegWrôe
(
phyBa£
, 
phyAddr
, 
GEN_˘l
, 
PHY_SW_RST
 | 
AUTONEGENA
);

111 
	`¥ötk
("r0 %#x id %#xÑ17 %#x\n",

112 
	`phyRegRód
(0, 
phyAddr
, 0),

113 
	`phyRegRód
(0, 
phyAddr
, 3),

114 
	`phyRegRód
(0, 
phyAddr
, 0x11));

116  
lökAlive
;

117 
	}
}

129 
	$π_phyIsFuŒDu∂ex
(
ëhUnô
)

131 
UINT16
 
phyCé
;

132 
UINT32
 
phyBa£
;

133 
UINT32
 
phyAddr
;

135 
phyBa£
 = 
	`RT_PHYBASE
(
ëhUnô
);

136 
phyAddr
 = 
	`RT_PHYADDR
(
ëhUnô
);

138 
phyCé
 = 
	`phyRegRód
(
phyBa£
, 
phyAddr
, 
GEN_˘l
);

140 i‡(
phyCé
 & 
DUPLEX
) {

145 
	}
}

156 
BOOL


157 
	$π_phyS≥ed
(
phyUnô
)

159 
UINT16
 
phyL∑
;

160 
UINT32
 
phyBa£
;

161 
UINT32
 
phyAddr
;

163 
phyBa£
 = 
	`RT_PHYBASE
(
phyUnô
);

164 
phyAddr
 = 
	`RT_PHYADDR
(
phyUnô
);

166 
phyL∑
 = 
	`phyRegRód
(
phyBa£
, 
phyAddr
, 
AN_Õa
);

168 i‡(
phyL∑
 & (
LPA_TXFD
 | 
LPA_TX
)) {

169  
AG7100_PHY_SPEED_100TX
;

171  
AG7100_PHY_SPEED_10T
;

173 
	}
}

188 
	$π_phyIsUp
(
ëhUnô
)

190 
UINT16
 
phyHwSètus
;

191 
πPhyInfo_t
 *
œ°Sètus
 = &
πPhyInfo
[
ëhUnô
];

192 
UINT32
 
phyBa£
;

193 
UINT32
 
phyAddr
;

195 
phyBa£
 = 
	`RT_PHYBASE
(
ëhUnô
);

196 
phyAddr
 = 
	`RT_PHYADDR
(
ëhUnô
);

199 
phyHwSètus
 = 
	`phyRegRód
(
phyBa£
, 
phyAddr
, 
GEN_°s
);

201 i‡(
œ°Sètus
->
phyAlive
) {

203 i‡(!(
phyHwSètus
 & 
LINK
)) {

204 
	`RT_PRINT
(
RT_DEBUG_PHYCHANGE
,("\√thmac%dÜök down\n", 
ëhUnô
));

205 
œ°Sètus
->
phyAlive
 = 
FALSE
;

209 i‡((
phyHwSètus
 & (
AUTOCMPLT
 | 
LINK
)) == (AUTOCMPLT | LINK)) {

210 
	`RT_PRINT
(
RT_DEBUG_PHYCHANGE
,("\√thmac%dÜök up\n", 
ëhUnô
));

211 
œ°Sètus
->
phyAlive
 = 
TRUE
;

214  (
œ°Sètus
->
phyAlive
);

215 
	}
}

217 #ifde‡
DEBUG


220 
	sπRegi°îTabÀ_s
 {

221 
UINT32
 
	mªgNum
;

222 *
	mªgIdSåög
;

223 } 
	gπRegi°îTabÀ
[] =

225 {
GEN_˘l
, "Basic Mode Control (GEN_ctl) "},

226 {
GEN_°s
, "Basic Mode Status (GEN_sts) "},

227 {
GEN_id_hi
, "PHY Identifier 1 (GET_id_hi) "},

228 {
GEN_id_lo
, "PHY Identifier 2 (GET_id_lo) "},

229 {
AN_adv
, "Auto-Neg Advertisement (AN_adv) "},

230 {
AN_Õa
, "Auto-Neg Link Partner Ability "},

231 {
AN_exp
, "Auto-Neg Expansion "},

234 
	gπNumRegs
 = (
πRegi°îTabÀ
) / (rtRegisterTable[0]);

240 
	$π_phyShow
(
phyUnô
)

242 
i
;

243 
UINT16
 
vÆue
;

244 
UINT32
 
phyBa£
;

245 
UINT32
 
phyAddr
;

247 
phyBa£
 = 
	`RT_PHYBASE
(
phyUnô
);

248 
phyAddr
 = 
	`RT_PHYADDR
(
phyUnô
);

250 
	`¥ötf
("PHY sèã f‹Éthphy%d\n", 
phyUnô
);

252 
i
=0; i<
πNumRegs
; i++) {

254 
vÆue
 = 
	`phyRegRód
(
phyBa£
, 
phyAddr
, 
πRegi°îTabÀ
[
i
].
ªgNum
);

256 
	`¥ötf
("Reg %02d (0x%02x) %s = 0x%08x\n",

257 
πRegi°îTabÀ
[
i
].
ªgNum
,ÑtRegisterTable[i].regNum,

258 
πRegi°îTabÀ
[
i
].
ªgIdSåög
, 
vÆue
);

260 
	}
}

267 
	$π_phySë
(
phyUnô
, 
UINT32
 
ªgnum
, UINT32 
vÆue
)

269 
UINT32
 
phyBa£
;

270 
UINT32
 
phyAddr
;

272 
phyBa£
 = 
	`RT_PHYBASE
(
phyUnô
);

273 
phyAddr
 = 
	`RT_PHYADDR
(
phyUnô
);

275 
	`phyRegWrôe
(
phyBa£
, 
phyAddr
, 
ªgnum
, 
vÆue
);

276 
	}
}

	@ag7100/rtPhy.h

16 #i‚de‡
RTPHY_H


17 
	#RTPHY_H


	)

18 
	~<löux/dñay.h
>

22 
	#GEN_˘l
 00

	)

23 
	#GEN_°s
 01

	)

24 
	#GEN_id_hi
 02

	)

25 
	#GEN_id_lo
 03

	)

26 
	#AN_adv
 04

	)

27 
	#AN_Õa
 05

	)

28 
	#AN_exp
 06

	)

31 
	#PHY_SW_RST
 0x8000

	)

32 
	#LOOPBACK
 0x4000

	)

33 
	#SPEED
 0x2000

	)

34 
	#AUTONEGENA
 0x1000

	)

35 
	#DUPLEX
 0x0100

	)

39 
	#AUTOCMPLT
 0x0020

	)

40 
	#LINK
 0x0004

	)

43 
	#RT_PHY_ID1_EXPECTATION
 0x22

	)

46 
	#LPA_TXFD
 0x0100

	)

47 
	#LPA_TX
 0x0080

	)

48 
	#LPA_10FD
 0x0040

	)

49 
	#LPA_10
 0x0020

	)

51 
	#UINT8
 
u8


	)

52 
	#UINT16
 
u16


	)

53 
	#UINT32
 
u32


	)

54 
	#TRUE
 1

	)

55 
	#FALSE
 0

	)

56 #i‚de‡
BOOL


57 
	#BOOL
 

	)

60 
	#phyRegRód
 
ag7100_mii_ªad


	)

61 
	#phyRegWrôe
 
ag7100_mii_wrôe


	)

63 
	#sysMsDñay
 
mdñay


	)

65 
BOOL
 
π_phySëup
(
ëhUnô
, 
UINT32
 
phyBa£
);

66 
π_phyIsFuŒDu∂ex
(
ëhUnô
);

67 
BOOL
 
π_phyS≥ed
(
phyUnô
);

68 
π_phyIsUp
(
ëhUnô
);

	@ag7100/vsc73xx.c

22 #ifde‡
__BDI


23 
	~"bdi.h
"

25 #ifde‡
__ECOS


26 #i‡
deföed
(
CYGNUM_USE_ENET_VERBOSE
)

27 #unde‡
VERBOSE


28 
	#VERBOSE
 
CYGNUM_USE_ENET_VERBOSE


	)

30 
	#VERBOSE
 0

	)

32 
	#¥ötk
 
DEBUG_PRINTF


	)

33 
	#udñay
 
A_UDELAY


	)

35 
	~<löux/kî√l.h
>

36 
	~<asm/dñay.h
>

37 
	~"¨7100.h
"

41 #i‚de‡
VERBOSE


42 
	#VERBOSE
 0

	)

45 
	~"gíîic_•i.h
"

46 
	~"vsc73xx.h
"

48 
	#MODULE_NAME
 "VSC73XX"

	)

49 #ifde‡
CONFIG_AR9100


50 
bﬂrd_vîsi⁄
;

55 
	#VSC73XX_SYSTEM
 0x7

	)

56 
	#VSC73XX_ICPU_CTRL
 0x10

	)

57 
	#VSC73XX_ICPU_ADDR
 0x11

	)

58 
	#VSC73XX_ICPU_SRAM
 0x12

	)

59 
	#VSC73XX_ICPU_MAILBOX_VAL
 0x15

	)

60 
	#VSC73XX_ICPU_MAILBOX_SET
 0x16

	)

61 
	#VSC73XX_ICPU_MAILBOX_CLR
 0x17

	)

62 
	#VSC73XX_ICPU_CHIPID
 0x18

	)

63 
	#VSC73XX_ICPU_SIPAD
 0x01

	)

64 
	#VSC73XX_ICPU_GPIO
 0x34

	)

66 
	#VSC73XX_ICPU_CLOCK_DELAY
 0x05

	)

68 
	#VSC73XX_MAC
 0x1

	)

69 
	#VSC73XX_MAC_CFG
 0x0

	)

70 
	#VSC73XX_ADVPORTM
 0x19

	)

71 
	#VSC73XX_RXOCT
 0x50

	)

72 
	#VSC73XX_TXOCT
 0x51

	)

73 
	#VSC73XX_C_RX0
 0x52

	)

74 
	#VSC73XX_C_RX1
 0x53

	)

75 
	#VSC73XX_C_RX2
 0x54

	)

76 
	#VSC73XX_C_TX0
 0x55

	)

77 
	#VSC73XX_C_TX1
 0x56

	)

78 
	#VSC73XX_C_TX2
 0x57

	)

79 
	#VSC73XX_C_CFG
 0x58

	)

81 
	#VSC73XX_MII
 0x3

	)

82 
	#VSC73XX_MII_STAT
 0x0

	)

83 
	#VSC73XX_MII_CMD
 0x1

	)

84 
	#VSC73XX_MII_DATA
 0x2

	)

86 
ölöe


87 
	$vsc73xx_f‹˚_ª£t
()

89 
	`¨7100_ªg_rmw_£t
(
AR7100_RESET
, 
AR7100_RESET_GE1_PHY
);

90 
	`udñay
(10);

91 
	`¨7100_ªg_rmw_˛ór
(
AR7100_RESET
, 
AR7100_RESET_GE1_PHY
);

92 
	}
}

94 #ifde‡
USE_TEST_CODE


97 
	$vsc73xx_ã°_ª£t_löe
()

99 
	`¥ötk
(
MODULE_NAME
":Üooping 10 uSecÇRESET, 100Usec RESET\n");

100 
	`gíîic_•i_öô
(
GENERIC_SPI_VSC73XX_CS
);

102 
	`vsc73xx_f‹˚_ª£t
();

103 
	`udñay
(100);

105 
	}
}

110 
	$vsc73xx_check_block_sublock_ok
(
block
, 
sublock
)

112 
block
) {

114 
sublock
) {

120 
sublock
) {

126 
sublock
) {

133 
	}
}

136 
	$vsc73xx_rd
(
block
, 
subblock
, 
ªg
, *
vÆue
)

138 
rc
;

140 
rc
=
	`vsc73xx_check_block_sublock_ok
(
block
, 
subblock
);

141 i‡(
rc
<0) {

142 
	`¥ötk
(
MODULE_NAME
":Ç⁄-suµ‹ãd block/subblock %d %d\n", 
block
, 
subblock
);

146 
rc
=
	`gíîic_•i_ac˚ss_íabÀ
(
GENERIC_SPI_VSC73XX_CS
);

147 #ifde‡
CONFIG_AR9100


148 i‡(
bﬂrd_vîsi⁄
 >= 50) {

149 
	`gpio_˛k_£tup
();

152 i‡(
rc
<0) {

153 
	`¥ötk
(
MODULE_NAME
": u«bÀÅÿCS %08x \n", 
GENERIC_SPI_VSC73XX_CS
);

158 
	`gíîic_•i_øw_ouçut_u8
((
block
<<5Ë| (0 <<4Ë| (
subblock
<<0));

159 
	`gíîic_•i_øw_ouçut_u8
(
ªg
);

162 
	`gíîic_•i_øw_ouçut_u8
(0);

163 
	`gíîic_•i_øw_ouçut_u8
(0);

166 *
vÆue
 = 
	`gíîic_•i_øw_öput_u32
();

168 
rc
=
	`gíîic_•i_ac˚ss_d⁄e
();

170 i‡(
rc
<0) {

171 
	`¥ötk
(
MODULE_NAME
": u«bÀÅÿdós£π CS %08x \n", 
GENERIC_SPI_VSC73XX_CS
);

176 
	}
}

179 
	$vsc73xx_wr
(
block
, 
subblock
, 
ªg
, 
vÆue
)

181 
rc
;

183 
rc
=
	`vsc73xx_check_block_sublock_ok
(
block
, 
subblock
);

184 i‡(
rc
<0) {

185 
	`¥ötk
(
MODULE_NAME
":Ç⁄-suµ‹ãd block/subblock %d %d\n", 
block
, 
subblock
);

189 
rc
=
	`gíîic_•i_ac˚ss_íabÀ
(
GENERIC_SPI_VSC73XX_CS
);

190 i‡(
rc
<0) {

191 
	`¥ötk
(
MODULE_NAME
": u«bÀÅÿCS %08x \n", 
GENERIC_SPI_VSC73XX_CS
);

196 
	`gíîic_•i_øw_ouçut_u8
((
block
<<5Ë| (1 <<4Ë| (
subblock
<<0) );

197 
	`gíîic_•i_øw_ouçut_u8
(
ªg
);

200 
	`gíîic_•i_øw_ouçut_u8
((
vÆue
>>24) & 0xff);

201 
	`gíîic_•i_øw_ouçut_u8
((
vÆue
>>16) & 0xff);

202 
	`gíîic_•i_øw_ouçut_u8
((
vÆue
>>8 ) & 0xff);

203 
	`gíîic_•i_øw_ouçut_u8
((
vÆue
>>0 ) & 0xff);

205 
rc
=
	`gíîic_•i_ac˚ss_d⁄e
();

206 i‡(
rc
<0) {

207 
	`¥ötk
(
MODULE_NAME
": u«bÀÅÿdós£π CS %08x \n", 
GENERIC_SPI_VSC73XX_CS
);

212 
	}
}

215 
	$vsc73xx_gë_™d_vîify_chùid
()

217 
curVÆ
;

218 
chù
;

219 
ii
=256;

222 
	`vsc73xx_rd
(
VSC73XX_SYSTEM
, 0, 
VSC73XX_ICPU_CHIPID
, &
curVÆ
);

223 
chù
 = (
curVÆ
 >> 12) & 0x0ffff;

224 } (
chù
 !0x7385Ë&& (chù !0x7395Ë&& (chù !0x7396Ë&& --
ii
);

226 #ifde‡
VSC73XX_DEBUG


227 
	`¥ötk
(
MODULE_NAME
": curvÆ = 0x%08x\n", 
curVÆ
);

230 i‡(0==
ii
) {

231 
	`¥ötk
(
MODULE_NAME
": unknow¿chù: %08x\n", 
chù
);

235 #ifde‡
CONFIG_AR9100


243 i‡(!((
curVÆ
 >> 28) & 0xf)) {

244 
	`¥ötk
("\n==================================================\n"

247 "==================================================\n", 
chù
);

251  
chù
;

252 
	}
}

255 
	$vsc73xx_ª£t_™d_vîify_chùid
()

257 #ifde‡
CONFIG_AR9100


258 i‡(
bﬂrd_vîsi⁄
 < 50) {

259 
	`vsc73xx_f‹˚_ª£t
();

262 
	`vsc73xx_f‹˚_ª£t
();

264  
	`vsc73xx_gë_™d_vîify_chùid
();

265 
	}
}

267 #ifde‡
USE_TEST_CODE


270 
	$vsc73xx_ã°_ª£t_™d_vîify_chùid
()

272 
	`¥ötk
(
MODULE_NAME
":Üooping onÑeset & verify chipid\n");

273 
	`gíîic_•i_öô
(
GENERIC_SPI_VSC73XX_CS
);

275 
	`vsc73xx_ª£t_™d_vîify_chùid
();

277 
	}
}

281 
ölöe
 

282 
	$vsc73xx_maûbox_gë
(*
d
)

284  
	`vsc73xx_rd
(
VSC73XX_SYSTEM
, 0, 
VSC73XX_ICPU_MAILBOX_VAL
, 
d
);

285 
	}
}

287 
ölöe
 

288 
	$vsc73xx_maûbox_˛r
(
vÆue
)

290  
	`vsc73xx_wr
(
VSC73XX_SYSTEM
, 0, 
VSC73XX_ICPU_MAILBOX_CLR
, 
vÆue
);

291 
	}
}

293 
ölöe
 

294 
	$vsc73xx_maûbox_£t
(
vÆue
)

296  
	`vsc73xx_wr
(
VSC73XX_SYSTEM
, 0, 
VSC73XX_ICPU_MAILBOX_SET
, 
vÆue
);

297 
	}
}

299 
ölöe
 

300 
	$vsc73xx_gpio_c⁄fig_ouçut
(
vÆue
)

302  
	`vsc73xx_wr
(
VSC73XX_SYSTEM
, 0, 
VSC73XX_ICPU_GPIO
, ( 
vÆue
 & 
VSC73XX_GPIO_MASK
 ) << 4);

303 
	}
}

305 
ölöe
 

306 
	$vsc73xx_gpio_ouçut
(
vÆue
)

308 
d
;

309 
rc
;

311 
vÆue
 &=
VSC73XX_GPIO_MASK
;

314 
rc
=
	`vsc73xx_rd
(
VSC73XX_SYSTEM
, 0, 
VSC73XX_ICPU_GPIO
, &
d
);

315 i‡(
rc
<0)

316  
rc
;

318 
d
 &=
VSC73XX_GPIO_MASK
;

319 
d
 |=
vÆue
;

320  
	`vsc73xx_wr
(
VSC73XX_SYSTEM
, 0, 
VSC73XX_ICPU_GPIO
, 
d
);

321 
	}
}

323 
ölöe
 

324 
	$vsc73xx_gpio_öput
(*
d
)

326 
rc
;

327 
e
;

328 
rc
=
	`vsc73xx_rd
(
VSC73XX_SYSTEM
, 0, 
VSC73XX_ICPU_GPIO
, &
e
);

329 i‡(
rc
<0)

330  
rc
;

332 *
d
 = 
e
 & 
VSC73XX_GPIO_MASK
;

333  
rc
;

334 
	}
}

336 #ifde‡
USE_TEST_CODE


339 
	$vsc73xx_ã°_gpio
()

341 
	`¥ötk
(
MODULE_NAME
":Üooping on / off vsc73xx GPIO\n");

342 
	`gíîic_•i_öô
(
GENERIC_SPI_VSC73XX_CS
);

343 
	`vsc73xx_gpio_c⁄fig_ouçut
(
VSC73XX_GPIO_2
);

345 
	`vsc73xx_gpio_ouçut
(
VSC73XX_GPIO_2
);

346 
	`udñay
(50);

347 
	`vsc73xx_gpio_ouçut
(0);

348 
	`udñay
(50);

350 
	}
}

355 
	$vsc73xx_gë_sVîsi⁄_ª£tNìded
(*
sVîsi⁄
, *
ª£tNìded
)

357 
d
;

358 
rc
;

360 
rc
=
	`vsc73xx_maûbox_gë
(&
d
);

361 i‡(
rc
<0)

362  
rc
;

363 *
sVîsi⁄
 = 
d
 & 0xffff;

364 *
ª£tNìded
 = (
d
 & 0xffff0000) == 0xffff0000;

366 
	}
}

368 
ölöe
 

369 
	$vsc73xx_ª°¨t_fúmw¨e
()

371 
rc
;

373 
rc
 = 
	`vsc73xx_wr
(

374 
VSC73XX_SYSTEM
, 0, 
VSC73XX_ICPU_CTRL
,

380 i‡(
rc
<0)

381  
rc
;

383 
rc
 = 
	`vsc73xx_wr
(

384 
VSC73XX_SYSTEM
, 0,
VSC73XX_ICPU_ADDR
,

387 i‡(
rc
<0)

388  
rc
;

390 
	`udñay
(100);

392 
rc
 = 
	`vsc73xx_wr
(

393 
VSC73XX_SYSTEM
, 0, 
VSC73XX_ICPU_CTRL
,

399  
rc
;

400 
	}
}

403 
	$vsc73xx_lﬂd_fúmw¨e_øw
(*
lut⁄uAddr
, 
lut⁄uSize
)

405 
ii
;

406 *
dp
;

407 
curVÆ
;

408 
diffs
;

409 
rc
;

411 
rc
 = 
	`vsc73xx_wr
(

412 
VSC73XX_SYSTEM
, 0, 
VSC73XX_ICPU_CTRL
,

418 i‡(
rc
<0)

419  
rc
;

421 
rc
 = 
	`vsc73xx_wr
(

422 
VSC73XX_SYSTEM
, 0,
VSC73XX_ICPU_ADDR
,

425 i‡(
rc
<0)

426  
rc
;

428 
dp
 = 
lut⁄uAddr
;

429 
ii
=0; ii<
lut⁄uSize
; ii++) {

430 
rc
 = 
	`vsc73xx_wr
(

431 
VSC73XX_SYSTEM
, 0, 
VSC73XX_ICPU_SRAM
,

432 *
dp
++

434 i‡(
rc
<0) {

435 
	`¥ötk
(
MODULE_NAME
": couldÇŸÜﬂd mi¸ocodê%d\n",
rc
);

436  
rc
;

440 
rc
 = 
	`vsc73xx_wr
(

441 
VSC73XX_SYSTEM
, 0, 
VSC73XX_ICPU_ADDR
,

444 i‡(
rc
<0) {

445 
	`¥ötk
(
MODULE_NAME
": couldÇŸÑe£àmi¸ocodê%d\n",
rc
);

446  
rc
;

449 
	`¥ötk
(
MODULE_NAME
": microcode Loaded, verifying...\n");

451 
dp
 = 
lut⁄uAddr
;

452 
diffs
=0;

453 
ii
=0; ii<
lut⁄uSize
; ii++) {

454 
rc
 = 
	`vsc73xx_rd
(

455 
VSC73XX_SYSTEM
, 0,
VSC73XX_ICPU_SRAM
,

456 &
curVÆ


458 i‡(
rc
<0) {

459 
	`¥ötk
(
MODULE_NAME
": couldÇŸÑód mi¸ocodê%d\n",
rc
);

460  
rc
;

463 i‡(
curVÆ
 > 0xff) {

464 
	`¥ötk
(
MODULE_NAME
": bad vÆÑód: %04x : %02x %02x \n", 
ii
, *
dp
, 
curVÆ
);

468 i‡((
curVÆ
 & 0xffË!*
dp
) {

469 
diffs
++;

470 
	`¥ötk
(
MODULE_NAME
": vîifyÉº‹: %04x : %02x %02x \n", 
ii
, *
dp
, 
curVÆ
);

472 i‡(
diffs
 > 4)

475 
dp
++;

478 i‡(
diffs
) {

479 
	`¥ötk
(
MODULE_NAME
": failedÅo verify\n");

482 
	`¥ötk
(
MODULE_NAME
": verify OK\n");

484 
rc
 = 
	`vsc73xx_wr
(

485 
VSC73XX_SYSTEM
, 0, 
VSC73XX_ICPU_CTRL
,

491  
rc
;

492 
	}
}

494 
	#VSC73XX_SFTW_VERSION
 0x229

	)

495 #ifde‡
CONFIG_AR9100


496 
	~"g5_Plus1_2_31_unm™aged_Athîos_v3.c
"

497 
	~"g5_Plus1_2_31_unm™aged_Athîos_v6.c
"

498 
	~"g5_Plus1_2_31_unm™aged_Athîos_v4.c
"

500 
	~"g5_Plus1_2_29b_unm™aged_Athîos_v5.c
"

501 
	~"g5e_Plus1_2_29a_unm™aged_Athîos_v3.c
"

502 
	~"g5_Plus1_2_29a_unm™aged_Athîos_v5.c
"

505 
	$vsc73xx_lﬂd_fúmw¨e
()

507 
sVîsi⁄
;

508 
ª£tNìded
;

509 
rc
;

511 #ifde‡
CONFIG_AR9100


512 
	`¨7100_ªg_rmw_£t
(
AR9100_FLASH_CONFIG
,0x3fffff);

514 
rc
 = 
	`vsc73xx_ª£t_™d_vîify_chùid
();

515 i‡(
rc
 < 0) {

516 
	`¥ötk
(
MODULE_NAME
": couldÇŸ idítify chù,Éº %d\n", 
rc
);

517  
rc
;

519 
	`¥ötk
(
MODULE_NAME
": found chù id: %04x\n", 
rc
);

521 #i‡
	`deföed
(
__BDI
Ë&& deföed(
VSC73XX_LOAD_FROM_RAM
)

522 
rc
 = 
	`vsc73xx_lﬂd_fúmw¨e_øw
(
	`gë_s¸©ch_unˇched
(8192), 8192);

524 
rc
) {

526 #ifde‡
CONFIG_AR9100


527 
rc
 = 
	`vsc73xx_lﬂd_fúmw¨e_øw
(
g5_Plus1_2_31_unm™aged_Athîos_v6
,

528 (
g5_Plus1_2_31_unm™aged_Athîos_v6
));

530 
rc
 = 
	`vsc73xx_lﬂd_fúmw¨e_øw
(
g5_Plus1_2_29b_unm™aged_Athîos_v5
,

531 (
g5_Plus1_2_29b_unm™aged_Athîos_v5
));

537 #ifde‡
CONFIG_AR9100


538 
rc
 = 
	`vsc73xx_lﬂd_fúmw¨e_øw
(
g5_Plus1_2_31_unm™aged_Athîos_v4
,

539 (
g5_Plus1_2_31_unm™aged_Athîos_v4
));

541 
rc
 = 
	`vsc73xx_lﬂd_fúmw¨e_øw
(
lut⁄u
,

542 (
lut⁄u
 ));

547 
	`¥ötk
(
MODULE_NAME
": mi¸ocodênŸávaûÆêf‹ chù id: %08x\n", 
rc
);

548 
rc
 = -1;

552 i‡(
rc
<0)

553  
rc
;

555 
	`vsc73xx_gë_sVîsi⁄_ª£tNìded
(&
sVîsi⁄
, &
ª£tNìded
);

556 i‡(
ª£tNìded
) {

557 
	`¥ötk
(
MODULE_NAME
": failedÅo start\n");

560 i‡(
sVîsi⁄
 < 
VSC73XX_SFTW_VERSION
) {

561 
	`¥ötk
(
MODULE_NAME
": inc‹ª˘ so·w¨êvîsi⁄ %04x\n", 
sVîsi⁄
);

562 #ifde‡
CONFIG_AR9100


563 i‡(
bﬂrd_vîsi⁄
 < 50) {

570 
	`¥ötk
(
MODULE_NAME
": so·w¨êvîsi⁄ %08x sèπed OK\n",
sVîsi⁄
);

572 #ifde‡
CONFIG_AR9100


573 
	`¨7100_ªg_rmw_£t
(
AR9100_FLASH_CONFIG
,0xf2288);

577 
	}
}

579 #ifde‡
USE_TEST_CODE


582 
	$vsc73xx_ã°_lﬂd_™d_ª£t_fúmw¨e
()

584 
rc
;

585 
	`¥ötk
(
MODULE_NAME
":Üooping onÜoad firmware /Ñeset firmware\n");

586 
	`gíîic_•i_öô
(
GENERIC_SPI_VSC73XX_CS
);

588 
	`¥ötk
(
MODULE_NAME
":Ñëu∫ fromÜﬂd fúmw¨e: %d\n", 
	`vsc73xx_lﬂd_fúmw¨e
());

589 
	`udñay
(10000);

591 
	}
}

596 
	$vsc73xx_¥öt_vÆ_bô_desc
 (
vÆ
, *
fõldName
, *
bô_des¸ùti⁄s
[])

598 
ii
;

599 *
p2
;

601 
	`¥ötk
(
MODULE_NAME
": %s=%04x\n", 
fõldName
, 
vÆ
);

602 
ii
=0;ii<32; ii++) {

603 
p2
 = 
vÆ
 & 1<<(31-
ii
Ë? 
bô_des¸ùti⁄s
[ii*2] : bit_descriptions[ii*2+1];

604 i‡(
p2
 &&Ö2[0])

605 
	`¥ötk
(
MODULE_NAME
": %s\n", 
p2
);

607 
	}
}

610 
ölöe
 

611 
	$vsc73xx_gë_mac_cfg
(
p‹t
, *
d
)

613  
	`vsc73xx_rd
(
VSC73XX_MAC
, 
p‹t
, 
VSC73XX_MAC_CFG
, 
d
);

614 
	}
}

616 *
	gmac_cfg_desc
[32*2] = {

651 
ölöe
 

652 
	$vsc73xx_¥öt_mac_cfg_vÆ
(
vÆ
)

654 
	`vsc73xx_¥öt_vÆ_bô_desc
 (
vÆ
, "mac_cfg (01P00)", 
mac_cfg_desc
);

655 
	`¥ötk
(
MODULE_NAME
": clk_£l: %02x\n", (
vÆ
>>0)&0x3);

656 
	`¥ötk
(
MODULE_NAME
":Åx_ùg: %02x\n", (
vÆ
>>6)&0x1f);

657 
	}
}

659 
ölöe
 

660 
	$vsc73xx_£t_mac_cfg
(
p‹t
, 
vÆue
)

662  
	`vsc73xx_wr
(
VSC73XX_MAC
, 
p‹t
, 
VSC73XX_MAC_CFG
, 
vÆue
);

663 
	}
}

665 
ölöe
 

666 
	$vsc73xx_gë_˛ock_dñay_ªg
(*
vÆ
)

668  
	`vsc73xx_rd
(
VSC73XX_SYSTEM
, 0, 
VSC73XX_ICPU_CLOCK_DELAY
, 
vÆ
);

669 
	}
}

671 
ölöe
 

672 
	$vsc73xx_£t_˛ock_dñay_ªg
(
vÆ
)

674  
	`vsc73xx_wr
(
VSC73XX_SYSTEM
, 0, 
VSC73XX_ICPU_CLOCK_DELAY
, 
vÆ
);

675 
	}
}

677 
ölöe
 

678 
	$vsc73xx_gë_advp‹tm
(
p‹t
, *
vÆ
)

680  
	`vsc73xx_rd
(
VSC73XX_MAC
, 
p‹t
, 
VSC73XX_ADVPORTM
, 
vÆ
);

681 
	}
}

683 *
	gadvp‹tm_desc
[32*2] = {

718 
ölöe
 

719 
	$vsc73xx_¥öt_advp‹tm_vÆ
(
vÆ
)

721 
	`vsc73xx_¥öt_vÆ_bô_desc
 (
vÆ
, "advp‹tm (01P19)", 
advp‹tm_desc
);

722 
	}
}

724 
ölöe
 

725 
	$vsc73xx_£t_advp‹tm
(
p‹t
, 
vÆ
)

727  
	`vsc73xx_wr
(
VSC73XX_MAC
, 
p‹t
, 
VSC73XX_ADVPORTM
, 
vÆ
);

728 
	}
}

732 
ölöe
 

733 
	$vsc73xx_gë_c_rx0
(
p‹t
)

735 
d
;

736 
	`vsc73xx_rd
(
VSC73XX_MAC
, 
p‹t
, 
VSC73XX_C_RX0
, &
d
);

737  
d
;

738 
	}
}

740 
ölöe
 

741 
	$vsc73xx_gë_c_rx1
(
p‹t
)

743 
d
;

744 
	`vsc73xx_rd
(
VSC73XX_MAC
, 
p‹t
, 
VSC73XX_C_RX1
, &
d
);

745  
d
;

746 
	}
}

748 
ölöe
 

749 
	$vsc73xx_gë_c_rx2
(
p‹t
)

751 
d
;

752 
	`vsc73xx_rd
(
VSC73XX_MAC
, 
p‹t
, 
VSC73XX_C_RX2
, &
d
);

753  
d
;

754 
	}
}

756 
ölöe
 

757 
	$vsc73xx_gë_c_tx0
(
p‹t
)

759 
d
;

760 
	`vsc73xx_rd
(
VSC73XX_MAC
, 
p‹t
, 
VSC73XX_C_TX0
, &
d
);

761  
d
;

762 
	}
}

764 
ölöe
 

765 
	$vsc73xx_gë_c_tx1
(
p‹t
)

767 
d
;

768 
	`vsc73xx_rd
(
VSC73XX_MAC
, 
p‹t
, 
VSC73XX_C_TX1
, &
d
);

769  
d
;

770 
	}
}

772 
ölöe
 

773 
	$vsc73xx_gë_c_tx2
(
p‹t
)

775 
d
;

776 
	`vsc73xx_rd
(
VSC73XX_MAC
, 
p‹t
, 
VSC73XX_C_TX2
, &
d
);

777  
d
;

778 
	}
}

780 
ölöe
 

781 
	$vsc73xx_gë_c_cfg
(
p‹t
)

783 
d
;

784 
	`vsc73xx_rd
(
VSC73XX_MAC
, 
p‹t
, 
VSC73XX_C_CFG
, &
d
);

785  
d
;

786 
	}
}

788 
ölöe
 

789 
	$vsc73xx_£t_c_cfg
(
p‹t
, 
vÆue
)

791 
	`vsc73xx_wr
(
VSC73XX_MAC
, 
p‹t
, 
VSC73XX_C_CFG
, 
vÆue
);

792 
	}
}

795 
	$vsc73xx_¥öt_cou¡s
(
p‹t
)

797 
	`¥ötk
(
MODULE_NAME
":cou¡î†p‹à%d\n", 
p‹t
);

798 
	`¥ötk
(
MODULE_NAME
": cfg: %8x\n", 
	`vsc73xx_gë_c_cfg
(
p‹t
));

799 
	`¥ötk
(
MODULE_NAME
":Ñx0: %9d\n", 
	`vsc73xx_gë_c_rx0
(
p‹t
));

800 
	`¥ötk
(
MODULE_NAME
":Ñx0: %9d\n", 
	`vsc73xx_gë_c_rx1
(
p‹t
));

801 
	`¥ötk
(
MODULE_NAME
":Ñx0: %9d\n", 
	`vsc73xx_gë_c_tx2
(
p‹t
));

802 
	`¥ötk
(
MODULE_NAME
":Åx0: %9d\n", 
	`vsc73xx_gë_c_tx0
(
p‹t
));

803 
	`¥ötk
(
MODULE_NAME
":Åx0: %9d\n", 
	`vsc73xx_gë_c_tx1
(
p‹t
));

804 
	`¥ötk
(
MODULE_NAME
":Åx0: %9d\n", 
	`vsc73xx_gë_c_tx2
(
p‹t
));

805 
	}
}

807 
ölöe
 

808 
	$vsc73xx_¥öt_lök_°©us_‰om_vÆue
(
p‹t
, 
up
, 
fdx
, 
•ìd
, 
cfg
)

810 
	`¥ötk
(
MODULE_NAME
": STATUS P‹t: %d up: %d fdx: %d s≥ed: %d ma¯cfg: %08x\n", 
p‹t
, 
up
, 
fdx
, 
•ìd
, 
cfg
);

811 
	`vsc73xx_¥öt_mac_cfg_vÆ
(
cfg
);

812 
	}
}

821 
	$vsc73xx_rw_phy
(
wrôeFlg
, 
unô
, 
phy_addr
, 
ªg
, 
uöt16_t
 
vÆue
)

827 
ªque°
;

828 
ª•
;

829 
sublockA
;

830 
sublockB
;

833 
sublockA
 = 
unô
==1 ? 6:0;

834 
sublockB
 = 
unô
==1 ? 1:0;

839 
ªque°
 = (
wrôeFlg
 ? 0 : 1)<<26 | (
phy_addr
<<21Ë| (
ªg
<<16Ë| 
vÆue
;

841 
	`vsc73xx_wr
(
VSC73XX_MII
, 
sublockA
, 
VSC73XX_MII_CMD
, 
ªque°
, 0);

842 
	`udñay
(10);

844 
	`vsc73xx_rd
(
VSC73XX_MII
, 
sublockB
, 
VSC73XX_MII_STAT
, &
ª•
, 0);

845 
	`udñay
(10);

846 }  
ª•
 & 0xf );

848 i‡(
wrôeFlg
)

851 
	`udñay
(1);

853 
	`vsc73xx_rd
(
VSC73XX_MII
, 
sublockB
, 
VSC73XX_MII_DATA
, &
ª•
, 0);

855 i‡(
ª•
 & 1<<16) {

859  
ª•
 & 0xffff;

860 
	}
}

865 
	$vsc73xx_£tup_øw
()

867 
rc
;

868 
sVîsi⁄
=0;

869 
ª£tNìded
=0;

871 
t_cfg
;

872 
t_˛ock_dñay
;

873 
t_advp‹tm
;

875 
rc
 = 
	`gíîic_•i_öô
(
GENERIC_SPI_VSC73XX_CS
);

876 i‡(
rc
 < 0) {

877 
	`¥ötk
(
MODULE_NAME
": couldÇŸ inôülizê•òöãrÁ˚,Éº %d\n", 
rc
);

878  
rc
;

881 
	`vsc73xx_gë_sVîsi⁄_ª£tNìded
(&
sVîsi⁄
, &
ª£tNìded
);

882 i‡–(
ª£tNìded
Ë|| (
sVîsi⁄
 < 
VSC73XX_SFTW_VERSION
) ) {

883 
rc
 = 
	`vsc73xx_lﬂd_fúmw¨e
();

884 i‡(
rc
 < 0)

885  
rc
;

889 
	`vsc73xx_£t_˛ock_dñay_ªg
(
VSC73XX_CLOCK_DELAY
);

890 
	`vsc73xx_gë_˛ock_dñay_ªg
(&
t_˛ock_dñay
);

892 i‡((
t_˛ock_dñay
 & 
VSC73XX_CLOCK_DELAY_MASK
Ë!
VSC73XX_CLOCK_DELAY
) {

893 
	`¥ötk
(
MODULE_NAME
": unableÅo set clock_delay %08x %08x\n",

894 
VSC73XX_CLOCK_DELAY
,

895 
VSC73XX_CLOCK_DELAY_MASK
 & 
t_˛ock_dñay
);

899 
	`¥ötk
(
MODULE_NAME
": clock_dñay_ªg %08x\n", 
t_˛ock_dñay
);

902 
	`vsc73xx_£t_advp‹tm
(
VSC73XX_PORT_MAC
,

903 
VSC73XX_ADVPORTM_HYDRA
);

905 
	`vsc73xx_gë_advp‹tm
(
VSC73XX_PORT_MAC
, &
t_advp‹tm
);

907 i‡((
VSC73XX_ADVPORTM_HYDRA_MASK
 & 
t_advp‹tm
Ë!
VSC73XX_ADVPORTM_HYDRA
) {

908 
	`¥ötk
(
MODULE_NAME
": unableÅo setádvanportm for MACÖort (6) %08x %08x\n",

909 
VSC73XX_ADVPORTM_HYDRA
,

910 
VSC73XX_ADVPORTM_HYDRA_MASK
 & 
t_advp‹tm
);

913 
	`vsc73xx_¥öt_advp‹tm_vÆ
(
t_advp‹tm
);

916 #ifde‡
CONFIG_AR9100


917 
	`vsc73xx_£t_mac_cfg
(
VSC73XX_PORT_MAC
, 
VSC73XX_MAC_CFG_PORT_RST
 |

918 
VSC73XX_MAC_CFG_MAC_RX_RST
 | 
VSC73XX_MAC_CFG_MAC_TX_RST
);

919 
	`vsc73xx_£t_mac_cfg
(
VSC73XX_PORT_MAC
, 
VSC73XX_MAC_CFG_AR9100
);

921 
	`vsc73xx_£t_mac_cfg
(
VSC73XX_PORT_MAC
,

922 
VSC73XX_MAC_CFG_HYDRA
 );

924 
	`vsc73xx_gë_mac_cfg
(
VSC73XX_PORT_MAC
, &
t_cfg
);

926 #i‚de‡
CONFIG_AR9100


927 i‡((
VSC73XX_MAC_CFG_HYDRA_MASK
 & 
t_cfg
Ë!
VSC73XX_MAC_CFG_HYDRA
) {

928 
	`¥ötk
(
MODULE_NAME
": unableÅo set mac_cfg forÖort 6 %08x %08x\n",

929 
VSC73XX_MAC_CFG_HYDRA
,

930 
VSC73XX_MAC_CFG_HYDRA_MASK
 & 
t_cfg
);

934 
	`vsc73xx_¥öt_mac_cfg_vÆ
(
t_cfg
);

936  
rc
;

937 
	}
}

939 
	gmac_cfg_p‹t
[7] = { 0, 0, 0, 0, 0, 0, 0 };

942 
	$vsc73xx_gë_lök_°©us_øw
(
p‹t
, *
up
, *
fdx
, 
ag7100_phy_•ìd_t
 *
•ìd
, *
cfg
)

944 
rc
;

946 
t_up
;

947 
t_fdx
;

948 
ag7100_phy_•ìd_t
 
t_•ìd
;

950 
t_cfg
;

951 
t_chg
;

953 
rc
 = 
	`vsc73xx_gë_mac_cfg
(
p‹t
, &
t_cfg
);

954 i‡(
rc
<0)

960 i‡(
t_cfg
 == 0xffffffff)

963 
t_chg
 = 
mac_cfg_p‹t
[
p‹t
] ^ 
t_cfg
;

964 
mac_cfg_p‹t
[
p‹t
] = 
t_cfg
;

966 
t_up
 = (
t_cfg
 & ( 
VSC73XX_MAC_CFG_TX_EN
 | 
VSC73XX_MAC_CFG_RX_EN
 )) == ( VSC73XX_MAC_CFG_TX_EN | VSC73XX_MAC_CFG_RX_EN );

967 
t_fdx
 = (
t_cfg
 & 
VSC73XX_MAC_CFG_FDX
 ) != 0;

969 i‡–
t_cfg
 & 
VSC73XX_MAC_CFG_GIGA_MODE
 )

970 
t_•ìd
 = 
AG7100_PHY_SPEED_1000T
;

972 i‡–
t_cfg
 & 
VSC73XX_MAC_CFG_100_BASE_T
 )

973 
t_•ìd
 = 
AG7100_PHY_SPEED_100TX
;

975 
t_•ìd
 = 
AG7100_PHY_SPEED_10T
;

977 i‡(
up
Ë*u∞
t_up
;

978 i‡(
fdx
Ë*fdx = 
t_fdx
;

979 i‡(
•ìd
Ë*•ìd = 
t_•ìd
;

980 i‡(
cfg
Ë*cfg = 
t_cfg
;

982  
t_chg
;

983 
	}
}

985 #ifde‡
USE_TEST_CODE


988 
	$vsc73xx_ã°_lök_°©us
()

990 
p‹t
;

991 
ii
;

993 
t_up
;

994 
t_fdx
;

995 
ag7100_phy_•ìd_t
 
t_•ìd
;

996 
t_cfg
;

997 
t_chg
;

999 
rc
;

1001 
	`¥ötk
(
MODULE_NAME
":Üooping onÜoad firmware /Ñeset firmware\n" );

1002 
	`vsc73xx_£tup_øw
();

1004 
t_chg
 = 
	`vsc73xx_gë_lök_°©us_øw
(
p‹t
, &
t_up
, &
t_fdx
, &
t_•ìd
, &
t_cfg
);

1005 i‡(
t_chg
 == ~0) {

1006 
	`¥ötk
(
MODULE_NAME
": badÑead from switch\n");

1009 i‡(
t_chg
)

1010 
	`vsc73xx_¥öt_lök_°©us_‰om_vÆue
(
p‹t
, 
t_up
, 
t_fdx
, 
t_•ìd
, 
t_cfg
);

1013 
	}
}

1018 
	$vsc73xx_£tup
(
unô
)

1020  
	`vsc73xx_£tup_øw
();

1021 
	}
}

1024 
	$vsc73xx_gë_lök_°©us
(
unô
, *
up
, *
fdx
, 
ag7100_phy_•ìd_t
 *
•ìd
, *
cfg
)

1026 
p‹t
;

1027 
t_up
;

1028 
t_fdx
;

1029 
ag7100_phy_•ìd_t
 
t_•ìd
;

1030 
t_cfg
;

1031 
t_chg
;

1032 #ifde‡
CONFIG_AR9100


1033 
i
;

1034 
löks
;

1044 
unô
) {

1045 1: 
p‹t
=
VSC73XX_PORT_MAC
; ;

1046 2: 
p‹t
=
VSC73XX_PORT_0
; ;

1047 3: 
p‹t
=
VSC73XX_PORT_1
; ;

1048 4: 
p‹t
=
VSC73XX_PORT_2
; ;

1049 5: 
p‹t
=
VSC73XX_PORT_3
; ;

1050 6: 
p‹t
=
VSC73XX_PORT_4
; ;

1052 
	`¥ötk
(
MODULE_NAME
": bad unôÇumbî %d\n", 
unô
);

1056 #ifde‡
CONFIG_AR9100


1058 i‡(
unô
 == 1) {

1059 
i
=
VSC73XX_PORT_0
,
löks
=0;i<
VSC73XX_PORT_3
;i++) {

1060 
t_chg
 = 
	`vsc73xx_gë_lök_°©us_øw
(
i
, &
t_up
, &
t_fdx
, &
t_•ìd
, &
t_cfg
);

1061 i‡(
t_chg
 == ~0)

1065 i‡(
t_up
 !0 ) 
löks
++;

1069 
t_chg
 = 
	`vsc73xx_gë_lök_°©us_øw
(
p‹t
 , &
t_up
, &
t_fdx
, &
t_•ìd
, &
t_cfg
);

1070 i‡(
t_chg
 == ~0)

1072 i‡(
up
Ë*u∞(
löks
 > 0) ? 1 : 0;

1073 i‡(
fdx
Ë*fdx = 
t_fdx
;

1074 i‡(
•ìd
Ë*•ìd = 
t_•ìd
;

1075 i‡(
cfg
Ë*cfg = 
t_cfg
;

1077 #ifde‡
VSC73XX_DEBUG


1078 
	`¥ötk
("\t===vsc(%dËup:%d fdx:%d s≥ed:%d cfg=0x%08xÜöks=%d UP=%d\n", 
unô
, 
t_up
, 
t_fdx
, 
t_•ìd
, 
t_cfg
,
löks
,
up
); 1045Örintk("\t==== vsc(%d) up:%d fdx:%d speed:%d cfg=0x%08x\n", unit,Å_up,Å_fdx,Å_speed,Å_cfg);

1082 
t_chg
 = 
	`vsc73xx_gë_lök_°©us_øw
(
p‹t
, &
t_up
, &
t_fdx
, &
t_•ìd
, &
t_cfg
);

1083 i‡(
t_chg
 == ~0)

1086 i‡(
up
Ë*u∞
t_up
;

1087 i‡(
fdx
Ë*fdx = 
t_fdx
;

1088 i‡(
•ìd
Ë*•ìd = 
t_•ìd
;

1089 i‡(
cfg
Ë*cfg = 
t_cfg
;

1091 #ifde‡
VSC73XX_DEBUG


1092 
	`¥ötk
("\t===vsc(%dËup:%d fdx:%d s≥ed:%d cfg=0x%08x\n", 
unô
, 
t_up
, 
t_fdx
, 
t_•ìd
, 
t_cfg
);

1096 
	}
}

1098 #ifde‡
VSC73XX_DEBUG


1100 
	$vsc73xx_Êush_mac_èbÀ_Æl
()

1103 
	`vsc73xx_wr
(2, 0, 0xB0, 0x4);

1104 
	}
}

1107 
	$vsc73xx_gë_lök_°©us_dbg
()

1109 
	`¥ötk
("\n");

1110 
	`vsc73xx_gë_lök_°©us
(1, 0, 0, 0, 0);

1111 
	`vsc73xx_gë_lök_°©us
(2, 0, 0, 0, 0);

1112 
	`vsc73xx_gë_lök_°©us
(3, 0, 0, 0, 0);

1113 
	`vsc73xx_gë_lök_°©us
(4, 0, 0, 0, 0);

1114 
	`vsc73xx_gë_lök_°©us
(5, 0, 0, 0, 0);

1115 
	`vsc73xx_gë_lök_°©us
(6, 0, 0, 0, 0);

1116 
	}
}

1120 
	$vsc73xx_phy_¥öt_lök_°©us
(
unô
)

1122 
p‹t
;

1124 
t_up
;

1125 
t_fdx
;

1126 
ag7100_phy_•ìd_t
 
t_•ìd
;

1127 
t_cfg
;

1128 
t_chg
;

1137 
unô
) {

1138 1: 
p‹t
=
VSC73XX_PORT_MAC
; ;

1139 2: 
p‹t
=
VSC73XX_PORT_0
; ;

1140 3: 
p‹t
=
VSC73XX_PORT_1
; ;

1141 4: 
p‹t
=
VSC73XX_PORT_2
; ;

1142 5: 
p‹t
=
VSC73XX_PORT_3
; ;

1143 6: 
p‹t
=
VSC73XX_PORT_4
; ;

1145 
	`¥ötk
(
MODULE_NAME
": bad unôÇumbî %d\n", 
unô
);

1149 
t_chg
 = 
	`vsc73xx_gë_lök_°©us_øw
(
p‹t
, &
t_up
, &
t_fdx
, &
t_•ìd
, &
t_cfg
);

1150 i‡(
t_chg
 == ~0)

1153 
	`vsc73xx_¥öt_lök_°©us_‰om_vÆue
(
p‹t
, 
t_up
, 
t_fdx
, 
t_•ìd
, 
t_cfg
);

1155 
	}
}

	@ag7100/vsc73xx.h

26 #i‚de‡
_VSC73XX_H


27 
	#_VSC73XX_H


	)

29 
	~"ag7100.h
"

32 
vsc73xx_rd
(
block
, 
subblock
, 
ªg
, *
vÆue
);

35 
vsc73xx_wr
(
block
, 
subblock
, 
ªg
, 
vÆue
);

38 
	#vtss_io_si_rd
 
vsc73xx_rd_vsc7395


	)

39 
	#vtss_io_si_wr
 
vsc73xx_wr_vsc7395


	)

41 
	#VSC73XX_GPIO_0
 0x01

	)

42 
	#VSC73XX_GPIO_1
 0x02

	)

43 
	#VSC73XX_GPIO_2
 0x04

	)

44 
	#VSC73XX_GPIO_3
 0x08

	)

46 
	#VSC73XX_GPIO_MASK
 (
VSC73XX_GPIO_0
 | 
VSC73XX_GPIO_1
 | 
VSC73XX_GPIO_2
 | 
VSC73XX_GPIO_3
 )

	)

48 
	#VSC73XX_MAC_CFG_WEXC_DIS
 (1<<31)

	)

49 
	#VSC73XX_MAC_CFG_PORT_RST
 (1<<29)

	)

50 
	#VSC73XX_MAC_CFG_TX_EN
 (1<<28)

	)

51 
	#VSC73XX_MAC_CFG_FDX
 (1<<18)

	)

52 
	#VSC73XX_MAC_CFG_GIGA_MODE
 (1<<17)

	)

53 
	#VSC73XX_MAC_CFG_RX_EN
 (1<<16)

	)

54 
	#VSC73XX_MAC_CFG_100_BASE_T
 (1<<13)

	)

55 
	#VSC73XX_MAC_CFG_TX_IPG
(
y
Ë((y&0x1f)<<6)

	)

56 
	#VSC73XX_MAC_CFG_MAC_RX_RST
 (1<<5)

	)

57 
	#VSC73XX_MAC_CFG_MAC_TX_RST
 (11<4)

	)

58 
	#VSC73XX_MAC_CFG_CLK_SEL
(
y
Ë((y&0x3)<<0)

	)

60 
	#VSC73XX_MAC_CFG_HYDRA_MASK
 ( \

61 
VSC73XX_MAC_CFG_WEXC_DIS
 | \

62 
VSC73XX_MAC_CFG_PORT_RST
 | \

63 
VSC73XX_MAC_CFG_TX_EN
 | \

64 
VSC73XX_MAC_CFG_FDX
 | \

65 
VSC73XX_MAC_CFG_GIGA_MODE
 | \

66 
VSC73XX_MAC_CFG_RX_EN
 | \

67 
VSC73XX_MAC_CFG_100_BASE_T
 | \

68 
	`VSC73XX_MAC_CFG_TX_IPG
(31) | \

69 
VSC73XX_MAC_CFG_MAC_RX_RST
 | \

70 
VSC73XX_MAC_CFG_MAC_TX_RST
 | \

71 
	`VSC73XX_MAC_CFG_CLK_SEL
(3) \

72 )

	)

74 
	#VSC73XX_MAC_CFG_HYDRA
 ( \

75 
VSC73XX_MAC_CFG_TX_EN
 | \

76 
VSC73XX_MAC_CFG_FDX
 | \

77 
VSC73XX_MAC_CFG_GIGA_MODE
 | \

78 
VSC73XX_MAC_CFG_RX_EN
 | \

79 
	`VSC73XX_MAC_CFG_TX_IPG
(6) | \

80 
	`VSC73XX_MAC_CFG_CLK_SEL
(3) \

81 )

	)

83 
	#VSC73XX_MAC_CFG_AR9100
 ( \

84 
VSC73XX_MAC_CFG_TX_EN
 | \

85 
VSC73XX_MAC_CFG_FDX
 | \

86 
VSC73XX_MAC_CFG_GIGA_MODE
 | \

87 
VSC73XX_MAC_CFG_RX_EN
 | \

88 
	`VSC73XX_MAC_CFG_TX_IPG
(6) | \

90 )

	)

92 
	#VSC73XX_MAC_CFG_CLK_RGMI_125MHZ
 1

	)

93 
	#VSC73XX_MAC_CFG_CLK_RGMI_25MHZ
 2

	)

94 
	#VSC73XX_MAC_CFG_CLK_RGMI_2_5MHZ
 3

	)

96 
	#VSC73XX_CLOCK_DELAY
 (3<<4|3)

	)

97 
	#VSC73XX_CLOCK_DELAY_MASK
 (3<<4|3)

	)

99 
	#VSC73XX_ADVPORTM_IFG_PPM
 (1<<7)

	)

100 
	#VSC73XX_ADVPORTM_EXC_COL_CONT
 (1<<6)

	)

101 
	#VSC73XX_ADVPORTM_EXT_PORT
 (1<<5)

	)

102 
	#VSC73XX_ADVPORTM_INV_GTX
 (1<<4)

	)

103 
	#VSC73XX_ADVPORTM_ENA_GTX
 (1<<3)

	)

104 
	#VSC73XX_ADVPORTM_DDR_MODE
 (1<<2)

	)

105 
	#VSC73XX_ADVPORTM_IO_LOOPBACK
 (1<<1)

	)

106 
	#VSC73XX_ADVPORTM_HOST_LOOPBACK
 (1<<0)

	)

108 
	#VSC73XX_ADVPORTM_HYDRA_MASK
 ( \

109 
VSC73XX_ADVPORTM_IFG_PPM
 | \

110 
VSC73XX_ADVPORTM_EXC_COL_CONT
 | \

111 
VSC73XX_ADVPORTM_EXT_PORT
 | \

112 
VSC73XX_ADVPORTM_INV_GTX
 | \

113 
VSC73XX_ADVPORTM_ENA_GTX
 | \

114 
VSC73XX_ADVPORTM_DDR_MODE
 | \

115 
VSC73XX_ADVPORTM_IO_LOOPBACK
 | \

116 
VSC73XX_ADVPORTM_HOST_LOOPBACK
 \

117 )

	)

119 
	#VSC73XX_ADVPORTM_HYDRA
 ( \

120 
VSC73XX_ADVPORTM_EXT_PORT
 | \

121 
VSC73XX_ADVPORTM_ENA_GTX
 | \

122 
VSC73XX_ADVPORTM_DDR_MODE
 \

123 )

	)

128 
vsc73xx_¥öt_cou¡s
(
p‹t
);

130 
	#VSC73XX_PORT_0
 0

	)

131 
	#VSC73XX_PORT_1
 1

	)

132 
	#VSC73XX_PORT_2
 2

	)

133 
	#VSC73XX_PORT_3
 3

	)

134 
	#VSC73XX_PORT_4
 4

	)

136 
	#VSC73XX_PORT_MAC
 6

	)

141 
vsc73xx_£tup
(
unô
);

144 
vsc73xx_gë_lök_°©us
(
unô
, *
up
, *
fdx
, 
ag7100_phy_•ìd_t
 *
•ìd
, *
cfg
);

147 
vsc73xx_phy_¥öt_lök_°©us
(
unô
);

157 
vsc73xx_rw_phy
(
wrôeFlg
, 
unô
, 
phy_addr
, 
ªg
, 
uöt16_t
 
vÆue
);

159 #ifde‡
USE_TEST_CODE


162 
vsc73xx_ã°_ª£t_löe
();

165 
vsc73xx_ã°_ª£t_™d_vîify_chùid
();

168 
vsc73xx_ã°_gpio
();

171 
vsc73xx_ã°_lﬂd_™d_ª£t_fúmw¨e
();

174 
vsc73xx_ã°_lök_°©us
();

	@ag7100/vsc8601_phy.c

38 #ifde‡
__BDI


39 
	~"bdi.h
"

41 #ifde‡
__ECOS


42 #i‡
deföed
(
CYGNUM_USE_ENET_VERBOSE
)

43 #unde‡
VERBOSE


44 
	#VERBOSE
 
CYGNUM_USE_ENET_VERBOSE


	)

46 
	#VERBOSE
 0

	)

48 
	#¥ötk
 
DEBUG_PRINTF


	)

49 
	#udñay
 
A_UDELAY


	)

51 
	~<löux/kî√l.h
>

52 
	~<asm/dñay.h
>

53 
	~"¨7100.h
"

57 #i‚de‡
VERBOSE


58 
	#VERBOSE
 0

	)

61 
	~"vsc8601_phy.h
"

63 
	#MODULE_NAME
 "VSC8601"

	)

66 
uöt16_t
 
	mis_íë_p‹t
;

67 
uöt16_t
 
	mmac_unô
;

68 
uöt16_t
 
	mphy_addr
;

69 
uöt32_t
 
	mid
;

70 
uöt16_t
 
	m°©us
;

71 }
	tvsc8601_phy_t
;

73 
uöt16_t
 
	gnmbr_phys
 = 0;

74 
vsc8601_phy_t
 
	gphy_öfo
[] = {

76 
is_íë_p‹t
: 0,

77 
mac_unô
 : 0,

78 
phy_addr
 : 0

81 
is_íë_p‹t
: 0,

82 
mac_unô
 : 0,

83 
phy_addr
 : 0

86 
is_íë_p‹t
: 0,

87 
mac_unô
 : 0,

88 
phy_addr
 : 0

91 
is_íë_p‹t
: 0,

92 
mac_unô
 : 0,

93 
phy_addr
 : 0

96 
is_íë_p‹t
: 0,

97 
mac_unô
 : 0,

98 
phy_addr
 : 0

101 
is_íë_p‹t
: 0,

102 
mac_unô
 : 0,

103 
phy_addr
 : 0

107 
vsc8601_phy_t
 *

108 
	$vsc8601_phy_föd
(
unô
)

110 
i
;

111 
vsc8601_phy_t
 *
phy
;

113 
i
 = 0; i < (
phy_öfo
)/(phy_info[0]); i++) {

114 
phy
 = &
phy_öfo
[
i
];

115 i‡(
phy
->
is_íë_p‹t
 && (phy->
mac_unô
 =
unô
))

116  
phy
;

118 
	`¥ötk
(
MODULE_NAME
": didÇŸ föd unô %d\n", 
unô
);

119  
NULL
;

120 
	}
}

124 
ölöe
 

125 
	$vsc8601_phy_mii_wrôe_maö
(
unô
, 
uöt32_t
 
phy_addr
, 
uöt8_t
 
ªg
, 
uöt16_t
 
d©a
)

127 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 31, 0);

128 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 
ªg
, 
d©a
);

129 
	}
}

131 
ölöe
 

132 
	$vsc8601_phy_mii_wrôe_ex
(
unô
, 
uöt32_t
 
phy_addr
, 
uöt8_t
 
ªg
, 
uöt16_t
 
d©a
)

134 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 31, 1);

135 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 
ªg
, 
d©a
);

136 
	}
}

138 
ölöe
 
uöt16_t


139 
	$vsc8601_phy_mii_ªad_maö
(
unô
, 
uöt32_t
 
phy_addr
, 
uöt8_t
 
ªg
)

141 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 31, 0);

142  
	`ag7100_mii_ªad
(
unô
, 
phy_addr
, 
ªg
);

143 
	}
}

145 
ölöe
 
uöt16_t


146 
	$vsc8601_phy_mii_ªad_ex
(
unô
, 
uöt32_t
 
phy_addr
, 
uöt8_t
 
ªg
)

148 
uöt16_t
 
vÆ
;

149 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 31, 1);

150 
vÆ
 = 
	`ag7100_mii_ªad
(
unô
, 
phy_addr
, 
ªg
);

151 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 31, 0);

152  
vÆ
;

153 
	}
}

158 
	$vsc8601_phy_¥öt_vÆ_bô_desc
 (
uöt16_t
 
vÆ
, *
fõldName
, *
bô_des¸ùti⁄s
[])

160 
ii
;

161 *
p2
;

163 
	`¥ötk
(
MODULE_NAME
": %s=%04x ", 
fõldName
, 
vÆ
);

164 
ii
=0;ii<16; ii++) {

165 
p2
 = 
vÆ
 & 1<<(15-
ii
Ë? 
bô_des¸ùti⁄s
[ii*2] : bit_descriptions[ii*2+1];

166 i‡(
p2
 &&Ö2[0])

167 
	`¥ötk
(
MODULE_NAME
": %s\n", 
p2
);

169 
	}
}

183 
CEXTERN
 
uöt16_t


184 
	$vsc8601_phy_mii_ªad_mode_˘æ
(
unô
, 
uöt32_t
 
phy_addr
)

186  
	`vsc8601_phy_mii_ªad_maö
(
unô
, 
phy_addr
, 0);

187 
	}
}

189 *
	gmode_˘æ_desc
[16*2] = {

208 
CEXTERN
 

209 
	$vsc8601_phy_mii_¥öt_mode_˘æ
(
uöt16_t
 
vÆ
)

211 
	`vsc8601_phy_¥öt_vÆ_bô_desc
 (
vÆ
, "mode_˘∏ (00 )", 
mode_˘æ_desc
);

212 
	}
}

214 
CEXTERN
 

215 
	$vsc8601_phy_mii_wrôe_mode_˘æ
(
unô
, 
uöt32_t
 
phy_addr
, 
uöt16_t
 
ªg
 )

217 
	`vsc8601_phy_mii_wrôe_maö
(
unô
, 
phy_addr
, 0, 
ªg
);

218 
	}
}

220 
CEXTERN
 

221 
	$vsc8601_phy_mii_rmw_˘æ
(
unô
, 
uöt32_t
 
phy_addr
, uöt32_à
mask
, uöt32_à
vÆ
)

223 
uöt16_t
 
ªg
 = 
	`vsc8601_phy_mii_ªad_mode_˘æ
(
unô
, 
phy_addr
);

224 
ªg
 &~
mask
;

225 
ªg
 |
vÆ
;

226 
	`vsc8601_phy_mii_wrôe_mode_˘æ
(
unô
, 
phy_addr
, 
ªg
);

227 
	}
}

231 
CEXTERN
 
uöt16_t


232 
	$vsc8601_phy_mii_ªad_mode_°©us
(
unô
, 
uöt32_t
 
phy_addr
)

234  
	`vsc8601_phy_mii_ªad_maö
(
unô
, 
phy_addr
, 1);

235 
	}
}

237 *
	gmode_°©us_desc
[16*2] = {

256 
CEXTERN
 

257 
	$vsc8601_phy_mii_¥öt_mode_°©us
(
uöt16_t
 
vÆ
)

259 
	`vsc8601_phy_¥öt_vÆ_bô_desc
 (
vÆ
, "mode_°©u† (01 )", 
mode_°©us_desc
);

260 
	}
}

264 
CEXTERN
 
uöt16_t


265 
	$vsc8601_phy_mii_ªad_id1
(
unô
, 
uöt32_t
 
phy_addr
)

267  
	`vsc8601_phy_mii_ªad_maö
(
unô
, 
phy_addr
, 2);

268 
	}
}

270 
CEXTERN
 
uöt16_t


271 
	$vsc8601_phy_mii_ªad_id2
(
unô
, 
uöt32_t
 
phy_addr
)

273  
	`vsc8601_phy_mii_ªad_maö
(
unô
, 
phy_addr
, 3);

274 
	}
}

278 
CEXTERN
 
uöt16_t


279 
	$vsc8601_phy_mii_ªad_gige_˘æ
(
unô
, 
uöt32_t
 
phy_addr
)

281  
	`vsc8601_phy_mii_ªad_maö
(
unô
, 
phy_addr
, 9);

282 
	}
}

284 *
	ggige_˘æ_desc
[16*2] = {

303 
CEXTERN
 

304 
	$vsc8601_phy_mii_¥öt_gige_˘æ
(
uöt16_t
 
vÆ
)

306 
	`vsc8601_phy_¥öt_vÆ_bô_desc
 (
vÆ
, "gige_˘æ (09 )", 
gige_˘æ_desc
);

307 
	}
}

309 
CEXTERN
 

310 
	$vsc8601_phy_mii_wrôe_gige_˘æ
(
unô
, 
uöt32_t
 
phy_addr
, 
uöt16_t
 
ªg
)

312  
	`vsc8601_phy_mii_wrôe_maö
(
unô
, 
phy_addr
, 9, 
ªg
);

313 
	}
}

315 
CEXTERN
 

316 
	$vsc8601_phy_rmw_gige_˘æ
(
unô
, 
uöt32_t
 
phy_addr
, uöt32_à
mask
, uöt32_à
vÆ
)

318 
uöt16_t
 
ªg
 = 
	`vsc8601_phy_mii_ªad_gige_˘æ
(
unô
, 
phy_addr
);

319 i‡(
ªg
 == 0xffff)

321 
ªg
 &~
mask
;

322 
ªg
 |
vÆ
;

323 
	`vsc8601_phy_mii_wrôe_gige_˘æ
(
unô
, 
phy_addr
, 
ªg
);

324 
	}
}

328 
CEXTERN
 
uöt16_t


329 
	$vsc8601_phy_ªad_gige_°©us
(
unô
, 
uöt32_t
 
phy_addr
)

331  
	`vsc8601_phy_mii_ªad_maö
(
unô
, 
phy_addr
, 10);

332 
	}
}

334 *
	ggige_°©us_desc
[16*2] = {

353 
CEXTERN
 

354 
	$vsc8601_phy_mii_¥öt_gige_°©us
(
uöt16_t
 
vÆ
)

356 
	`vsc8601_phy_¥öt_vÆ_bô_desc
 (
vÆ
, " gige_°©u† (10 )", 
gige_°©us_desc
);

357 
	`¥ötk
(
MODULE_NAME
": idÀ-îr-˙t: %02x\n", 
vÆ
&0xff);

358 
	}
}

364 
CEXTERN
 
uöt16_t


365 
	$vsc8601_phy_ªad_100_°©us_ex
(
unô
, 
uöt32_t
 
phy_addr
)

367  
	`vsc8601_phy_mii_ªad_maö
(
unô
, 
phy_addr
, 16);

368 
	}
}

370 *
	gl00_°©us_ex_desc
[16*2] = {

389 
CEXTERN
 

390 
	$vsc8601_phy_mii_¥öt_100_°©us_ex
(
uöt16_t
 
vÆ
)

392 
	`vsc8601_phy_¥öt_vÆ_bô_desc
 (
vÆ
, "100_°©us_ex (16 )", 
l00_°©us_ex_desc
);

393 
	}
}

397 
CEXTERN
 
uöt16_t


398 
	$vsc8601_phy_ªad_gige_°©us_ex_2
(
unô
, 
uöt32_t
 
phy_addr
)

400  
	`vsc8601_phy_mii_ªad_maö
(
unô
, 
phy_addr
, 17);

401 
	}
}

403 *
	ggige_°©us_ex_2_desc
[16*2] = {

422 
CEXTERN
 

423 
	$vsc8601_phy_mii_¥öt_gige_°©us_ex_2
(
uöt16_t
 
vÆ
)

425 
	`vsc8601_phy_¥öt_vÆ_bô_desc
 (
vÆ
, "gige_°©us_ex_2((17 )", 
gige_°©us_ex_2_desc
);

426 
	}
}

430 
CEXTERN
 
uöt16_t


431 
	$vsc8601_phy_ªad_rx_îr‹_cou¡
(
unô
, 
uöt32_t
 
phy_addr
)

433  
	`vsc8601_phy_mii_ªad_maö
(
unô
, 
phy_addr
, 19);

434 
	}
}

436 
CEXTERN
 
uöt16_t


437 
	$vsc8601_phy_ªad_Ál£_ˇºõr_cou¡
(
unô
, 
uöt32_t
 
phy_addr
)

439  
	`vsc8601_phy_mii_ªad_maö
(
unô
, 
phy_addr
, 20);

440 
	}
}

442 
CEXTERN
 
uöt16_t


443 
	$vsc8601_phy_ªad_disc⁄√˘_cou¡
(
unô
, 
uöt32_t
 
phy_addr
)

445  
	`vsc8601_phy_mii_ªad_maö
(
unô
, 
phy_addr
, 21);

446 
	}
}

448 
CEXTERN
 
uöt16_t


449 
	$vsc8601_phy_ªad_ex_¸é_£t_1
(
unô
, 
uöt32_t
 
phy_addr
)

451  
	`vsc8601_phy_mii_ªad_maö
(
unô
, 
phy_addr
, 23);

452 
	}
}

454 *
	gex_¸é_£t_1_desc
[16*2] = {

473 
CEXTERN
 

474 
	$vsc8601_phy_mii_¥öt_ex_˘æ_£t_1
(
uöt16_t
 
vÆ
)

476 
	`vsc8601_phy_¥öt_vÆ_bô_desc
 (
vÆ
, "ex_¸é_£t_1 (23 )", 
ex_¸é_£t_1_desc
);

477 
	}
}

479 
CEXTERN
 

480 
	$vsc8601_phy_wrôe_ex_¸é_£t_1
(
unô
, 
uöt32_t
 
phy_addr
, 
uöt16_t
 
ªg
)

482  
	`vsc8601_phy_mii_wrôe_maö
(
unô
, 
phy_addr
, 23, 
ªg
);

483 
	}
}

485 
CEXTERN
 

486 
	$vsc8601_phy_rmw_ex_¸é_£t_1
(
unô
, 
uöt32_t
 
phy_addr
, uöt32_à
mask
, uöt32_à
vÆ
)

488 
uöt16_t
 
ªg
 = 
	`vsc8601_phy_ªad_ex_¸é_£t_1
(
unô
, 
phy_addr
);

489 i‡(
ªg
 == 0xffff)

491 
ªg
 &~
mask
;

492 
ªg
 |
vÆ
;

493 
	`vsc8601_phy_wrôe_ex_¸é_£t_1
(
unô
, 
phy_addr
, 
ªg
);

494 
	}
}

496 
CEXTERN
 
uöt16_t


497 
	$vsc8601_phy_ªad_ex_¸é_£t_2
(
unô
, 
uöt32_t
 
phy_addr
)

499  
	`vsc8601_phy_mii_ªad_maö
(
unô
, 
phy_addr
, 24);

500 
	}
}

502 
CEXTERN
 

503 
	$vsc8601_phy_wrôe_ex_¸é_£t_2
(
unô
, 
uöt32_t
 
phy_addr
, 
uöt16_t
 
ªg
)

505  
	`vsc8601_phy_mii_wrôe_maö
(
unô
, 
phy_addr
, 24, 
ªg
);

506 
	}
}

508 
CEXTERN
 

509 
	$vsc8601_phy_rmw_ex_¸é_£t_2
(
unô
, 
uöt32_t
 
phy_addr
, uöt32_à
mask
, uöt32_à
vÆ
)

511 
uöt16_t
 
ªg
 = 
	`vsc8601_phy_ªad_ex_¸é_£t_2
(
unô
, 
phy_addr
);

512 i‡(
ªg
 == 0xffff)

514 
ªg
 &~
mask
;

515 
ªg
 |
vÆ
;

516 
	`vsc8601_phy_wrôe_ex_¸é_£t_2
(
unô
, 
phy_addr
, 
ªg
);

517 
	}
}

519 
CEXTERN
 
uöt16_t


520 
	$vsc8601_phy_ªad_úq_msk
(
unô
, 
uöt32_t
 
phy_addr
)

522  
	`vsc8601_phy_mii_ªad_maö
(
unô
, 
phy_addr
, 25);

523 
	}
}

525 
CEXTERN
 

526 
	$vsc8601_phy_wrôe_úq_msk
(
unô
, 
uöt32_t
 
phy_addr
, 
uöt16_t
 
ªg
)

528  
	`vsc8601_phy_mii_wrôe_maö
(
unô
, 
phy_addr
, 25, 
ªg
);

529 
	}
}

531 
CEXTERN
 
uöt16_t


532 
	$vsc8601_phy_ªad_úq_°©us
(
unô
, 
uöt32_t
 
phy_addr
)

534  
	`vsc8601_phy_mii_ªad_maö
(
unô
, 
phy_addr
, 26);

535 
	}
}

536 *
	gúq_°©us_desc
[16*2] = {

555 
CEXTERN
 

556 
	$vsc8601_phy_mii_¥öt_úq_°©us
(
uöt16_t
 
vÆ
)

558 
	`vsc8601_phy_¥öt_vÆ_bô_desc
 (
vÆ
, "úq_°©u† (26 )", 
úq_°©us_desc
);

559 
	}
}

563 
CEXTERN
 
uöt16_t


564 
	$vsc8601_phy_ªad_aux_˘æ_°©us
(
unô
, 
uöt32_t
 
phy_addr
)

566  
	`vsc8601_phy_mii_ªad_maö
(
unô
, 
phy_addr
, 28);

567 
	}
}

569 *
	gaux_˘æ_°©us_desc
[16*2] = {

588 
CEXTERN
 

589 
	$vsc8601_phy_mii_¥öt_aux_˘æ_°©us
(
uöt16_t
 
vÆ
)

591 
	`vsc8601_phy_¥öt_vÆ_bô_desc
 (
vÆ
, "aux_˘æ_°©u†(28 )", 
aux_˘æ_°©us_desc
);

592 
	}
}

594 
CEXTERN
 
uöt16_t


595 
	$vsc8601_phy_ªad_dñay_skew_°©us
(
unô
, 
uöt32_t
 
phy_addr
)

597  
	`vsc8601_phy_mii_ªad_maö
(
unô
, 
phy_addr
, 29);

598 
	}
}

600 
CEXTERN
 

601 
	$vsc8601_phy_mii_¥öt_dñay_skew_°©us
(
uöt16_t
 
vÆ
)

603 
	`¥ötk
(
MODULE_NAME
": dñay_skew_ (29 )=%04x\n", 
vÆ
);

604 
	`¥ötk
(
MODULE_NAME
":Öaúá dñay: %02x\n", (
vÆ
>>12)&7);

605 
	`¥ötk
(
MODULE_NAME
":Öaú b dñay: %02x\n", (
vÆ
>> 8)&7);

606 
	`¥ötk
(
MODULE_NAME
":Öaú c dñay: %02x\n", (
vÆ
>> 4)&7);

607 
	`¥ötk
(
MODULE_NAME
":Öaú d dñay: %02x\n", (
vÆ
>> 0)&7);

608 
	}
}

612 
CEXTERN
 
uöt16_t


613 
	$vsc8601_phy_ªad_¸c_good_cou¡î
(
unô
, 
uöt32_t
 
phy_addr
)

615  
	`vsc8601_phy_mii_ªad_ex
(
unô
, 
phy_addr
, 18);

616 
	}
}

620 
CEXTERN
 
uöt16_t


621 
	$vsc8601_phy_ªad_mac_ªsi°‹_ˇlibøti⁄
(
unô
, 
uöt32_t
 
phy_addr
)

623  
	`vsc8601_phy_mii_ªad_ex
(
unô
, 
phy_addr
, 19);

624 
	}
}

626 
CEXTERN
 

627 
	$vsc8601_phy_wrôe_mac_ªsi°‹_ˇlibøti⁄
(
unô
, 
uöt32_t
 
phy_addr
, 
uöt16_t
 
vÆ
)

629 
	`vsc8601_phy_mii_wrôe_ex
(
unô
, 
phy_addr
, 19, 
vÆ
);

630 
	}
}

632 
CEXTERN
 

633 
	$vsc8601_phy_rmw_mac_ªsi°‹_ˇlibøti⁄
(
unô
, 
uöt32_t
 
phy_addr
, uöt32_à
mask
, uöt32_à
vÆ
)

635 
uöt16_t
 
ªg
 = 
	`vsc8601_phy_ªad_mac_ªsi°‹_ˇlibøti⁄
(
unô
, 
phy_addr
);

636 
ªg
 &~
mask
;

637 
ªg
 |
vÆ
;

638 
	`vsc8601_phy_wrôe_mac_ªsi°‹_ˇlibøti⁄
(
unô
, 
phy_addr
, 
ªg
);

639 
	}
}

641 
CEXTERN
 
uöt16_t


642 
	$vsc8601_phy_ªad_ex_¸é_£t_5
(
unô
, 
uöt32_t
 
phy_addr
)

644  
	`vsc8601_phy_mii_ªad_ex
(
unô
, 
phy_addr
, 27);

645 
	}
}

647 
CEXTERN
 

648 
	$vsc8601_phy_mii_¥öt_ex_¸é_£t_5
(
uöt16_t
 
vÆ
)

650 
	`¥ötk
(
MODULE_NAME
":Éx_¸é_£t_5 (27E)=%04x\n", 
vÆ
);

651 
	`¥ötk
(
MODULE_NAME
": crs: %x\n", (
vÆ
>>12)&7);

652 
	`¥ötk
(
MODULE_NAME
": 100Åxámp: %x\n", (
vÆ
>> 6)&7);

653 
	`¥ötk
(
MODULE_NAME
": gigêtxámp: %x\n", (
vÆ
>> 3)&7);

654 
	`¥ötk
(
MODULE_NAME
": gigêedge: %x\n", (
vÆ
>> 0)&7);

656 i‡(
vÆ
 & 1<<10)

657 
	`¥ötk
(
MODULE_NAME
": FAR-END-LOOPBACK\n");

658 
	}
}

660 
CEXTERN
 

661 
	$vsc8601_phy_wrôe_ex_¸é_£t_5
(
unô
, 
uöt32_t
 
phy_addr
, 
uöt16_t
 
ªg
)

663 
	`vsc8601_phy_mii_wrôe_ex
(
unô
, 
phy_addr
, 27, 
ªg
);

664 
	}
}

666 
CEXTERN
 

667 
	$vsc8601_phy_rmw_ex_¸é_£t_5
(
unô
, 
uöt32_t
 
phy_addr
, uöt32_à
mask
, uöt32_à
vÆ
)

669 
uöt16_t
 
ªg
 = 
	`vsc8601_phy_ªad_ex_¸é_£t_5
(
unô
, 
phy_addr
);

670 i‡(
ªg
 == 0xffff)

672 
ªg
 &~
mask
;

673 
ªg
 |
vÆ
;

674 
	`vsc8601_phy_wrôe_ex_¸é_£t_5
(
unô
, 
phy_addr
, 
ªg
);

675 
	}
}

677 
CEXTERN
 
uöt16_t


678 
	$vsc8601_phy_ªad_skew_˘æ
(
unô
, 
uöt32_t
 
phy_addr
)

680  
	`vsc8601_phy_mii_ªad_ex
(
unô
, 
phy_addr
, 28);

681 
	}
}

683 
CEXTERN
 

684 
	$vsc8601_phy_mii_¥öt_skew_˘æ
(
uöt16_t
 
vÆ
)

686 
	`¥ötk
(
MODULE_NAME
": skew_˘æ (28E)=%04x\n", 
vÆ
);

687 
	`¥ötk
(
MODULE_NAME
":Åx cmp: %x\n", (
vÆ
>>14)&3);

688 
	`¥ötk
(
MODULE_NAME
":Ñx cmp: %x\n", (
vÆ
>>12)&7);

689 
	`¥ötk
(
MODULE_NAME
": jumbo: %x\n", (
vÆ
>>10)&7);

690 
	}
}

692 
CEXTERN
 

693 
	$vsc8601_phy_wrôe_skew_˘æ
(
unô
, 
uöt32_t
 
phy_addr
, 
uöt16_t
 
ªg
)

695  
	`vsc8601_phy_mii_wrôe_ex
(
unô
, 
phy_addr
, 28, 
ªg
);

696 
	}
}

698 
CEXTERN
 

699 
	$vsc8601_phy_rmw_skew_˘æ
(
unô
, 
uöt32_t
 
phy_addr
, uöt32_à
mask
, uöt32_à
vÆ
)

701 
uöt16_t
 
ªg
 = 
	`vsc8601_phy_ªad_skew_˘æ
(
unô
, 
phy_addr
);

702 i‡(
ªg
 == 0xffff)

704 
ªg
 &~
mask
;

705 
ªg
 |
vÆ
;

706 
	`vsc8601_phy_wrôe_skew_˘æ
(
unô
, 
phy_addr
, 
ªg
);

707 
	}
}

709 
CEXTERN
 
uöt16_t


710 
	$vsc8601_phy_ªad_ïg_1
(
unô
, 
uöt32_t
 
phy_addr
)

712  
	`vsc8601_phy_mii_ªad_ex
(
unô
, 
phy_addr
, 29);

713 
	}
}

715 
CEXTERN
 

716 
	$vsc8601_phy_wrôe_ïg_1
(
unô
, 
uöt32_t
 
phy_addr
, 
uöt16_t
 
ªg
)

718  
	`vsc8601_phy_mii_wrôe_ex
(
unô
, 
phy_addr
, 29, 
ªg
);

719 
	}
}

721 
CEXTERN
 

722 
	$vsc8601_phy_rmw_ïg_1
(
unô
, 
uöt32_t
 
phy_addr
, uöt32_à
mask
, uöt32_à
vÆ
)

724 
uöt16_t
 
ªg
 = 
	`vsc8601_phy_ªad_ïg_1
(
unô
, 
phy_addr
);

725 i‡(
ªg
 == 0xffff)

727 
ªg
 &~
mask
;

728 
ªg
 |
vÆ
;

729 
	`vsc8601_phy_wrôe_ïg_1
(
unô
, 
phy_addr
, 
ªg
);

730 
	}
}

732 
CEXTERN
 
uöt16_t


733 
	$vsc8601_phy_ªad_ïg_2
(
unô
, 
uöt32_t
 
phy_addr
)

735  
	`vsc8601_phy_mii_ªad_ex
(
unô
, 
phy_addr
, 20);

736 
	}
}

738 
CEXTERN
 

739 
	$vsc8601_phy_wrôe_ïg_2
(
unô
, 
uöt32_t
 
phy_addr
, 
uöt16_t
 
ªg
)

741  
	`vsc8601_phy_mii_wrôe_ex
(
unô
, 
phy_addr
, 30, 
ªg
);

742 
	}
}

744 
CEXTERN
 

745 
	$vsc8601_phy_rmw_ïg_2
(
unô
, 
uöt32_t
 
phy_addr
, uöt32_à
mask
, uöt32_à
vÆ
)

747 
uöt16_t
 
ªg
 = 
	`vsc8601_phy_ªad_ïg_2
(
unô
, 
phy_addr
);

748 i‡(
ªg
 == 0xffff)

750 
ªg
 &~
mask
;

751 
ªg
 |
vÆ
;

752 
	`vsc8601_phy_wrôe_ïg_2
(
unô
, 
phy_addr
, 
ªg
);

753 
	}
}

757 
CEXTERN
 

758 
	$vsc8601_phy_mii_so·_ª£t
(
unô
, 
uöt32_t
 
phy_addr
)

760 
	`vsc8601_phy_mii_rmw_˘æ
(
unô
, 
phy_addr
, 1<<15, 1<<15);

761 
	`udñay
(10);

762 
	}
}

764 
CEXTERN
 

765 
	$vsc8601_phy_mii_£t_lo›back
(
unô
, 
uöt32_t
 
phy_addr
, 
⁄Off
)

767 
uöt32_t
 
vÆ
 = 
⁄Off
 ? 1<<14 : 0;

768 
	`vsc8601_phy_mii_rmw_˘æ
(
unô
, 
phy_addr
, 1<<14, 
vÆ
);

769 
	}
}

771 
CEXTERN
 

772 
	$vsc8601_phy_mii_£t_auto
(
unô
, 
uöt32_t
 
phy_addr
, 
⁄Off
)

774 
uöt32_t
 
vÆ
 = 
⁄Off
 ? 1<<12 : 0;

775 
	`vsc8601_phy_mii_rmw_˘æ
(
unô
, 
phy_addr
, 1<<12, 
vÆ
);

776 
	}
}

778 
CEXTERN
 

779 
	$vsc8601_phy_mii_f‹˚_•ìd
(
unô
, 
uöt32_t
 
phy_addr
, 
•ìd
)

781 
uöt32_t
 
vÆ
=0;

782 i‡(
•ìd
 & 1<<0Ë
vÆ
 |= 1<<6;

783 i‡(
•ìd
 & 2<<0Ë
vÆ
 |= 1<<13;

784 
	`vsc8601_phy_mii_rmw_˘æ
(
unô
, 
phy_addr
, 1<<6 | 1<<13 , 
vÆ
);

785 
	}
}

787 
CEXTERN
 

788 
	$vsc8601_phy_mii_ª°¨t_auto
(
unô
, 
uöt32_t
 
phy_addr
, 
⁄Off
)

790 
uöt32_t
 
vÆ
 = 
⁄Off
 ? 1<<9 : 0;

791 
	`vsc8601_phy_mii_rmw_˘æ
(
unô
, 
phy_addr
, 1<<9, 
vÆ
);

792 
	}
}

794 
CEXTERN
 

795 
	$vsc8601_phy_mii_£t_du∂ex
(
unô
, 
uöt32_t
 
phy_addr
, 
⁄Off
)

797 
uöt32_t
 
vÆ
 = 
⁄Off
 ? 1<<8 : 0;

798 
	`vsc8601_phy_mii_rmw_˘æ
(
unô
, 
phy_addr
, 1<<8, 
vÆ
);

799 
	}
}

803 
CEXTERN
 

804 
	$vsc8601_phy_£t_gige_ã°_n‹mÆ
(
unô
, 
uöt32_t
 
phy_addr
)

806 
	`vsc8601_phy_rmw_gige_˘æ
(
unô
, 
phy_addr
, 7<<13, 0<<13);

807 
	}
}

809 
CEXTERN
 

810 
	$vsc8601_phy_£t_gige_ã°_wavef‹m
(
unô
, 
uöt32_t
 
phy_addr
)

812 
	`vsc8601_phy_rmw_gige_˘æ
(
unô
, 
phy_addr
, 7<<13, 1<<13);

813 
	}
}

815 
CEXTERN
 

816 
	$vsc8601_phy_£t_gige_ã°_jôãr_ma°î
(
unô
, 
uöt32_t
 
phy_addr
)

818 
	`vsc8601_phy_rmw_gige_˘æ
(
unô
, 
phy_addr
, 7<<13, 2<<13);

819 
	}
}

821 
CEXTERN
 

822 
	$vsc8601_phy_£t_gige_ã°_jôãr_¶ave
(
unô
, 
uöt32_t
 
phy_addr
)

824 
	`vsc8601_phy_rmw_gige_˘æ
(
unô
, 
phy_addr
, 7<<13, 3<<13);

825 
	}
}

827 
CEXTERN
 

828 
	$vsc8601_phy_£t_gige_ã°_di°‹ti⁄
(
unô
, 
uöt32_t
 
phy_addr
)

830 
	`vsc8601_phy_rmw_gige_˘æ
(
unô
, 
phy_addr
, 7<<13, 4<<13);

831 
	}
}

833 
CEXTERN
 

834 
	$vsc8601_phy_£t_gige_ã°_ma°î
(
unô
, 
uöt32_t
 
phy_addr
)

836 
	`vsc8601_phy_rmw_gige_˘æ
(
unô
, 
phy_addr
, 3<<11, 3<<11);

837 
	}
}

839 
CEXTERN
 

840 
	$vsc8601_phy_£t_gige_ã°_¶ave
(
unô
, 
uöt32_t
 
phy_addr
)

842 
	`vsc8601_phy_rmw_gige_˘æ
(
unô
, 
phy_addr
, 3<<11, 2<<11);

843 
	}
}

845 
CEXTERN
 

846 
	$vsc8601_phy_£t_gige_mu…ù‹t
(
unô
, 
uöt32_t
 
phy_addr
, 
⁄Off
)

848 
uöt32_t
 
vÆ
 = 
⁄Off
 ? 1<<10 : 0;

849 
	`vsc8601_phy_rmw_gige_˘æ
(
unô
, 
phy_addr
, 1<<10, 
vÆ
);

850 
	}
}

852 
CEXTERN
 
uöt16_t


853 
	$vsc8601_phy_gë_•ìd
(
uöt16_t
 
unô
, uöt16_à
phy_addr
)

855 
uöt16_t
 
•ìd
 = (
	`vsc8601_phy_ªad_aux_˘æ_°©us
(
unô
, 
phy_addr
) >> 3) & 3;

857 
•ìd
) {

859  
AG7100_PHY_SPEED_10T
;

861  
AG7100_PHY_SPEED_100TX
;

863  
AG7100_PHY_SPEED_1000T
;

865 
	`¥ötk
(
MODULE_NAME
": unkown speedÑead!\n");

868 
	}
}

871 
	$vsc8601_phy_£tup_gíîic
(
uöt16_t
 
unô
, uöt16_à
phy_addr
)

873 
	`vsc8601_phy_mii_£t_du∂ex
(
unô
, 
phy_addr
, 1);

874 #ifde‡
CONFIG_AR9100


876 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 0x1f, 0x1);

877 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 0x1c, 0x3000);

878 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 0x1f, 0x0);

881 
	}
}

884 
	$vsc8601_phy_£tup_©hîos_f1e
(
uöt16_t
 
unô
, uöt16_à
phy_addr
)

887 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 0x1D, 0x5);

888 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 0x1E, 0x100);

891 
	}
}

894 
	$vsc8601_phy_£tup_vsc8601_Rev_A
(
uöt16_t
 
unô
, uöt16_à
phy_addr
)

896 
uöt16_t
 
uu
;

900 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 31, 0x52b5);

902 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 16, 0xaf8a);

904 
uu
=
	`ag7100_mii_ªad
(
unô
, 
phy_addr
, 18);

905 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 18, 
uu
);

907 
uu
=
	`ag7100_mii_ªad
(
unô
, 
phy_addr
, 17);

908 
uu
&=~0x000c;

909 
uu
|= 0x0008;

910 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 17, 
uu
);

912 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 16, 0x8f8a);

914 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 16, 0xaf86);

916 
uu
=
	`ag7100_mii_ªad
(
unô
, 
phy_addr
, 18);

917 
uu
&=~0x000c;

918 
uu
|= 0x0008;

919 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 18, 
uu
);

921 
uu
=
	`ag7100_mii_ªad
(
unô
, 
phy_addr
, 17);

922 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 17, 
uu
);

924 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 16, 0x8f86);

926 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 16, 0xaf82);

928 
uu
=
	`ag7100_mii_ªad
(
unô
, 
phy_addr
, 18);

929 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 18, 
uu
);

931 
uu
=
	`ag7100_mii_ªad
(
unô
, 
phy_addr
, 17);

932 
uu
&=~0x0180;

933 
uu
|= 0x0100;

934 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 17, 
uu
);

936 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 16, 0x8f82);

938 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 31, 0);

941 
	`vsc8601_phy_rmw_ex_¸é_£t_1
(
unô
, 
phy_addr
, 1<<8, 1<<8);

942 
	}
}

945 
	$vsc8601_phy_£tup_vsc8601_Rev_B
(
uöt16_t
 
unô
, uöt16_à
phy_addr
)

947 #ifde‡
CONFIG_AR9100


949 
uöt16_t
 
uu
;

951 
uu
=
	`ag7100_mii_ªad
(
unô
, 
phy_addr
, 4);

952 
uu
|= 0xc00;

953 
	`ag7100_mii_wrôe
(
unô
, 
phy_addr
, 4, 
uu
);

957 
	`vsc8601_phy_rmw_ex_¸é_£t_1
(
unô
, 
phy_addr
, 1<<8, 1<<8);

958 
	}
}

960 
CEXTERN
 

961 
	$vsc8601_phy_discovî_™d_£tup_phy
(
unô
)

963 
uöt16_t
 
phy_addr
;

964 
uöt16_t
 
unô_˙t
;

966 
unô_˙t
=0;

967 
nmbr_phys
=0;

969 
phy_addr
=0;Öhy_addr<31;Öhy_addr++) {

971 
uöt16_t
 
id1
 = 
	`vsc8601_phy_mii_ªad_id1
(
unô
, 
phy_addr
);

972 
uöt32_t
 
id2
 = 
	`vsc8601_phy_mii_ªad_id2
(
unô
, 
phy_addr
);

973 
uöt32_t
 
id
 = 
id1
<<16 | 
id2
;

975 
uöt32_t
 
id_ßv
 = 0;

976 
uöt16_t
 
phy_°©us
 = 0;

978 i‡(
id1
 > 0 && id1 < 0x7ff) {

979 
	`vsc8601_phy_mii_so·_ª£t
–
unô
, 
phy_addr
 );

980 
phy_°©us
=
	`vsc8601_phy_mii_ªad_mode_°©us
(
unô
, 
phy_addr
);

982 
	`¥ötk
(
MODULE_NAME
": Found %d unit %d:%dÖhy_addr: %d id: %08x\n",

983 
nmbr_phys
, 
unô
, 
unô_˙t
, 
phy_addr
, 
id
);

985 
phy_öfo
[
nmbr_phys
].
id
=id;

986 
phy_öfo
[
nmbr_phys
].
phy_addr
=phy_addr;

987 
phy_öfo
[
nmbr_phys
].
mac_unô
=
unô_˙t
;

988 
phy_öfo
[
nmbr_phys
].
is_íë_p‹t
=0;

990 i‡(
id
 !
id_ßv
) {

991 
id
) {

993 
	`¥ötk
(
MODULE_NAME
": PHY is Vitesse VSC8601 Rev A\n");

994 
	`vsc8601_phy_£tup_vsc8601_Rev_A
(
unô
, 
phy_addr
);

995 
	`vsc8601_phy_£tup_gíîic
(
unô
, 
phy_addr
);

996 
phy_öfo
[
nmbr_phys
].
is_íë_p‹t
=1;

997 
unô_˙t
++;

1001 
	`¥ötk
(
MODULE_NAME
": PHY is Vitesse VSC8601 Rev B\n");

1002 
	`vsc8601_phy_£tup_vsc8601_Rev_B
(
unô
, 
phy_addr
);

1003 
	`vsc8601_phy_£tup_gíîic
(
unô
, 
phy_addr
);

1004 
phy_öfo
[
nmbr_phys
].
is_íë_p‹t
=1;

1005 
unô_˙t
++;

1009 
	`¥ötk
(
MODULE_NAME
": PHY is Vitesse VSC8201 Phy\n");

1010 
	`vsc8601_phy_£tup_gíîic
(
unô
, 
phy_addr
);

1011 
phy_öfo
[
nmbr_phys
].
is_íë_p‹t
=1;

1012 
unô_˙t
++;

1016 
	`¥ötk
(
MODULE_NAME
": PHY is ICPlus IP175B Switch\n");

1017 
	`vsc8601_phy_£tup_gíîic
(
unô
, 
phy_addr
);

1018 
phy_öfo
[
nmbr_phys
].
is_íë_p‹t
=1;

1019 
unô_˙t
++;

1023 
	`¥ötk
(
MODULE_NAME
": PHY isán Atheros F1E\n");

1024 
	`vsc8601_phy_£tup_©hîos_f1e
(
unô
, 
phy_addr
);

1025 
	`vsc8601_phy_£tup_gíîic
(
unô
, 
phy_addr
);

1026 
phy_öfo
[
nmbr_phys
].
is_íë_p‹t
=1;

1027 
unô_˙t
++;

1031 
	`¥ötk
(
MODULE_NAME
": PHY is unknown, using generic IEEE interface\n");

1032 
	`vsc8601_phy_£tup_gíîic
(
unô
, 
phy_addr
);

1033 
phy_öfo
[
nmbr_phys
].
is_íë_p‹t
=1;

1034 
unô_˙t
++;

1037 
id_ßv
=
id
;

1039 
nmbr_phys
++;

1042 i‡(
nmbr_phys
 == 0) {

1043 
	`¥ötk
(
MODULE_NAME
":Ço PHY IDs found \n");

1046 i‡(
unô_˙t
 == 0) {

1047 
	`¥ötk
(
MODULE_NAME
":Ço PHY IDsássignedÅo unit\n");

1051 
	}
}

1053 
CEXTERN
 

1054 
	$vsc8601_phy_¥öt_°©us_øw
(
uöt16_t
 
unô
, uöt16_à
phy_addr
)

1057 #i‡–
VERBOSE
 > 1 )

1061 
uöt16_t
 
mc
 = 
	`vsc8601_phy_mii_ªad_mode_˘æ
 (
unô
, 
phy_addr
);

1062 
uöt16_t
 
ms
 = 
	`vsc8601_phy_mii_ªad_mode_°©us
 (
unô
, 
phy_addr
);

1063 
uöt16_t
 
id1
 = 
	`vsc8601_phy_mii_ªad_id1
 (
unô
, 
phy_addr
);

1064 
uöt32_t
 
id2
 = 
	`vsc8601_phy_mii_ªad_id2
 (
unô
, 
phy_addr
);

1065 
uöt32_t
 
id
 = 
id1
<<16 | 
id2
;

1066 
uöt16_t
 
ªc
 = 
	`vsc8601_phy_ªad_rx_îr‹_cou¡
 (
unô
, 
phy_addr
);

1067 
uöt16_t
 
fcc
 = 
	`vsc8601_phy_ªad_Ál£_ˇºõr_cou¡
 (
unô
, 
phy_addr
);

1068 
uöt16_t
 
dc
 = 
	`vsc8601_phy_ªad_disc⁄√˘_cou¡
 (
unô
, 
phy_addr
);

1069 
uöt16_t
 
cs1
 = 
	`vsc8601_phy_ªad_ex_¸é_£t_1
 (
unô
, 
phy_addr
);

1070 
uöt16_t
 
cs2
 = 
	`vsc8601_phy_ªad_ex_¸é_£t_2
 (
unô
, 
phy_addr
);

1071 
uöt16_t
 
im
 = 
	`vsc8601_phy_ªad_úq_msk
 (
unô
, 
phy_addr
);

1072 
uöt16_t
 
is
 = 
	`vsc8601_phy_ªad_úq_°©us
 (
unô
, 
phy_addr
);

1073 
uöt16_t
 
acs
 = 
	`vsc8601_phy_ªad_aux_˘æ_°©us
 (
unô
, 
phy_addr
);

1074 
uöt16_t
 
dss
 = 
	`vsc8601_phy_ªad_dñay_skew_°©us
 (
unô
, 
phy_addr
);

1076 
	`¥ötk
(
MODULE_NAME
": unô %dÖhy_add∏%d\n", 
unô
, 
phy_addr
);

1077 
	`vsc8601_phy_mii_¥öt_mode_˘æ
(
mc
);

1078 
	`vsc8601_phy_mii_¥öt_mode_°©us
(
ms
);

1079 
	`¥ötk
(
MODULE_NAME
": id1 (02 )=%02x\n", 
id1
 & 0xff);

1080 
	`¥ötk
(
MODULE_NAME
": id2 (03 )=%02x\n", 
id2
 & 0xff);

1081 
	`¥ötk
(
MODULE_NAME
":Ñcv-îr‹ (19 )=%04x\n", 
ªc
 & 0xff);

1082 
	`¥ötk
(
MODULE_NAME
": fÆ£-ˇºõ∏ (20 )=%04x\n", 
fcc
 & 0xff);

1083 
	`¥ötk
(
MODULE_NAME
": disc⁄√˘_˙à (21 )=%04x\n", 
dc
 & 0xff);

1084 
	`vsc8601_phy_mii_¥öt_ex_˘æ_£t_1
(
cs1
);

1086 
	`¥ötk
(
MODULE_NAME
":Éx_¸é_£t_2 (24 )=%04x\n", 
cs2
);

1087 
	`¥ötk
(
MODULE_NAME
": irq_msk (25 )=%04x\n", 
im
);

1088 
	`vsc8601_phy_mii_¥öt_úq_°©us
(
is
);

1089 
	`vsc8601_phy_mii_¥öt_aux_˘æ_°©us
(
acs
);

1090 
	`vsc8601_phy_mii_¥öt_dñay_skew_°©us
(
dss
);

1094  
id
 ) {

1097 
uöt16_t
 
cgc
 = 
	`vsc8601_phy_ªad_¸c_good_cou¡î
 (
unô
, 
phy_addr
);

1098 
uöt16_t
 
m¸
 = 
	`vsc8601_phy_ªad_mac_ªsi°‹_ˇlibøti⁄
 (
unô
, 
phy_addr
);

1099 
uöt16_t
 
cs5
 = 
	`vsc8601_phy_ªad_ex_¸é_£t_5
 (
unô
, 
phy_addr
);

1100 
uöt16_t
 
skc
 = 
	`vsc8601_phy_ªad_skew_˘æ
 (
unô
, 
phy_addr
);

1101 
uöt16_t
 
ï1
 = 
	`vsc8601_phy_ªad_ïg_1
 (
unô
, 
phy_addr
);

1102 
uöt16_t
 
ï2
 = 
	`vsc8601_phy_ªad_ïg_1
 (
unô
, 
phy_addr
);

1104 
	`¥ötk
(
MODULE_NAME
": crc_good (18E)=%04x\n", 
cgc
);

1105 
	`¥ötk
(
MODULE_NAME
":Ñesi°‹ (19E)=%04x\n", 
m¸
);

1106 
	`vsc8601_phy_mii_¥öt_ex_¸é_£t_5
(
cs5
);

1107 
	`vsc8601_phy_mii_¥öt_skew_˘æ
(
skc
);

1108 
	`¥ötk
(
MODULE_NAME
":Épg_1 (29E)=%04x\n", 
ï1
);

1109 
	`¥ötk
(
MODULE_NAME
":Épg_2 (30E)=%04x\n", 
ï2
);

1116 
	`vsc8601_phy_gë_•ìd
(
unô
, 
phy_addr
)) {

1117 
AG7100_PHY_SPEED_10T
:

1118 
	`¥ötk
(
MODULE_NAME
": * current speed 10 base-t\n");

1121 
AG7100_PHY_SPEED_100TX
:

1123 
uöt16_t
 
es
 = 
	`vsc8601_phy_ªad_100_°©us_ex
 (
unô
, 
phy_addr
);

1124 
	`vsc8601_phy_mii_¥öt_100_°©us_ex
(
es
);

1125 
	`¥ötk
(
MODULE_NAME
": * current speed 100 base-t\n");

1129 
AG7100_PHY_SPEED_1000T
:

1131 
uöt16_t
 
gc
 = 
	`vsc8601_phy_mii_ªad_gige_˘æ
 (
unô
, 
phy_addr
);

1132 
uöt16_t
 
gs
 = 
	`vsc8601_phy_ªad_gige_°©us
 (
unô
, 
phy_addr
);

1133 
uöt16_t
 
gs2
 = 
	`vsc8601_phy_ªad_gige_°©us_ex_2
 (
unô
, 
phy_addr
);

1135 
	`vsc8601_phy_mii_¥öt_gige_˘æ
(
gc
);

1136 
	`vsc8601_phy_mii_¥öt_gige_°©us
(
gs
);

1137 
	`vsc8601_phy_mii_¥öt_gige_°©us_ex_2
(
gs2
);

1139 
	`¥ötk
(
MODULE_NAME
": * current speed gige\n");

1144 
	`¥ötk
(
MODULE_NAME
": * current speed unknown\n");

1147 
	`¥ötk
("\n");

1150 #i‡–
VERBOSE
 > 0 )

1152 
uöt16_t
 
ms
 = 
	`vsc8601_phy_mii_ªad_mode_°©us
 (
unô
, 
phy_addr
);

1153 
uöt16_t
 
mc
 = 
	`vsc8601_phy_mii_ªad_mode_˘æ
 (
unô
, 
phy_addr
);

1154 
uöt16_t
 
ªc
 = 
	`vsc8601_phy_ªad_rx_îr‹_cou¡
 (
unô
, 
phy_addr
);

1155 
uöt16_t
 
fcc
 = 
	`vsc8601_phy_ªad_Ál£_ˇºõr_cou¡
 (
unô
, 
phy_addr
);

1156 
uöt16_t
 
dc
 = 
	`vsc8601_phy_ªad_disc⁄√˘_cou¡
 (
unô
, 
phy_addr
);

1158 
	`¥ötk
(
MODULE_NAME
": unô %dÖhy_add∏%d\n", 
unô
, 
phy_addr
);

1159 
	`vsc8601_phy_mii_¥öt_mode_˘æ
(
mc
);

1160 
	`vsc8601_phy_mii_¥öt_mode_°©us
(
ms
);

1161 
	`¥ötk
(
MODULE_NAME
":Ñcv-îr‹ (19 )=%04x\n", 
ªc
 & 0xff);

1162 
	`¥ötk
(
MODULE_NAME
": fÆ£-ˇºõ∏ (20 )=%04x\n", 
fcc
 & 0xff);

1163 
	`¥ötk
(
MODULE_NAME
": disc⁄√˘_˙à (21 )=%04x\n", 
dc
 & 0xff);

1167 
uöt16_t
 
ms
 = 
	`vsc8601_phy_mii_ªad_mode_°©us
 (
unô
, 
phy_addr
);

1168 
	`¥ötk
(
MODULE_NAME
": unô %dÖhy_add∏%d\n", 
unô
, 
phy_addr
);

1175 
	}
}

1184 
	$vsc8601_phy_£tup
(
unô
)

1186 
ii
;

1187 
vsc8601_phy_t
 *
phy
;

1189 i‡(
	`vsc8601_phy_discovî_™d_£tup_phy
(
unô
))

1192 
ii
 = 0; iò< (
phy_öfo
)/(phy_info[0]); ii++) {

1193 
phy
 = &
phy_öfo
[
ii
];

1194 i‡(
phy
->
is_íë_p‹t
 && (phy->
mac_unô
 =
unô
))

1195 
	`vsc8601_phy_¥öt_°©us_øw
(
phy
->
mac_unô
,Öhy->
phy_addr
);

1198 
	}
}

1201 
	$vsc8601_phy_gë_lök_°©us
(
unô
, *
lök
, *
fdx
, 
ag7100_phy_•ìd_t
 *
•ìd
, *
cfg
)

1203 
ms
;

1204 
acs
;

1205 
tc
;

1206 
vsc8601_phy_t
 *
phy
 = 
	`vsc8601_phy_föd
(
unô
);

1208 i‡(!
phy
)

1211 
ms
 = 
	`vsc8601_phy_mii_ªad_mode_°©us
 (
unô
, 
phy
->
phy_addr
);

1213 i‡(
lök
Ë*lök = (
ms
 & 1<<2) > 0;

1214 i‡(
•ìd
Ë*•ìd = 
	`vsc8601_phy_gë_•ìd
(
unô
, 
phy
->
phy_addr
);

1215 i‡(
fdx
) {

1216 
acs
 = 
	`vsc8601_phy_ªad_aux_˘æ_°©us
(
unô
, 
phy
->
phy_addr
);

1217 *
fdx
 = (
acs
 & 1<<5) > 0;

1219 
tc
 = 
phy
->
°©us
 !
ms
;

1220 
phy
->
°©us
 = 
ms
;

1222 i‡(
tc
)

1223 
	`vsc8601_phy_¥öt_°©us_øw
(
unô
, 
phy
->
phy_addr
);

1225 i‡(
cfg
)

1226 *
cfg
=
tc
;

1228  
tc
;

1229 
	}
}

1232 
	$vsc8601_phy_¥öt_lök_°©us
(
unô
)

1234 
vsc8601_phy_t
 *
phy
 = 
	`vsc8601_phy_föd
(
unô
);

1236 i‡(!
phy
) {

1237 
	`¥ötk
(
MODULE_NAME
": couldÇot find mac\n");

1241 
	`vsc8601_phy_¥öt_°©us_øw
(
unô
, 
phy
->
phy_addr
);

1243 
	}
}

	@ag7100/vsc8601_phy.h

25 #i‚de‡
_VSC8601_PHY_H


26 
	#_VSC8601_PHY_H


	)

28 #i‚de‡
CEXTERN


29 
	#CEXTERN
 
ölöe


	)

32 
	~"ag7100.h
"

35 
vsc8601_phy_£tup
(
unô
);

38 
vsc8601_phy_gë_lök_°©us
(
unô
, *
lök
, *
fdx
, 
ag7100_phy_•ìd_t
 *
•ìd
, *
cfg
);

41 
vsc8601_phy_¥öt_lök_°©us
(
unô
);

	@ag7100/vsc_phy.c

18 
	~<löux/kî√l.h
>

19 
	~"ag7100.h
"

20 
	~"ag7100_phy.h
"

23 
	mis_íë_p‹t
;

24 
	mmac_unô
;

25 
uöt32_t
 
	mphy_addr
;

26 
uöt16_t
 
	m°©us
;

27 }
	tvsc_phy_t
;

29 
vsc_phy_t
 
	gphy_öfo
[] = {

30 {
is_íë_p‹t
: 1,

31 
mac_unô
 : 0,

32 
phy_addr
 : 0x18},

34 {
is_íë_p‹t
: 1,

35 
mac_unô
 : 1,

36 
phy_addr
 : 0x10}

40 
vsc_phy_t
 *

41 
	$vsc_phy_föd
(
unô
)

43 
i
, 
found
 = 0;

44 
vsc_phy_t
 *
phy
;

46 
i
 = 0; i < (
phy_öfo
)/(
vsc_phy_t
); i++) {

47 
phy
 = &
phy_öfo
[
i
];

48 i‡(
phy
->
is_íë_p‹t
 && (phy->
mac_unô
 =
unô
))

49  
phy
;

51  
NULL
;

52 
	}
}

55 
	$vsc_phy_£tup
(
unô
)

57 
vsc_phy_t
 *
phy
 = 
	`vsc_phy_föd
(
unô
);

59 i‡(!
phy
) {

60 
	`¥ötk
("\nNÿphy found f‹ unô %d\n", 
unô
);

64 
	`¥ötk
("unô %dÖhyádd∏%#x ", 
unô
, 
phy
->
phy_addr
);

65 
	`¥ötk
("ªg0 %#x\n", 
	`ag7100_mii_ªad
(0, 
phy
->
phy_addr
, 0));

66 
	`ag7100_mii_wrôe
(0, 
phy
->
phy_addr
, 0, 0x8000);

67 
	`ag7100_mii_wrôe
(0, 
phy
->
phy_addr
, 0x1c, 0x4);

69 
	`ag7100_mii_wrôe
(0, 
phy
->
phy_addr
, 0x17, 0x11000);

71 
	`ag7100_mii_wrôe
(0, 
phy
->
phy_addr
, 31, 0x2a30);

72 
	`ag7100_mii_wrôe
(0, 
phy
->
phy_addr
, 8, 0x10);

73 
	`ag7100_mii_wrôe
(0, 
phy
->
phy_addr
, 31, 0);

74 
	`ag7100_mii_wrôe
(0, 
phy
->
phy_addr
, 0x12, 0x0008);

77 
	}
}

80 
	$vsc_phy_is_up
(
unô
)

82 
°©us
;

83 
vsc_phy_t
 *
phy
 = 
	`vsc_phy_föd
(
unô
);

85 i‡(!
phy
)

88 
°©us
 = 
	`ag7100_mii_ªad
(0, 
phy
->
phy_addr
, 
VSC_MII_MODE_STATUS
);

91 i‡((
°©us
 & (
LINK_UP
)) == (LINK_UP))

95 
	}
}

98 
	$vsc_phy_is_fdx
(
unô
)

100 
°©us
;

101 
vsc_phy_t
 *
phy
 = 
	`vsc_phy_föd
(
unô
);

103 i‡(!
phy
)

106 
°©us
 = 
	`ag7100_mii_ªad
(0, 
phy
->
phy_addr
, 
VSC_AUX_CTRL_STATUS
);

107 
°©us
 = ((°©u†& 
FDX
) >> 5);

109  (
°©us
);

110 
	}
}

113 
	$vsc_phy_•ìd
(
unô
)

115 
°©us
;

116 
vsc_phy_t
 *
phy
 = 
	`vsc_phy_föd
(
unô
);

118 i‡(!
phy
)

121 
°©us
 = 
	`ag7100_mii_ªad
(0, 
phy
->
phy_addr
, 
VSC_AUX_CTRL_STATUS
);

122 
°©us
 = ((°©u†& 
SPEED_STATUS
) >> 3);

124 
°©us
) {

126  
AG7100_PHY_SPEED_10T
;

128  
AG7100_PHY_SPEED_100TX
;

130  
AG7100_PHY_SPEED_1000T
;

134 
	}
}

156 
	$vsc_phy_gë_lök_°©us
(
unô
, *
lök
, *
fdx
,

157 
ag7100_phy_•ìd_t
 *
•ìd
, *
cfg
)

159 
ms
;

160 
tc
;

161 
vsc_phy_t
 *
phy
 = 
	`vsc_phy_föd
(
unô
);

163 i‡(!
phy
)

166 
ms
 = 
	`vsc_phy_is_up
(
unô
);

167 i‡(
lök
)

168 *
lök
 = 
ms
;

170 i‡(
•ìd
)

171 *
•ìd
 = 
	`vsc_phy_•ìd
(
unô
);

173 i‡(
fdx
)

174 *
fdx
 = 
	`vsc_phy_is_fdx
(
unô
);

176 
tc
 = 
phy
->
°©us
 !
ms
;

177 
phy
->
°©us
 = 
ms
;

179 i‡(
cfg
)

180 *
cfg
=
tc
;

182 if(
tc
)

186 
	}
}

199 
	$vsc_phy_¥öt_lök_°©us
(
unô
)

201 
•ìd
;

202 
lök
;

204 
lök
 = 
	`vsc_phy_is_up
(
unô
);

206 
	`¥ötk
("Phy i†%s\n",
lök
 ? "up" : "down");

207 
	`¥ötk
("Du∂ex i†%s\n",
	`vsc_phy_is_fdx
(
unô
) ? "Full" : "Half");

209 
•ìd
 = 
	`vsc_phy_•ìd
(
unô
);

211 
•ìd
)

213 
AG7100_PHY_SPEED_10T
:

214 
	`¥ötk
("Speed is 10 Mbps\n");

217 
AG7100_PHY_SPEED_100TX
:

218 
	`¥ötk
("Speed is 100 Mbps\n");

221 
AG7100_PHY_SPEED_1000T
:

222 
	`¥ötk
("Speed is 1000 Mbps\n");

226 
	`¥ötk
("Speed is UNKNOWN\n");

229  (
lök
);

230 
	}
}

	@ag7100/vsc_phy.h

18 #i‚de‡
_VSC_PHY_H


19 
	#_VSC_PHY_H


	)

21 
	#VSC_MII_MODE_STATUS
 0x1

	)

22 
	#AUTONEG_COMPLETE
 (1 << 5)

	)

23 
	#LINK_UP
 (1 << 2)

	)

25 
	#VSC_AUX_CTRL_STATUS
 0x1c

	)

26 
	#FDX
 (1 << 5)

	)

27 
	#SPEED_STATUS
 (3 << 3)

	)

29 
vsc_phy_£tup
(
unô
);

30 
vsc_phy_is_up
(
unô
);

31 
vsc_phy_is_fdx
(
unô
);

32 
vsc_phy_•ìd
(
unô
);

33 
vsc_phy_gë_lök_°©us
(
unô
,

34 *
lök
,

35 *
fdx
,

36 
ag7100_phy_•ìd_t
 *
•ìd
,

37 *
cfg
);

39 
vsc_phy_¥öt_lök_°©us
(
unô
);

	@/usr/include/asm/byteorder.h

1 #i‚de‡
_I386_BYTEORDER_H


2 
	#_I386_BYTEORDER_H


	)

4 
	~<asm/ty≥s.h
>

6 #ifde‡
__GNUC__


10 
__ölöe__
 
__u32
 
	$___¨ch__swab32
(
__u32
 
x
)

12 #ifde‡
CONFIG_X86_BSWAP


13 
	`__asm__
("bsw≠ %0" : "Ù" (
x
) : "0" (x));

15 
	`__asm__
("xchgb %b0,%h0\n\t"

18 :"=q" (
x
)

19 : "0" (
x
));

21  
x
;

22 
	}
}

24 
__ölöe__
 
__u64
 
	$___¨ch__swab64
(
__u64
 
vÆ
)

27 °ru˘ { 
__u32
 
a
,
b
; } 
s
;

28 
__u64
 
u
;

29 } 
v
;

30 
v
.
u
 = 
vÆ
;

31 #ifde‡
CONFIG_X86_BSWAP


32 
	`asm
("bswapl %0 ; bswapl %1 ; xchgl %0,%1"

33 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

34 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

36 
v
.
s
.
a
 = 
	`___¨ch__swab32
(v.s.a);

37 
v
.
s
.
b
 = 
	`___¨ch__swab32
(v.s.b);

38 
	`asm
("xchg»%0,%1" : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
) : "0" (v.s.a), "1" (v.s.b));

40  
v
.
u
;

41 
	}
}

46 
	#__¨ch__swab64
(
x
Ë
	`___¨ch__swab64
(x)

	)

47 
	#__¨ch__swab32
(
x
Ë
	`___¨ch__swab32
(x)

	)

49 
	#__BYTEORDER_HAS_U64__


	)

53 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

9 
	#SI_LOAD_SHIFT
 16

	)

10 
	ssysöfo
 {

11 
	mu±ime
;

12 
	mlﬂds
[3];

13 
	mtŸÆøm
;

14 
	m‰ìøm
;

15 
	msh¨edøm
;

16 
	mbuf„ºam
;

17 
	mtŸÆsw≠
;

18 
	m‰ìsw≠
;

19 
	m¥ocs
;

20 
	m∑d
;

21 
	mtŸÆhigh
;

22 
	m‰ìhigh
;

23 
	mmem_unô
;

24 
	m_f
[20-2*()-()];

28 
	#BUILD_BUG_ON
(
c⁄dôi⁄
Ë(()([1 - 2*!!(c⁄dôi⁄)]))

	)

34 
	#BUILD_BUG_ON_ZERO
(
e
Ë(([1 - 2 * !!”)]Ë- 1)

	)

37 
	#__FUNCTION__
 (
__func__
)

	)

	@/usr/include/linux/netdevice.h

25 #i‚de‡
_LINUX_NETDEVICE_H


26 
	#_LINUX_NETDEVICE_H


	)

28 
	~<löux/if.h
>

29 
	~<löux/if_ëhî.h
>

30 
	~<löux/if_∑ckë.h
>

33 
	#MAX_ADDR_LEN
 32

	)

36 
	#NETDEV_TX_OK
 0

	)

37 
	#NETDEV_TX_BUSY
 1

	)

38 
	#NETDEV_TX_LOCKED
 -1

	)

45 #i‡!
deföed
(
CONFIG_AX25
Ë&& !deföed(
CONFIG_AX25_MODULE
Ë&& !deföed(
CONFIG_TR
)

46 
	#LL_MAX_HEADER
 32

	)

48 #i‡
deföed
(
CONFIG_AX25
Ë|| deföed(
CONFIG_AX25_MODULE
)

49 
	#LL_MAX_HEADER
 96

	)

51 
	#LL_MAX_HEADER
 48

	)

55 #i‡!
deföed
(
CONFIG_NET_IPIP
) && \

56 !
deföed
(
CONFIG_IPV6
Ë&& !
	$deföed
(
CONFIG_IPV6_MODULE
)

57 
	#MAX_HEADER
 
LL_MAX_HEADER


	)

59 
	#MAX_HEADER
 (
LL_MAX_HEADER
 + 48)

	)

67 
	s√t_devi˚_°©s


69 
rx_∑ckës
;

70 
tx_∑ckës
;

71 
rx_byãs
;

72 
tx_byãs
;

73 
rx_îr‹s
;

74 
tx_îr‹s
;

75 
rx_dr›≥d
;

76 
tx_dr›≥d
;

77 
mu…iˇ°
;

78 
cﬁlisi⁄s
;

81 
rx_Àngth_îr‹s
;

82 
rx_ovî_îr‹s
;

83 
rx_¸c_îr‹s
;

84 
rx_‰ame_îr‹s
;

85 
rx_fifo_îr‹s
;

86 
rx_mis£d_îr‹s
;

89 
tx_ab‹ãd_îr‹s
;

90 
tx_ˇºõr_îr‹s
;

91 
tx_fifo_îr‹s
;

92 
tx_hóπbót_îr‹s
;

93 
tx_wödow_îr‹s
;

96 
rx_com¥es£d
;

97 
tx_com¥es£d
;

103 
IF_PORT_UNKNOWN
 = 0,

104 
IF_PORT_10BASE2
,

105 
IF_PORT_10BASET
,

106 
IF_PORT_AUI
,

107 
IF_PORT_100BASET
,

108 
IF_PORT_100BASETX
,

109 
IF_PORT_100BASEFX


	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

5 #unde‡
NULL


6 #i‡
deföed
(
__˝lu•lus
)

7 
	#NULL
 0

	)

9 
	#NULL
 ((*)0)

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

5 
	~<löux/posix_ty≥s.h
>

6 
	~<asm/ty≥s.h
>

8 #i‚de‡
__KERNEL_STRICT_NAMES


10 
__u32
 
	t__kî√l_dev_t
;

12 
__kî√l_fd_£t
 
	tfd_£t
;

13 
__kî√l_dev_t
 
	tdev_t
;

14 
__kî√l_öo_t
 
	töo_t
;

15 
__kî√l_mode_t
 
	tmode_t
;

16 
__kî√l_∆ök_t
 
	t∆ök_t
;

17 
__kî√l_off_t
 
	toff_t
;

18 
__kî√l_pid_t
 
	tpid_t
;

19 
__kî√l_daddr_t
 
	tdaddr_t
;

20 
__kî√l_key_t
 
	tkey_t
;

21 
__kî√l_su£c⁄ds_t
 
	tsu£c⁄ds_t
;

22 
__kî√l_timî_t
 
	ttimî_t
;

23 
__kî√l_˛ockid_t
 
	t˛ockid_t
;

24 
__kî√l_mqd_t
 
	tmqd_t
;

26 
__kî√l_uid_t
 
	tuid_t
;

27 
__kî√l_gid_t
 
	tgid_t
;

29 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

30 
__kî√l_loff_t
 
	tloff_t
;

37 #i‚de‡
_SIZE_T


38 
	#_SIZE_T


	)

39 
__kî√l_size_t
 
	tsize_t
;

42 #i‚de‡
_SSIZE_T


43 
	#_SSIZE_T


	)

44 
__kî√l_ssize_t
 
	tssize_t
;

47 #i‚de‡
_PTRDIFF_T


48 
	#_PTRDIFF_T


	)

49 
__kî√l_±rdiff_t
 
	t±rdiff_t
;

52 #i‚de‡
_TIME_T


53 
	#_TIME_T


	)

54 
__kî√l_time_t
 
	ttime_t
;

57 #i‚de‡
_CLOCK_T


58 
	#_CLOCK_T


	)

59 
__kî√l_˛ock_t
 
	t˛ock_t
;

62 #i‚de‡
_CADDR_T


63 
	#_CADDR_T


	)

64 
__kî√l_ˇddr_t
 
	tˇddr_t
;

68 
	tu_ch¨
;

69 
	tu_sh‹t
;

70 
	tu_öt
;

71 
	tu_l⁄g
;

74 
	tunch¨
;

75 
	tush‹t
;

76 
	tuöt
;

77 
	tul⁄g
;

79 #i‚de‡
__BIT_TYPES_DEFINED__


80 
	#__BIT_TYPES_DEFINED__


	)

82 
__u8
 
	tu_öt8_t
;

83 
__s8
 
	töt8_t
;

84 
__u16
 
	tu_öt16_t
;

85 
__s16
 
	töt16_t
;

86 
__u32
 
	tu_öt32_t
;

87 
__s32
 
	töt32_t
;

91 
__u8
 
	tuöt8_t
;

92 
__u16
 
	tuöt16_t
;

93 
__u32
 
	tuöt32_t
;

95 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

96 
__u64
 
	tuöt64_t
;

97 
__u64
 
	tu_öt64_t
;

98 
__s64
 
	töt64_t
;

102 
	#Æig√d_u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

109 #i‚de‡
HAVE_SECTOR_T


110 
	t£˘‹_t
;

113 #i‚de‡
HAVE_BLKCNT_T


114 
	tblk˙t_t
;

121 #i‚de‡
pgoff_t


122 
	#pgoff_t
 

	)

132 #ifde‡
__CHECKER__


133 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

135 
	#__bôwi£__


	)

137 #ifde‡
__CHECK_ENDIAN__


138 
	#__bôwi£
 
__bôwi£__


	)

140 
	#__bôwi£


	)

143 
__u16
 
	t__bôwi£
 
	t__À16
;

144 
__u16
 
	t__bôwi£
 
	t__be16
;

145 
__u32
 
	t__bôwi£
 
	t__À32
;

146 
__u32
 
	t__bôwi£
 
	t__be32
;

147 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

148 
__u64
 
	t__bôwi£
 
	t__À64
;

149 
__u64
 
	t__bôwi£
 
	t__be64
;

153 
	su°©
 {

154 
__kî√l_daddr_t
 
	mf_t‰ì
;

155 
__kî√l_öo_t
 
	mf_töode
;

156 
	mf_‚ame
[6];

157 
	mf_Âack
[6];

	@/usr/include/asm/errno.h

1 #i‚de‡
_I386_ERRNO_H


2 
	#_I386_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_I386_TYPES_H


2 
	#_I386_TYPES_H


	)

4 #i‚de‡
__ASSEMBLY__


6 
	tumode_t
;

13 
__sig√d__
 
	t__s8
;

14 
	t__u8
;

16 
__sig√d__
 
	t__s16
;

17 
	t__u16
;

19 
__sig√d__
 
	t__s32
;

20 
	t__u32
;

22 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

23 
__sig√d__
 
	t__s64
;

24 
	t__u64
;

	@/usr/include/linux/byteorder/little_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


2 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

4 #i‚de‡
__LITTLE_ENDIAN


5 
	#__LITTLE_ENDIAN
 1234

	)

7 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


8 
	#__LITTLE_ENDIAN_BITFIELD


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/byã‹dî/swab.h
>

14 
	#__c⁄°™t_ht⁄l
(
x
Ë–(
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

15 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
–(
__be32
)(x))

	)

16 
	#__c⁄°™t_ht⁄s
(
x
Ë–(
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

17 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
–(
__be16
)(x))

	)

18 
	#__c⁄°™t_˝u_to_À64
(
x
Ë–(
__À64
)(
__u64
)(x))

	)

19 
	#__c⁄°™t_À64_to_˝u
(
x
Ë–(
__u64
)(
__À64
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À32
(
x
Ë–(
__À32
)(
__u32
)(x))

	)

21 
	#__c⁄°™t_À32_to_˝u
(
x
Ë–(
__u32
)(
__À32
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À16
(
x
Ë–(
__À16
)(
__u16
)(x))

	)

23 
	#__c⁄°™t_À16_to_˝u
(
x
Ë–(
__u16
)(
__À16
)(x))

	)

24 
	#__c⁄°™t_˝u_to_be64
(
x
Ë–(
__be64
)
	`___c⁄°™t_swab64
((x)))

	)

25 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
–(
__u64
)(
__be64
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be32
(
x
Ë–(
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

27 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
–(
__u32
)(
__be32
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be16
(
x
Ë–(
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

29 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
–(
__u16
)(
__be16
)(x))

	)

30 
	#__˝u_to_À64
(
x
Ë–(
__À64
)(
__u64
)(x))

	)

31 
	#__À64_to_˝u
(
x
Ë–(
__u64
)(
__À64
)(x))

	)

32 
	#__˝u_to_À32
(
x
Ë–(
__À32
)(
__u32
)(x))

	)

33 
	#__À32_to_˝u
(
x
Ë–(
__u32
)(
__À32
)(x))

	)

34 
	#__˝u_to_À16
(
x
Ë–(
__À16
)(
__u16
)(x))

	)

35 
	#__À16_to_˝u
(
x
Ë–(
__u16
)(
__À16
)(x))

	)

36 
	#__˝u_to_be64
(
x
Ë–(
__be64
)
	`__swab64
((x)))

	)

37 
	#__be64_to_˝u
(
x
Ë
	`__swab64
–(
__u64
)(
__be64
)(x))

	)

38 
	#__˝u_to_be32
(
x
Ë–(
__be32
)
	`__swab32
((x)))

	)

39 
	#__be32_to_˝u
(
x
Ë
	`__swab32
–(
__u32
)(
__be32
)(x))

	)

40 
	#__˝u_to_be16
(
x
Ë–(
__be16
)
	`__swab16
((x)))

	)

41 
	#__be16_to_˝u
(
x
Ë
	`__swab16
–(
__u16
)(
__be16
)(x))

	)

43 
__ölöe__
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

45  (
__À64
)*
p
;

46 
	}
}

47 
__ölöe__
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

49  (
__u64
)*
p
;

50 
	}
}

51 
__ölöe__
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

53  (
__À32
)*
p
;

54 
	}
}

55 
__ölöe__
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

57  (
__u32
)*
p
;

58 
	}
}

59 
__ölöe__
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

61  (
__À16
)*
p
;

62 
	}
}

63 
__ölöe__
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

65  (
__u16
)*
p
;

66 
	}
}

67 
__ölöe__
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

69  (
__be64
)
	`__swab64p
(
p
);

70 
	}
}

71 
__ölöe__
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

73  
	`__swab64p
((
__u64
 *)
p
);

74 
	}
}

75 
__ölöe__
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

77  (
__be32
)
	`__swab32p
(
p
);

78 
	}
}

79 
__ölöe__
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

81  
	`__swab32p
((
__u32
 *)
p
);

82 
	}
}

83 
__ölöe__
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

85  (
__be16
)
	`__swab16p
(
p
);

86 
	}
}

87 
__ölöe__
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

89  
	`__swab16p
((
__u16
 *)
p
);

90 
	}
}

91 
	#__˝u_to_À64s
(
x
Ëdÿ{} 0)

	)

92 
	#__À64_to_˝us
(
x
Ëdÿ{} 0)

	)

93 
	#__˝u_to_À32s
(
x
Ëdÿ{} 0)

	)

94 
	#__À32_to_˝us
(
x
Ëdÿ{} 0)

	)

95 
	#__˝u_to_À16s
(
x
Ëdÿ{} 0)

	)

96 
	#__À16_to_˝us
(
x
Ëdÿ{} 0)

	)

97 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

98 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

99 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

100 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

101 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

102 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

104 
	~<löux/byã‹dî/gíîic.h
>

	@/usr/include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	~<löux/ty≥s.h
>

23 
	~<löux/sockë.h
>

25 
	#IFNAMSIZ
 16

	)

26 
	~<löux/hdlc/io˘l.h
>

29 
	#IFF_UP
 0x1

	)

30 
	#IFF_BROADCAST
 0x2

	)

31 
	#IFF_DEBUG
 0x4

	)

32 
	#IFF_LOOPBACK
 0x8

	)

33 
	#IFF_POINTOPOINT
 0x10

	)

34 
	#IFF_NOTRAILERS
 0x20

	)

35 
	#IFF_RUNNING
 0x40

	)

36 
	#IFF_NOARP
 0x80

	)

37 
	#IFF_PROMISC
 0x100

	)

38 
	#IFF_ALLMULTI
 0x200

	)

40 
	#IFF_MASTER
 0x400

	)

41 
	#IFF_SLAVE
 0x800

	)

43 
	#IFF_MULTICAST
 0x1000

	)

45 
	#IFF_PORTSEL
 0x2000

	)

46 
	#IFF_AUTOMEDIA
 0x4000

	)

47 
	#IFF_DYNAMIC
 0x8000

	)

49 
	#IFF_LOWER_UP
 0x10000

	)

50 
	#IFF_DORMANT
 0x20000

	)

52 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|\

53 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

56 
	#IFF_802_1Q_VLAN
 0x1

	)

57 
	#IFF_EBRIDGE
 0x2

	)

58 
	#IFF_SLAVE_INACTIVE
 0x4

	)

59 
	#IFF_MASTER_8023AD
 0x8

	)

60 
	#IFF_MASTER_ALB
 0x10

	)

62 
	#IF_GET_IFACE
 0x0001

	)

63 
	#IF_GET_PROTO
 0x0002

	)

66 
	#IF_IFACE_V35
 0x1000

	)

67 
	#IF_IFACE_V24
 0x1001

	)

68 
	#IF_IFACE_X21
 0x1002

	)

69 
	#IF_IFACE_T1
 0x1003

	)

70 
	#IF_IFACE_E1
 0x1004

	)

71 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

72 
	#IF_IFACE_X21D
 0x1006

	)

75 
	#IF_PROTO_HDLC
 0x2000

	)

76 
	#IF_PROTO_PPP
 0x2001

	)

77 
	#IF_PROTO_CISCO
 0x2002

	)

78 
	#IF_PROTO_FR
 0x2003

	)

79 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

80 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

81 
	#IF_PROTO_X25
 0x2006

	)

82 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

83 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

84 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

85 
	#IF_PROTO_FR_PVC
 0x200A

	)

86 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

87 
	#IF_PROTO_RAW
 0x200C

	)

91 
	mIF_OPER_UNKNOWN
,

92 
	mIF_OPER_NOTPRESENT
,

93 
	mIF_OPER_DOWN
,

94 
	mIF_OPER_LOWERLAYERDOWN
,

95 
	mIF_OPER_TESTING
,

96 
	mIF_OPER_DORMANT
,

97 
	mIF_OPER_UP
,

102 
	mIF_LINK_MODE_DEFAULT
,

103 
	mIF_LINK_MODE_DORMANT
,

116 
	sifm≠


118 
	mmem_°¨t
;

119 
	mmem_íd
;

120 
	mba£_addr
;

121 
	múq
;

122 
	mdma
;

123 
	mp‹t
;

127 
	sif_£âögs


129 
	mty≥
;

130 
	msize
;

133 
øw_hdlc_¥Ÿo
 *
	møw_hdlc
;

134 
cisco_¥Ÿo
 *
	mcisco
;

135 
‰_¥Ÿo
 *
	m‰
;

136 
‰_¥Ÿo_pvc
 *
	m‰_pvc
;

137 
‰_¥Ÿo_pvc_öfo
 *
	m‰_pvc_öfo
;

140 
sync_£rül_£âögs
 *
	msync
;

141 
ã1_£âögs
 *
	mã1
;

142 } 
	mifs_ifsu
;

152 
	si‰eq


154 
	#IFHWADDRLEN
 6

	)

157 
	mi‰n_«me
[
IFNAMSIZ
];

158 } 
	mi‰_i‰n
;

161 
sockaddr
 
	mi‰u_addr
;

162 
sockaddr
 
	mi‰u_d°addr
;

163 
sockaddr
 
	mi‰u_brﬂdaddr
;

164 
sockaddr
 
	mi‰u_√tmask
;

165 
sockaddr
 
	mi‰u_hwaddr
;

166 
	mi‰u_Êags
;

167 
	mi‰u_ivÆue
;

168 
	mi‰u_mtu
;

169 
ifm≠
 
	mi‰u_m≠
;

170 
	mi‰u_¶ave
[
IFNAMSIZ
];

171 
	mi‰u_√w«me
[
IFNAMSIZ
];

172 * 
	mi‰u_d©a
;

173 
if_£âögs
 
	mi‰u_£âögs
;

174 } 
	mi‰_i‰u
;

177 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

178 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

179 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

180 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

181 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

182 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

183 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

184 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

185 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

186 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

187 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

188 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

189 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

190 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

191 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

192 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

193 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

202 
	sifc⁄f


204 
	mifc_Àn
;

207 *
	mifcu_buf
;

208 
i‰eq
 *
	mifcu_ªq
;

209 } 
	mifc_ifcu
;

211 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

212 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

41 
	#ETH_P_LOOP
 0x0060

	)

42 
	#ETH_P_PUP
 0x0200

	)

43 
	#ETH_P_PUPAT
 0x0201

	)

44 
	#ETH_P_IP
 0x0800

	)

45 
	#ETH_P_X25
 0x0805

	)

46 
	#ETH_P_ARP
 0x0806

	)

47 
	#ETH_P_BPQ
 0x08FF

	)

48 
	#ETH_P_IEEEPUP
 0x0a00

	)

49 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

50 
	#ETH_P_DEC
 0x6000

	)

51 
	#ETH_P_DNA_DL
 0x6001

	)

52 
	#ETH_P_DNA_RC
 0x6002

	)

53 
	#ETH_P_DNA_RT
 0x6003

	)

54 
	#ETH_P_LAT
 0x6004

	)

55 
	#ETH_P_DIAG
 0x6005

	)

56 
	#ETH_P_CUST
 0x6006

	)

57 
	#ETH_P_SCA
 0x6007

	)

58 
	#ETH_P_RARP
 0x8035

	)

59 
	#ETH_P_ATALK
 0x809B

	)

60 
	#ETH_P_AARP
 0x80F3

	)

61 
	#ETH_P_8021Q
 0x8100

	)

62 
	#ETH_P_IPX
 0x8137

	)

63 
	#ETH_P_IPV6
 0x86DD

	)

64 
	#ETH_P_SLOW
 0x8809

	)

65 
	#ETH_P_WCCP
 0x883E

	)

67 
	#ETH_P_PPP_DISC
 0x8863

	)

68 
	#ETH_P_PPP_SES
 0x8864

	)

69 
	#ETH_P_MPLS_UC
 0x8847

	)

70 
	#ETH_P_MPLS_MC
 0x8848

	)

71 
	#ETH_P_ATMMPOA
 0x884¯

	)

72 
	#ETH_P_ATMFATE
 0x8884

	)

75 
	#ETH_P_AOE
 0x88A2

	)

76 
	#ETH_P_TIPC
 0x88CA

	)

82 
	#ETH_P_802_3
 0x0001

	)

83 
	#ETH_P_AX25
 0x0002

	)

84 
	#ETH_P_ALL
 0x0003

	)

85 
	#ETH_P_802_2
 0x0004

	)

86 
	#ETH_P_SNAP
 0x0005

	)

87 
	#ETH_P_DDCMP
 0x0006

	)

88 
	#ETH_P_WAN_PPP
 0x0007

	)

89 
	#ETH_P_PPP_MP
 0x0008

	)

90 
	#ETH_P_LOCALTALK
 0x0009

	)

91 
	#ETH_P_PPPTALK
 0x0010

	)

92 
	#ETH_P_TR_802_2
 0x0011

	)

93 
	#ETH_P_MOBITEX
 0x0015

	)

94 
	#ETH_P_CONTROL
 0x0016

	)

95 
	#ETH_P_IRDA
 0x0017

	)

96 
	#ETH_P_ECONET
 0x0018

	)

97 
	#ETH_P_HDLC
 0x0019

	)

98 
	#ETH_P_ARCNET
 0x001A

	)

104 
	sëhhdr
 {

105 
	mh_de°
[
ETH_ALEN
];

106 
	mh_sour˚
[
ETH_ALEN
];

107 
__be16
 
	mh_¥Ÿo
;

108 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_packet.h

1 #i‚de‡
__LINUX_IF_PACKET_H


2 
	#__LINUX_IF_PACKET_H


	)

4 
	ssockaddr_pkt


6 
	m•kt_Ámûy
;

7 
	m•kt_devi˚
[14];

8 
	m•kt_¥Ÿocﬁ
;

11 
	ssockaddr_Œ


13 
	m¶l_Ámûy
;

14 
	m¶l_¥Ÿocﬁ
;

15 
	m¶l_ifödex
;

16 
	m¶l_h©y≥
;

17 
	m¶l_pkây≥
;

18 
	m¶l_hÆí
;

19 
	m¶l_addr
[8];

24 
	#PACKET_HOST
 0

	)

25 
	#PACKET_BROADCAST
 1

	)

26 
	#PACKET_MULTICAST
 2

	)

27 
	#PACKET_OTHERHOST
 3

	)

28 
	#PACKET_OUTGOING
 4

	)

30 
	#PACKET_LOOPBACK
 5

	)

31 
	#PACKET_FASTROUTE
 6

	)

35 
	#PACKET_ADD_MEMBERSHIP
 1

	)

36 
	#PACKET_DROP_MEMBERSHIP
 2

	)

37 
	#PACKET_RECV_OUTPUT
 3

	)

39 
	#PACKET_RX_RING
 5

	)

40 
	#PACKET_STATISTICS
 6

	)

41 
	#PACKET_COPY_THRESH
 7

	)

43 
	sçackë_°©s


45 
	mç_∑ckës
;

46 
	mç_dr›s
;

49 
	sçackë_hdr


51 
	mç_°©us
;

52 
	#TP_STATUS_KERNEL
 0

	)

53 
	#TP_STATUS_USER
 1

	)

54 
	#TP_STATUS_COPY
 2

	)

55 
	#TP_STATUS_LOSING
 4

	)

56 
	#TP_STATUS_CSUMNOTREADY
 8

	)

57 
	mç_Àn
;

58 
	mç_¢≠Àn
;

59 
	mç_mac
;

60 
	mç_√t
;

61 
	mç_£c
;

62 
	mç_u£c
;

65 
	#TPACKET_ALIGNMENT
 16

	)

66 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

67 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

82 
	sçackë_ªq


84 
	mç_block_size
;

85 
	mç_block_ƒ
;

86 
	mç_‰ame_size
;

87 
	mç_‰ame_ƒ
;

90 
	s∑ckë_mªq


92 
	mmr_ifödex
;

93 
	mmr_ty≥
;

94 
	mmr_Æí
;

95 
	mmr_addªss
[8];

98 
	#PACKET_MR_MULTICAST
 0

	)

99 
	#PACKET_MR_PROMISC
 1

	)

100 
	#PACKET_MR_ALLMULTI
 2

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

	@/usr/include/asm/posix_types.h

1 #i‚de‡
__ARCH_I386_POSIX_TYPES_H


2 
	#__ARCH_I386_POSIX_TYPES_H


	)

10 
	t__kî√l_öo_t
;

11 
	t__kî√l_mode_t
;

12 
	t__kî√l_∆ök_t
;

13 
	t__kî√l_off_t
;

14 
	t__kî√l_pid_t
;

15 
	t__kî√l_ùc_pid_t
;

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	t__kî√l_size_t
;

19 
	t__kî√l_ssize_t
;

20 
	t__kî√l_±rdiff_t
;

21 
	t__kî√l_time_t
;

22 
	t__kî√l_su£c⁄ds_t
;

23 
	t__kî√l_˛ock_t
;

24 
	t__kî√l_timî_t
;

25 
	t__kî√l_˛ockid_t
;

26 
	t__kî√l_daddr_t
;

27 * 
	t__kî√l_ˇddr_t
;

28 
	t__kî√l_uid16_t
;

29 
	t__kî√l_gid16_t
;

30 
	t__kî√l_uid32_t
;

31 
	t__kî√l_gid32_t
;

33 
	t__kî√l_ﬁd_uid_t
;

34 
	t__kî√l_ﬁd_gid_t
;

35 
	t__kî√l_ﬁd_dev_t
;

37 #ifde‡
__GNUC__


38 
	t__kî√l_loff_t
;

42 #i‡
deföed
(
__KERNEL__
Ë|| deföed(
__USE_ALL
)

43 
	mvÆ
[2];

45 
	m__vÆ
[2];

47 } 
	t__kî√l_fsid_t
;

49 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

51 #unde‡
__FD_SET


52 
	#__FD_SET
(
fd
,
fd£ç
) \

53 
__asm__
 
	`__vﬁ©ûe__
("btsl %1,%0": \

54 "+m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
)):"r" ((Ë(
fd
)))

	)

56 #unde‡
__FD_CLR


57 
	#__FD_CLR
(
fd
,
fd£ç
) \

58 
__asm__
 
	`__vﬁ©ûe__
("btrl %1,%0": \

59 "+m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
)):"r" ((Ë(
fd
)))

	)

61 #unde‡
__FD_ISSET


62 
	#__FD_ISSET
(
fd
,
fd£ç
Ë(
	`__exãnsi⁄__
 ({ \

63 
__ªsu…
; \

64 
__asm__
 
	`__vﬁ©ûe__
("btl %1,%2 ; setb %0" \

65 :"=q" (
__ªsu…
Ë:"r" ((Ë(
fd
)), \

66 "m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
))); \

67 
__ªsu…
; }))

	)

69 #unde‡
__FD_ZERO


70 
	#__FD_ZERO
(
fd£ç
) \

72 
__d0
, 
__d1
; \

73 
__asm__
 
	`__vﬁ©ûe__
("cld ;Ñep ; stosl" \

74 :"=m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
)), \

75 "=&c" (
__d0
), "=&D" (
__d1
) \

76 :"a" (0), "1" (
__FDSET_LONGS
), \

77 "2" ((
__kî√l_fd_£t
 *Ë(
fd£ç
)) : "memory"); \

78 } 0)

	)

	@/usr/include/linux/byteorder/generic.h

1 #i‚de‡
_LINUX_BYTEORDER_GENERIC_H


2 
	#_LINUX_BYTEORDER_GENERIC_H


	)

	@/usr/include/linux/byteorder/swab.h

1 #i‚de‡
_LINUX_BYTEORDER_SWAB_H


2 
	#_LINUX_BYTEORDER_SWAB_H


	)

22 
	#___swab16
(
x
) \

24 
__u16
 
__x
 = (
x
); \

25 ((
__u16
)( \

26 (((
__u16
)(
__x
) & (__u16)0x00ffU) << 8) | \

27 (((
__u16
)(
__x
) & (__u16)0xff00U) >> 8) )); \

28 })

	)

30 
	#___swab32
(
x
) \

32 
__u32
 
__x
 = (
x
); \

33 ((
__u32
)( \

34 (((
__u32
)(
__x
) & (__u32)0x000000ffUL) << 24) | \

35 (((
__u32
)(
__x
) & (__u32)0x0000ff00UL) << 8) | \

36 (((
__u32
)(
__x
) & (__u32)0x00ff0000UL) >> 8) | \

37 (((
__u32
)(
__x
) & (__u32)0xff000000UL) >> 24) )); \

38 })

	)

40 
	#___swab64
(
x
) \

42 
__u64
 
__x
 = (
x
); \

43 ((
__u64
)( \

44 (
__u64
)(((__u64)(
__x
) & (__u64)0x00000000000000ffULL) << 56) | \

45 (
__u64
)(((__u64)(
__x
) & (__u64)0x000000000000ff00ULL) << 40) | \

46 (
__u64
)(((__u64)(
__x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

47 (
__u64
)(((__u64)(
__x
) & (__u64)0x00000000ff000000ULL) << 8) | \

48 (
__u64
)(((__u64)(
__x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

49 (
__u64
)(((__u64)(
__x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

50 (
__u64
)(((__u64)(
__x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

51 (
__u64
)(((__u64)(
__x
) & (__u64)0xff00000000000000ULL) >> 56) )); \

52 })

	)

54 
	#___c⁄°™t_swab16
(
x
) \

55 ((
__u16
)( \

56 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

57 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8Ë))

	)

58 
	#___c⁄°™t_swab32
(
x
) \

59 ((
__u32
)( \

60 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

61 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

62 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

63 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24Ë))

	)

64 
	#___c⁄°™t_swab64
(
x
) \

65 ((
__u64
)( \

66 (
__u64
)(((__u64)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

67 (
__u64
)(((__u64)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

68 (
__u64
)(((__u64)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

69 (
__u64
)(((__u64)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

70 (
__u64
)(((__u64)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

71 (
__u64
)(((__u64)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

72 (
__u64
)(((__u64)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

73 (
__u64
)(((__u64)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56Ë))

	)

78 #i‚de‡
__¨ch__swab16


79 
	#__¨ch__swab16
(
x
Ë({ 
__u16
 
__tmp
 = (xË; 
	`___swab16
(__tmp); })

	)

81 #i‚de‡
__¨ch__swab32


82 
	#__¨ch__swab32
(
x
Ë({ 
__u32
 
__tmp
 = (xË; 
	`___swab32
(__tmp); })

	)

84 #i‚de‡
__¨ch__swab64


85 
	#__¨ch__swab64
(
x
Ë({ 
__u64
 
__tmp
 = (xË; 
	`___swab64
(__tmp); })

	)

88 #i‚de‡
__¨ch__swab16p


89 
	#__¨ch__swab16p
(
x
Ë
	`__¨ch__swab16
(*(x))

	)

91 #i‚de‡
__¨ch__swab32p


92 
	#__¨ch__swab32p
(
x
Ë
	`__¨ch__swab32
(*(x))

	)

94 #i‚de‡
__¨ch__swab64p


95 
	#__¨ch__swab64p
(
x
Ë
	`__¨ch__swab64
(*(x))

	)

98 #i‚de‡
__¨ch__swab16s


99 
	#__¨ch__swab16s
(
x
Ëdÿ{ *(xË
	`__¨ch__swab16p
((x)); } 0)

	)

101 #i‚de‡
__¨ch__swab32s


102 
	#__¨ch__swab32s
(
x
Ëdÿ{ *(xË
	`__¨ch__swab32p
((x)); } 0)

	)

104 #i‚de‡
__¨ch__swab64s


105 
	#__¨ch__swab64s
(
x
Ëdÿ{ *(xË
	`__¨ch__swab64p
((x)); } 0)

	)

112 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__OPTIMIZE__
)

113 
	#__swab16
(
x
) \

114 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

115 
	`___swab16
((
x
)) : \

116 
	`__fswab16
((
x
)))

	)

117 
	#__swab32
(
x
) \

118 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

119 
	`___swab32
((
x
)) : \

120 
	`__fswab32
((
x
)))

	)

121 
	#__swab64
(
x
) \

122 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

123 
	`___swab64
((
x
)) : \

124 
	`__fswab64
((
x
)))

	)

126 
	#__swab16
(
x
Ë
	`__fswab16
(x)

	)

127 
	#__swab32
(
x
Ë
	`__fswab32
(x)

	)

128 
	#__swab64
(
x
Ë
	`__fswab64
(x)

	)

132 
__ölöe__
 
__u16
 
	$__fswab16
(
__u16
 
x
)

134  
	`__¨ch__swab16
(
x
);

135 
	}
}

136 
__ölöe__
 
__u16
 
	$__swab16p
(c⁄° 
__u16
 *
x
)

138  
	`__¨ch__swab16p
(
x
);

139 
	}
}

140 
__ölöe__
 
	$__swab16s
(
__u16
 *
addr
)

142 
	`__¨ch__swab16s
(
addr
);

143 
	}
}

145 
__ölöe__
 
__u32
 
	$__fswab32
(
__u32
 
x
)

147  
	`__¨ch__swab32
(
x
);

148 
	}
}

149 
__ölöe__
 
__u32
 
	$__swab32p
(c⁄° 
__u32
 *
x
)

151  
	`__¨ch__swab32p
(
x
);

152 
	}
}

153 
__ölöe__
 
	$__swab32s
(
__u32
 *
addr
)

155 
	`__¨ch__swab32s
(
addr
);

156 
	}
}

158 #ifde‡
__BYTEORDER_HAS_U64__


159 
__ölöe__
 
__u64
 
	$__fswab64
(
__u64
 
x
)

161 #ifde‡
__SWAB_64_THRU_32__


162 
__u32
 
h
 = 
x
 >> 32;

163 
__u32
 
l
 = 
x
 & ((1ULL<<32)-1);

164  (((
__u64
)
	`__swab32
(
l
)Ë<< 32Ë| ((__u64)(__swab32(
h
)));

166  
	`__¨ch__swab64
(
x
);

168 
	}
}

169 
__ölöe__
 
__u64
 
	$__swab64p
(c⁄° 
__u64
 *
x
)

171  
	`__¨ch__swab64p
(
x
);

172 
	}
}

173 
__ölöe__
 
	$__swab64s
(
__u64
 *
addr
)

175 
	`__¨ch__swab64s
(
addr
);

176 
	}
}

	@/usr/include/linux/hdlc/ioctl.h

1 #i‚de‡
__HDLC_IOCTL_H__


2 
	#__HDLC_IOCTL_H__


	)

5 
	m˛ock_øã
;

6 
	m˛ock_ty≥
;

7 
	mlo›back
;

8 } 
	tsync_£rül_£âögs
;

11 
	m˛ock_øã
;

12 
	m˛ock_ty≥
;

13 
	mlo›back
;

14 
	m¶Ÿ_m≠
;

15 } 
	tã1_£âögs
;

18 
	mícodög
;

19 
	m∑rôy
;

20 } 
	tøw_hdlc_¥Ÿo
;

23 
	mt391
;

24 
	mt392
;

25 
	mn391
;

26 
	mn392
;

27 
	mn393
;

28 
	mlmi
;

29 
	md˚
;

30 } 
	t‰_¥Ÿo
;

33 
	mdlci
;

34 } 
	t‰_¥Ÿo_pvc
;

37 
	mdlci
;

38 
	mma°î
[
IFNAMSIZ
];

39 }
	t‰_¥Ÿo_pvc_öfo
;

42 
	möãrvÆ
;

43 
	mtimeout
;

44 } 
	tcisco_¥Ÿo
;

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	s__kî√l_sockaddr_°‹age
 {

12 
	mss_Ámûy
;

14 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

17 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

19 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

21 
	~<asm/sockë.h
>

22 
	~<löux/sockios.h
>

23 
	~<löux/uio.h
>

24 
	~<löux/ty≥s.h
>

26 
sys˘l_somaxc⁄n
;

27 #ifde‡
CONFIG_PROC_FS


28 
	g£q_fûe
;

29 
sockë_£q_show
(
£q_fûe
 *
£q
);

32 
	tß_Ámûy_t
;

38 
	ssockaddr
 {

39 
ß_Ámûy_t
 
	mß_Ámûy
;

40 
	mß_d©a
[14];

43 
	slögî
 {

44 
	ml_⁄off
;

45 
	ml_lögî
;

48 
	#sockaddr_°‹age
 
__kî√l_sockaddr_°‹age


	)

56 
	smsghdr
 {

57 * 
	mmsg_«me
;

58 
	mmsg_«mñí
;

59 
iovec
 * 
	mmsg_iov
;

60 
__kî√l_size_t
 
	mmsg_iovÀn
;

61 * 
	mmsg_c⁄åﬁ
;

62 
__kî√l_size_t
 
	mmsg_c⁄åﬁÀn
;

63 
	mmsg_Êags
;

72 
	scmsghdr
 {

73 
__kî√l_size_t
 
	mcmsg_Àn
;

74 
	mcmsg_Àvñ
;

75 
	mcmsg_ty≥
;

83 
	#__CMSG_NXTHDR
(
˘l
, 
Àn
, 
cmsg
Ë
	`__cmsg_nxthdr
((˘l),÷í),(cmsg))

	)

84 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`cmsg_nxthdr
((mhdr), (cmsg))

	)

86 
	#CMSG_ALIGN
(
Àn
Ë–(÷í)+()-1Ë& ~(()-1Ë)

	)

88 
	#CMSG_DATA
(
cmsg
Ë((*)((*)(cmsgË+ 
	`CMSG_ALIGN
((
cmsghdr
))))

	)

89 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
((
cmsghdr
)Ë+ CMSG_ALIGN÷í))

	)

90 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
((
cmsghdr
)Ë+ (Àn))

	)

92 
	#__CMSG_FIRSTHDR
(
˘l
,
Àn
Ë(÷íË>(
cmsghdr
) ? \

93 (
cmsghdr
 *)(
˘l
) : \

94 (
cmsghdr
 *)
NULL
)

	)

95 
	#CMSG_FIRSTHDR
(
msg
Ë
	`__CMSG_FIRSTHDR
((msg)->
msg_c⁄åﬁ
, (msg)->
msg_c⁄åﬁÀn
)

	)

96 
	#CMSG_OK
(
mhdr
, 
cmsg
Ë((cmsg)->
cmsg_Àn
 >(
cmsghdr
) && \

97 (
cmsg
)->
cmsg_Àn
 <= () \

98 ((
mhdr
)->
msg_c⁄åﬁÀn
 - \

99 ((*)(
cmsg
Ë- (*)(
mhdr
)->
msg_c⁄åﬁ
)))

	)

105 #i‡ 
deföed
(
__GNUC__
)

106 
	#__KINLINE
 
__ölöe__


	)

107 #ñi‡
deföed
(
__˝lu•lus
)

108 
	#__KINLINE
 
ölöe


	)

110 
	#__KINLINE
 

	)

127 
__KINLINE
 
cmsghdr
 * 
	$__cmsg_nxthdr
(*
__˘l
, 
__kî√l_size_t
 
__size
,

128 
cmsghdr
 *
__cmsg
)

130 
cmsghdr
 * 
__±r
;

132 
__±r
 = (
cmsghdr
*)(((*Ë
__cmsg
Ë+ 
	`CMSG_ALIGN
(__cmsg->
cmsg_Àn
));

133 i‡(()((*)(
__±r
+1Ë- (*Ë
__˘l
Ë> 
__size
)

134  (
cmsghdr
 *)0;

136  
__±r
;

137 
	}
}

139 
__KINLINE
 
cmsghdr
 * 
	$cmsg_nxthdr
 (
msghdr
 *
__msg
, 
cmsghdr
 *
__cmsg
)

141  
	`__cmsg_nxthdr
(
__msg
->
msg_c⁄åﬁ
, __msg->
msg_c⁄åﬁÀn
, 
__cmsg
);

142 
	}
}

146 
	#SCM_RIGHTS
 0x01

	)

147 
	#SCM_CREDENTIALS
 0x02

	)

148 
	#SCM_SECURITY
 0x03

	)

150 
	su¸ed
 {

151 
__u32
 
	mpid
;

152 
__u32
 
	muid
;

153 
__u32
 
	mgid
;

157 
	#AF_UNSPEC
 0

	)

158 
	#AF_UNIX
 1

	)

159 
	#AF_LOCAL
 1

	)

160 
	#AF_INET
 2

	)

161 
	#AF_AX25
 3

	)

162 
	#AF_IPX
 4

	)

163 
	#AF_APPLETALK
 5

	)

164 
	#AF_NETROM
 6

	)

165 
	#AF_BRIDGE
 7

	)

166 
	#AF_ATMPVC
 8

	)

167 
	#AF_X25
 9

	)

168 
	#AF_INET6
 10

	)

169 
	#AF_ROSE
 11

	)

170 
	#AF_DEC√t
 12

	)

171 
	#AF_NETBEUI
 13

	)

172 
	#AF_SECURITY
 14

	)

173 
	#AF_KEY
 15

	)

174 
	#AF_NETLINK
 16

	)

175 
	#AF_ROUTE
 
AF_NETLINK


	)

176 
	#AF_PACKET
 17

	)

177 
	#AF_ASH
 18

	)

178 
	#AF_ECONET
 19

	)

179 
	#AF_ATMSVC
 20

	)

180 
	#AF_SNA
 22

	)

181 
	#AF_IRDA
 23

	)

182 
	#AF_PPPOX
 24

	)

183 
	#AF_WANPIPE
 25

	)

184 
	#AF_LLC
 26

	)

185 
	#AF_TIPC
 30

	)

186 
	#AF_BLUETOOTH
 31

	)

187 
	#AF_MAX
 32

	)

190 
	#PF_UNSPEC
 
AF_UNSPEC


	)

191 
	#PF_UNIX
 
AF_UNIX


	)

192 
	#PF_LOCAL
 
AF_LOCAL


	)

193 
	#PF_INET
 
AF_INET


	)

194 
	#PF_AX25
 
AF_AX25


	)

195 
	#PF_IPX
 
AF_IPX


	)

196 
	#PF_APPLETALK
 
AF_APPLETALK


	)

197 
	#PF_NETROM
 
AF_NETROM


	)

198 
	#PF_BRIDGE
 
AF_BRIDGE


	)

199 
	#PF_ATMPVC
 
AF_ATMPVC


	)

200 
	#PF_X25
 
AF_X25


	)

201 
	#PF_INET6
 
AF_INET6


	)

202 
	#PF_ROSE
 
AF_ROSE


	)

203 
	#PF_DEC√t
 
AF_DEC√t


	)

204 
	#PF_NETBEUI
 
AF_NETBEUI


	)

205 
	#PF_SECURITY
 
AF_SECURITY


	)

206 
	#PF_KEY
 
AF_KEY


	)

207 
	#PF_NETLINK
 
AF_NETLINK


	)

208 
	#PF_ROUTE
 
AF_ROUTE


	)

209 
	#PF_PACKET
 
AF_PACKET


	)

210 
	#PF_ASH
 
AF_ASH


	)

211 
	#PF_ECONET
 
AF_ECONET


	)

212 
	#PF_ATMSVC
 
AF_ATMSVC


	)

213 
	#PF_SNA
 
AF_SNA


	)

214 
	#PF_IRDA
 
AF_IRDA


	)

215 
	#PF_PPPOX
 
AF_PPPOX


	)

216 
	#PF_WANPIPE
 
AF_WANPIPE


	)

217 
	#PF_LLC
 
AF_LLC


	)

218 
	#PF_TIPC
 
AF_TIPC


	)

219 
	#PF_BLUETOOTH
 
AF_BLUETOOTH


	)

220 
	#PF_MAX
 
AF_MAX


	)

223 
	#SOMAXCONN
 128

	)

229 
	#MSG_OOB
 1

	)

230 
	#MSG_PEEK
 2

	)

231 
	#MSG_DONTROUTE
 4

	)

232 
	#MSG_TRYHARD
 4

	)

233 
	#MSG_CTRUNC
 8

	)

234 
	#MSG_PROBE
 0x10

	)

235 
	#MSG_TRUNC
 0x20

	)

236 
	#MSG_DONTWAIT
 0x40

	)

237 
	#MSG_EOR
 0x80

	)

238 
	#MSG_WAITALL
 0x100

	)

239 
	#MSG_FIN
 0x200

	)

240 
	#MSG_SYN
 0x400

	)

241 
	#MSG_CONFIRM
 0x800

	)

242 
	#MSG_RST
 0x1000

	)

243 
	#MSG_ERRQUEUE
 0x2000

	)

244 
	#MSG_NOSIGNAL
 0x4000

	)

245 
	#MSG_MORE
 0x8000

	)

247 
	#MSG_EOF
 
MSG_FIN


	)

249 #i‡
deföed
(
CONFIG_COMPAT
)

250 
	#MSG_CMSG_COMPAT
 0x80000000

	)

252 
	#MSG_CMSG_COMPAT
 0

	)

257 
	#SOL_IP
 0

	)

259 
	#SOL_TCP
 6

	)

260 
	#SOL_UDP
 17

	)

261 
	#SOL_IPV6
 41

	)

262 
	#SOL_ICMPV6
 58

	)

263 
	#SOL_SCTP
 132

	)

264 
	#SOL_RAW
 255

	)

265 
	#SOL_IPX
 256

	)

266 
	#SOL_AX25
 257

	)

267 
	#SOL_ATALK
 258

	)

268 
	#SOL_NETROM
 259

	)

269 
	#SOL_ROSE
 260

	)

270 
	#SOL_DECNET
 261

	)

271 
	#SOL_X25
 262

	)

272 
	#SOL_PACKET
 263

	)

273 
	#SOL_ATM
 264

	)

274 
	#SOL_AAL
 265

	)

275 
	#SOL_IRDA
 266

	)

276 
	#SOL_NETBEUI
 267

	)

277 
	#SOL_LLC
 268

	)

278 
	#SOL_DCCP
 269

	)

279 
	#SOL_NETLINK
 270

	)

280 
	#SOL_TIPC
 271

	)

283 
	#IPX_TYPE
 1

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm/socket.h

1 #i‚de‡
_ASM_SOCKET_H


2 
	#_ASM_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

26 
	#SO_PASSCRED
 16

	)

27 
	#SO_PEERCRED
 17

	)

28 
	#SO_RCVLOWAT
 18

	)

29 
	#SO_SNDLOWAT
 19

	)

30 
	#SO_RCVTIMEO
 20

	)

31 
	#SO_SNDTIMEO
 21

	)

34 
	#SO_SECURITY_AUTHENTICATION
 22

	)

35 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

36 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

38 
	#SO_BINDTODEVICE
 25

	)

41 
	#SO_ATTACH_FILTER
 26

	)

42 
	#SO_DETACH_FILTER
 27

	)

44 
	#SO_PEERNAME
 28

	)

45 
	#SO_TIMESTAMP
 29

	)

46 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

48 
	#SO_ACCEPTCONN
 30

	)

50 
	#SO_PEERSEC
 31

	)

51 
	#SO_PASSSEC
 34

	)

	@/usr/include/linux/sockios.h

18 #i‚de‡
_LINUX_SOCKIOS_H


19 
	#_LINUX_SOCKIOS_H


	)

21 
	~<asm/sockios.h
>

24 
	#SIOCINQ
 
FIONREAD


	)

25 
	#SIOCOUTQ
 
TIOCOUTQ


	)

28 
	#SIOCADDRT
 0x890B

	)

29 
	#SIOCDELRT
 0x890C

	)

30 
	#SIOCRTMSG
 0x890D

	)

33 
	#SIOCGIFNAME
 0x8910

	)

34 
	#SIOCSIFLINK
 0x8911

	)

35 
	#SIOCGIFCONF
 0x8912

	)

36 
	#SIOCGIFFLAGS
 0x8913

	)

37 
	#SIOCSIFFLAGS
 0x8914

	)

38 
	#SIOCGIFADDR
 0x8915

	)

39 
	#SIOCSIFADDR
 0x8916

	)

40 
	#SIOCGIFDSTADDR
 0x8917

	)

41 
	#SIOCSIFDSTADDR
 0x8918

	)

42 
	#SIOCGIFBRDADDR
 0x8919

	)

43 
	#SIOCSIFBRDADDR
 0x891®

	)

44 
	#SIOCGIFNETMASK
 0x891b

	)

45 
	#SIOCSIFNETMASK
 0x891¯

	)

46 
	#SIOCGIFMETRIC
 0x891d

	)

47 
	#SIOCSIFMETRIC
 0x891ê

	)

48 
	#SIOCGIFMEM
 0x891‡

	)

49 
	#SIOCSIFMEM
 0x8920

	)

50 
	#SIOCGIFMTU
 0x8921

	)

51 
	#SIOCSIFMTU
 0x8922

	)

52 
	#SIOCSIFNAME
 0x8923

	)

53 
	#SIOCSIFHWADDR
 0x8924

	)

54 
	#SIOCGIFENCAP
 0x8925

	)

55 
	#SIOCSIFENCAP
 0x8926

	)

56 
	#SIOCGIFHWADDR
 0x8927

	)

57 
	#SIOCGIFSLAVE
 0x8929

	)

58 
	#SIOCSIFSLAVE
 0x8930

	)

59 
	#SIOCADDMULTI
 0x8931

	)

60 
	#SIOCDELMULTI
 0x8932

	)

61 
	#SIOCGIFINDEX
 0x8933

	)

62 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

63 
	#SIOCSIFPFLAGS
 0x8934

	)

64 
	#SIOCGIFPFLAGS
 0x8935

	)

65 
	#SIOCDIFADDR
 0x8936

	)

66 
	#SIOCSIFHWBROADCAST
 0x8937

	)

67 
	#SIOCGIFCOUNT
 0x8938

	)

69 
	#SIOCGIFBR
 0x8940

	)

70 
	#SIOCSIFBR
 0x8941

	)

72 
	#SIOCGIFTXQLEN
 0x8942

	)

73 
	#SIOCSIFTXQLEN
 0x8943

	)

75 
	#SIOCGIFDIVERT
 0x8944

	)

76 
	#SIOCSIFDIVERT
 0x8945

	)

78 
	#SIOCETHTOOL
 0x8946

	)

80 
	#SIOCGMIIPHY
 0x8947

	)

81 
	#SIOCGMIIREG
 0x8948

	)

82 
	#SIOCSMIIREG
 0x8949

	)

84 
	#SIOCWANDEV
 0x894A

	)

88 
	#SIOCDARP
 0x8953

	)

89 
	#SIOCGARP
 0x8954

	)

90 
	#SIOCSARP
 0x8955

	)

93 
	#SIOCDRARP
 0x8960

	)

94 
	#SIOCGRARP
 0x8961

	)

95 
	#SIOCSRARP
 0x8962

	)

99 
	#SIOCGIFMAP
 0x8970

	)

100 
	#SIOCSIFMAP
 0x8971

	)

104 
	#SIOCADDDLCI
 0x8980

	)

105 
	#SIOCDELDLCI
 0x8981

	)

107 
	#SIOCGIFVLAN
 0x8982

	)

108 
	#SIOCSIFVLAN
 0x8983

	)

112 
	#SIOCBONDENSLAVE
 0x8990

	)

113 
	#SIOCBONDRELEASE
 0x8991

	)

114 
	#SIOCBONDSETHWADDR
 0x8992

	)

115 
	#SIOCBONDSLAVEINFOQUERY
 0x8993

	)

116 
	#SIOCBONDINFOQUERY
 0x8994

	)

117 
	#SIOCBONDCHANGEACTIVE
 0x8995

	)

120 
	#SIOCBRADDBR
 0x89a0

	)

121 
	#SIOCBRDELBR
 0x89a1

	)

122 
	#SIOCBRADDIF
 0x89a2

	)

123 
	#SIOCBRDELIF
 0x89a3

	)

136 
	#SIOCDEVPRIVATE
 0x89F0

	)

142 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/linux/uio.h

1 #i‚de‡
__LINUX_UIO_H


2 
	#__LINUX_UIO_H


	)

4 
	~<löux/ty≥s.h
>

19 
	siovec


21 *
	miov_ba£
;

22 
__kî√l_size_t
 
	miov_Àn
;

30 
	#UIO_FASTIOV
 8

	)

31 
	#UIO_MAXIOV
 1024

	)

33 
	#UIO_MAXIOV
 16

	)

45 
__ölöe__
 
size_t
 
	$iov_Àngth
(c⁄° 
iovec
 *
iov
, 
ƒ_£gs
)

47 
£g
;

48 
size_t
 
ªt
 = 0;

50 
£g
 = 0; seg < 
ƒ_£gs
; seg++)

51 
ªt
 +
iov
[
£g
].
iov_Àn
;

52  
ªt
;

53 
	}
}

55 
iov_sh‹ãn
(
iovec
 *
iov
, 
ƒ_£gs
, 
size_t
 
to
);

	@/usr/include/asm/sockios.h

1 #i‚de‡
__ARCH_I386_SOCKIOS__


2 
	#__ARCH_I386_SOCKIOS__


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

	@
1
.
1
/usr/include
57
1501
ag7100/adm_phy.c
ag7100/adm_phy.h
ag7100/ag7100.c
ag7100/ag7100.h
ag7100/ag7100_mod.mod.c
ag7100/ag7100_phy.h
ag7100/ag7100_trc.h
ag7100/athr_phy.h
ag7100/athrf1_phy.c
ag7100/athrs16_phy.c
ag7100/athrs16_phy.h
ag7100/athrs26_phy.c
ag7100/athrs26_phy.h
ag7100/g5_Plus1_2_29a_unmanaged_Atheros_v5.c
ag7100/g5_Plus1_2_29b_unmanaged_Atheros_v5.c
ag7100/g5_Plus1_2_31_unmanaged_Atheros_v3.c
ag7100/g5_Plus1_2_31_unmanaged_Atheros_v4.c
ag7100/g5_Plus1_2_31_unmanaged_Atheros_v6.c
ag7100/g5e_Plus1_2_29a_unmanaged_Atheros_v3.c
ag7100/generic_i2c.c
ag7100/generic_i2c.h
ag7100/generic_spi.c
ag7100/generic_spi.h
ag7100/ipPhy.c
ag7100/ipPhy.h
ag7100/rtPhy.c
ag7100/rtPhy.h
ag7100/vsc73xx.c
ag7100/vsc73xx.h
ag7100/vsc8601_phy.c
ag7100/vsc8601_phy.h
ag7100/vsc_phy.c
ag7100/vsc_phy.h
/usr/include/asm/byteorder.h
/usr/include/linux/errno.h
/usr/include/linux/kernel.h
/usr/include/linux/netdevice.h
/usr/include/linux/stddef.h
/usr/include/linux/types.h
/usr/include/asm/errno.h
/usr/include/asm/types.h
/usr/include/linux/byteorder/little_endian.h
/usr/include/linux/if.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_packet.h
/usr/include/linux/posix_types.h
/usr/include/asm-generic/errno.h
/usr/include/asm/posix_types.h
/usr/include/linux/byteorder/generic.h
/usr/include/linux/byteorder/swab.h
/usr/include/linux/hdlc/ioctl.h
/usr/include/linux/socket.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm/socket.h
/usr/include/linux/sockios.h
/usr/include/linux/uio.h
/usr/include/asm/sockios.h
